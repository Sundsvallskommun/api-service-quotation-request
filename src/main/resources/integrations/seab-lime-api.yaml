swagger: '2.0'
info:
  title: Limeobject API
  description: |
    ## Introduction
    The Limeobject API provides basic operations for creating, updating and deleting objects in a Lime CRM application.

    ## Schema
    The API can and should only be accessed over HTTPS. All data sent to the API should be in JSON format with the
    `application/json` content type set. Responses are sent in [JSON/HAL format](https://tools.ietf.org/html/draft-kelly-json-hal-08)
    (`application/json+hal` media type) which in addition to plain JSON object data also includes hyperlinks to direct
    clients around the available resources.

    Properties that are missing values, e.g. relation properties without a related object are set to `null`. This is
    also the way to unset relations.

    System properties are prefixed with an underscore, e.g. `_createdtime`. These properties are always read-only.

    All date/time properties are specified in [ISO 8601 format](https://pypi.python.org/pypi/iso8601),
    e.g. `YYYY-MM-DDTHH:MM:SSZ` (time in UTC) or `YYYY-MM-DDTHH:MM:SS+hh:mm` (where `hh:mm` specifies the
    time offset from UTC). Not specifying timezone information is valid but the result is undefined.

    ## Authentication and authorization
    API keys are used to authenticate against the API. The key must be sent as the value of a header named
    `x-api-key` in every request. Example:
    ```
    curl -H "x-api-key: ABC123" https://example.com/my_app/api/v1
    ```
    Requests that require authentication will in som cases return `404 Not Found` instead of `401 Unauthorized` in
    order to prevent leakage of application data to unauthorized users.

    All requests are subject to the Lime CRM permission model. If access is denied for a certain operation on a
    certain resource, `403 Forbidden` will be returned.

    ## Error handling
    The API uses standard HTTP status codes for error reporting. Some responses contain error objects, see the
    response for each operation for specifics.

    ## Embedding
    Some operations support embedding of related information that would otherwise require additional requests to retrieve.
    Embedding is done through the `_embed` query parameter.

    ## Filtering
    The `/{limetype}/` collection (e.g. `/company/`) endpoints support simple filtering queries. As an example,
    the following query would retrieve companies based in Lund where the responsible coworker has id 1001:
    ```
    curl -H "x-api-key: ABC123" https://example.com/my_app/api/v1/limeobject/company/?city=Lund&amp;responsible=1001
    ```
    How filtering works:
     - Equal sign (=) is always used to separate property name and condition value, ampersand (&) separates expressions.
     - Prefixes are used to change expression evaluation, supported prefixes: `not`, `max`, `min`.
     - AND logic is applied between expressions having different property names, i.e. filtering on `relation=prospect&amp;region=south` will show all prospects in the southern region.
     - OR logic is applied between expressions having _the same_ property names, i.e. it is possible to filter on `relation=prospect&amp;relation=customer` to retrieve both prospects and customers.
     - AND logic is applied between expressions having the same property names when used with the _not_ operator, i.e. `not-region=south&amp;not-region=west` to retrieve objects neither in the south nor west regions.
     - String comparisons are always case-insensitive.

    Another example which would retrieve deals that are not in status closed and where the quotation
    date is before 2017-01-01 UTC:
    ```
    curl -H "x-api-key: ABC123" https://example.com/my_app/api/v1/limeobject/deal/?not-dealstatus=closed&max-quotationdate=2016-12-31T23:59Z
    ```

    ## Sorting
    The `/{limetype}/` collection endpoints support sorting of the returned result. Currently the result can only
    be sorted on a single property by specifying a valid property name for the `_sort` query parameter. The result
    can be sorted in descending order by prefixing the property name with a minus sign.

    ## Pagination
    The `/{limetype}/` collection endpoints return multiple objects paginated to 10 items
    by default. The following next object page can be retrieved by following the `next` link provided in the response.

    ## Documents and files
    Document and file handling in Lime CRM are two separate concepts. Any limeobject having a _file_ property can
    reference a file object. The file object stores the actual binary file data and related metadata such as file size
    and file name. Creating a document object with an attached file therefore requires two operations:

    1. Create a new file (using the File API).
    2. Create a new limeobject (using the Limeobject API) and set the file property to the ID of the file created in the first step.

    This also means that completely deleting a document and its attached file requires two steps (if you know
    both the document and the file ids):

    1. Remove the document limeobject.
    2. Remove the file object (using the file API).

    ## Unsupported features
    Currently the following is not supported:
     - Many-to-many relations.
  version: "1.0.0"
  contact:
    name: Lime by Lundalogik
    url: https://www.lime-technologies.com/support/
host: host.com
schemes:
  - https
  - http
basePath: /lime%20crm/api/v1/limeobject/
consumes:
  - application/json
produces:
  - application/hal+json
securityDefinitions:
  api_key:
    type: apiKey
    name: x-api-key
    in: header
security:
  - api_key: []
paths:
  /helpdesk/:
    get:
      summary: "Retrieve "
      description: "Retrieves a paginated list of  objects. The result contains all available properties."
      tags:
        - helpdesk
      parameters:
        - name: _limit
          in: query
          type: integer
          description: The maximum number of items to return.
          minimum: 1
          maximum: 50
          default: 10
        - name: _sort
          in: query
          type: string
          description: Name of a (single) property to sort on. To sort in descending order, prefix with a '-' sign.
        - name: _embed
          in: query
          required: false
          type: array
          collectionFormat: multi
          items:
            enum:
              - "customer"
              - "person"
              - "installation"
              - "mainhelpdesk"
              - "business"
              - "campaign"
              - "agreement"
              - "helpdeskcategory"
              - "businessarea"
              - "mainhelpdesktype"
              - "office"
              - "coworker"
              - "reactioncategory"
              - "reactiontype"
              - "helpdeskgroup"
              - "currentchecklistactivity"
              - "coworkerprojectleader1"
              - "coworkerprojectleader2"
              - "participant"
              - "business2"
          description: Include data for related objects of the specified type.
      responses:
        200:
          description: An array of objects.
          schema:
            type: array
            items:
              $ref: '#/definitions/helpdesk'
    post:
      summary: "Create a new ."
      description: "Create a single  object."
      tags:
        - helpdesk
      parameters:
        - name: ""
          in: body
          description: "The  data to insert."
          required: true
          schema:
            $ref: '#/definitions/helpdesk'
      responses:
        201:
          description: A JSON representation of the created object.
          schema:
            $ref: '#/definitions/helpdesk'
        400:
          description: Bad request.
          schema:
            $ref: '#/definitions/Error'
  /helpdesk/{id}/:
    get:
      summary: "Retrieve a ."
      description: "Retrieves a single  object having the specified id."
      tags:
        - helpdesk
      parameters:
        - name: id
          in: path
          description: "The id of the  to retrieve."
          required: true
          type: integer
        - name: _embed
          in: query
          required: false
          type: array
          collectionFormat: multi
          items:
            enum:
              - "customer"
              - "person"
              - "installation"
              - "mainhelpdesk"
              - "business"
              - "campaign"
              - "agreement"
              - "helpdeskcategory"
              - "businessarea"
              - "mainhelpdesktype"
              - "office"
              - "coworker"
              - "reactioncategory"
              - "reactiontype"
              - "helpdeskgroup"
              - "currentchecklistactivity"
              - "coworkerprojectleader1"
              - "coworkerprojectleader2"
              - "participant"
              - "business2"
          description: Include data for related objects of the specified type.
      responses:
        200:
          description: A JSON representation of the requested object.
          schema:
            $ref: '#/definitions/helpdesk'
        404:
          description: Limeobject not found.
    delete:
      summary: "Delete a ."
      description: "Deletes a single  object having the specified id."
      tags:
        - helpdesk
      parameters:
        - name: id
          in: path
          description: The id of the object to delete.
          required: true
          type: integer
      responses:
        204:
          description: Success. No content returned.
        404:
          description: Limeobject not found.
    put:
      summary: "Update an existing ."
      description: "Updates a single  object having the specified id. Note that partial objects (i.e. without all properties set) can be specified."
      tags:
        - helpdesk
      parameters:
        - name: id
          in: path
          description: "The id of the  to update."
          required: true
          type: integer
        - name: ""
          in: body
          description: "The  data to update."
          required: true
          schema:
            $ref: '#/definitions/helpdesk'
      responses:
        200:
          description: A JSON representation of the updated (full) object.
          schema:
            $ref: '#/definitions/helpdesk'
        404:
          description: Limeobject not found.
  /helpdesk/{id}/customer/:
    get:
      summary: "Retrieve a related ."
      description: "Retrieves the related  object, if any."
      tags:
        - helpdesk
      parameters:
        - name: id
          in: path
          description: "The id of the parent ."
          required: true
          type: integer
      responses:
        200:
          description: A JSON representation of the requested object.
          schema:
            $ref: '#/definitions/customer'
        404:
          description: "No  object has been set for this relation."
  /helpdesk/{id}/person/:
    get:
      summary: "Retrieve a related ."
      description: "Retrieves the related  object, if any."
      tags:
        - helpdesk
      parameters:
        - name: id
          in: path
          description: "The id of the parent ."
          required: true
          type: integer
      responses:
        200:
          description: A JSON representation of the requested object.
          schema:
            $ref: '#/definitions/person'
        404:
          description: "No  object has been set for this relation."
  /helpdesk/{id}/installation/:
    get:
      summary: "Retrieve a related ."
      description: "Retrieves the related  object, if any."
      tags:
        - helpdesk
      parameters:
        - name: id
          in: path
          description: "The id of the parent ."
          required: true
          type: integer
      responses:
        200:
          description: A JSON representation of the requested object.
          schema:
            $ref: '#/definitions/installation'
        404:
          description: "No  object has been set for this relation."
  /helpdesk/{id}/mainhelpdesk/:
    get:
      summary: "Retrieve a related ."
      description: "Retrieves the related  object, if any."
      tags:
        - helpdesk
      parameters:
        - name: id
          in: path
          description: "The id of the parent ."
          required: true
          type: integer
      responses:
        200:
          description: A JSON representation of the requested object.
          schema:
            $ref: '#/definitions/helpdesk'
        404:
          description: "No  object has been set for this relation."
  /helpdesk/{id}/campaign/:
    get:
      summary: "Retrieve a related kampanj."
      description: "Retrieves the related kampanj object, if any."
      tags:
        - helpdesk
      parameters:
        - name: id
          in: path
          description: "The id of the parent ."
          required: true
          type: integer
      responses:
        200:
          description: A JSON representation of the requested object.
          schema:
            $ref: '#/definitions/Kampanj'
        404:
          description: "No kampanj object has been set for this relation."
  /helpdesk/{id}/agreement/:
    get:
      summary: "Retrieve a related ."
      description: "Retrieves the related  object, if any."
      tags:
        - helpdesk
      parameters:
        - name: id
          in: path
          description: "The id of the parent ."
          required: true
          type: integer
      responses:
        200:
          description: A JSON representation of the requested object.
          schema:
            $ref: '#/definitions/agreement'
        404:
          description: "No  object has been set for this relation."
  /helpdesk/{id}/helpdeskcategory/:
    get:
      summary: "Retrieve a related ."
      description: "Retrieves the related  object, if any."
      tags:
        - helpdesk
      parameters:
        - name: id
          in: path
          description: "The id of the parent ."
          required: true
          type: integer
      responses:
        200:
          description: A JSON representation of the requested object.
          schema:
            $ref: '#/definitions/helpdeskcategory'
        404:
          description: "No  object has been set for this relation."
  /helpdesk/{id}/businessarea/:
    get:
      summary: "Retrieve a related subcategory."
      description: "Retrieves the related subcategory object, if any."
      tags:
        - helpdesk
      parameters:
        - name: id
          in: path
          description: "The id of the parent ."
          required: true
          type: integer
      responses:
        200:
          description: A JSON representation of the requested object.
          schema:
            $ref: '#/definitions/Subcategory'
        404:
          description: "No subcategory object has been set for this relation."
  /helpdesk/{id}/mainhelpdesktype/:
    get:
      summary: "Retrieve a related checklisttemplate."
      description: "Retrieves the related checklisttemplate object, if any."
      tags:
        - helpdesk
      parameters:
        - name: id
          in: path
          description: "The id of the parent ."
          required: true
          type: integer
      responses:
        200:
          description: A JSON representation of the requested object.
          schema:
            $ref: '#/definitions/checklisttemplate'
        404:
          description: "No checklisttemplate object has been set for this relation."
  /helpdesk/{id}/office/:
    get:
      summary: "Retrieve a related office."
      description: "Retrieves the related office object, if any."
      tags:
        - helpdesk
      parameters:
        - name: id
          in: path
          description: "The id of the parent ."
          required: true
          type: integer
      responses:
        200:
          description: A JSON representation of the requested object.
          schema:
            $ref: '#/definitions/Office'
        404:
          description: "No office object has been set for this relation."
  /helpdesk/{id}/coworker/:
    get:
      summary: "Retrieve a related ."
      description: "Retrieves the related  object, if any."
      tags:
        - helpdesk
      parameters:
        - name: id
          in: path
          description: "The id of the parent ."
          required: true
          type: integer
      responses:
        200:
          description: A JSON representation of the requested object.
          schema:
            $ref: '#/definitions/coworker'
        404:
          description: "No  object has been set for this relation."
  /helpdesk/{id}/reactioncategory/:
    get:
      summary: "Retrieve a related reactioncategory."
      description: "Retrieves the related reactioncategory object, if any."
      tags:
        - helpdesk
      parameters:
        - name: id
          in: path
          description: "The id of the parent ."
          required: true
          type: integer
      responses:
        200:
          description: A JSON representation of the requested object.
          schema:
            $ref: '#/definitions/reactioncategory'
        404:
          description: "No reactioncategory object has been set for this relation."
  /helpdesk/{id}/reactiontype/:
    get:
      summary: "Retrieve a related reactiontype."
      description: "Retrieves the related reactiontype object, if any."
      tags:
        - helpdesk
      parameters:
        - name: id
          in: path
          description: "The id of the parent ."
          required: true
          type: integer
      responses:
        200:
          description: A JSON representation of the requested object.
          schema:
            $ref: '#/definitions/reactiontype'
        404:
          description: "No reactiontype object has been set for this relation."
  /helpdesk/{id}/helpdeskgroup/:
    get:
      summary: "Retrieve a related helpdeskgroup."
      description: "Retrieves the related helpdeskgroup object, if any."
      tags:
        - helpdesk
      parameters:
        - name: id
          in: path
          description: "The id of the parent ."
          required: true
          type: integer
      responses:
        200:
          description: A JSON representation of the requested object.
          schema:
            $ref: '#/definitions/helpdeskgroup'
        404:
          description: "No helpdeskgroup object has been set for this relation."
  /helpdesk/{id}/currentchecklistactivity/:
    get:
      summary: "Retrieve a related checklist activity."
      description: "Retrieves the related checklist activity object, if any."
      tags:
        - helpdesk
      parameters:
        - name: id
          in: path
          description: "The id of the parent ."
          required: true
          type: integer
      responses:
        200:
          description: A JSON representation of the requested object.
          schema:
            $ref: '#/definitions/Checklist_Activity'
        404:
          description: "No checklist activity object has been set for this relation."
  /helpdesk/{id}/coworkerprojectleader1/:
    get:
      summary: "Retrieve a related ."
      description: "Retrieves the related  object, if any."
      tags:
        - helpdesk
      parameters:
        - name: id
          in: path
          description: "The id of the parent ."
          required: true
          type: integer
      responses:
        200:
          description: A JSON representation of the requested object.
          schema:
            $ref: '#/definitions/coworker'
        404:
          description: "No  object has been set for this relation."
  /helpdesk/{id}/coworkerprojectleader2/:
    get:
      summary: "Retrieve a related ."
      description: "Retrieves the related  object, if any."
      tags:
        - helpdesk
      parameters:
        - name: id
          in: path
          description: "The id of the parent ."
          required: true
          type: integer
      responses:
        200:
          description: A JSON representation of the requested object.
          schema:
            $ref: '#/definitions/coworker'
        404:
          description: "No  object has been set for this relation."
  /helpdesk/{id}/participant/:
    get:
      summary: "Retrieve a related participant."
      description: "Retrieves the related participant object, if any."
      tags:
        - helpdesk
      parameters:
        - name: id
          in: path
          description: "The id of the parent ."
          required: true
          type: integer
      responses:
        200:
          description: A JSON representation of the requested object.
          schema:
            $ref: '#/definitions/Participant'
        404:
          description: "No participant object has been set for this relation."
  /helpdesk/{id}/business2/:
    get:
      summary: "Retrieve a related offert."
      description: "Retrieves the related offert object, if any."
      tags:
        - helpdesk
      parameters:
        - name: id
          in: path
          description: "The id of the parent ."
          required: true
          type: integer
      responses:
        200:
          description: A JSON representation of the requested object.
          schema:
            $ref: '#/definitions/Offert'
        404:
          description: "No offert object has been set for this relation."
  /helpdesk/{id}/history/:
    get:
      summary: "Retrieve related ."
      description: "Retrieves a paginated list of  objects related to a specific . The result contains all available properties."
      tags:
        - helpdesk
      parameters:
        - name: id
          in: path
          description: "The id of the parent ."
          required: true
          type: integer
        - name: _limit
          in: query
          type: integer
          description: The maximum number of items to return.
          minimum: 1
          maximum: 50
          default: 10
        - name: _sort
          in: query
          type: string
          description: Name of a (single) property to sort on. To sort in descending order, prefix with a '-' sign.
      responses:
        200:
          description: An array of objects.
          schema:
            type: array
            items:
              $ref: '#/definitions/history'
        404:
          description: Limeobject not found.
  /helpdesk/{id}/document/:
    get:
      summary: "Retrieve related ."
      description: "Retrieves a paginated list of  objects related to a specific . The result contains all available properties."
      tags:
        - helpdesk
      parameters:
        - name: id
          in: path
          description: "The id of the parent ."
          required: true
          type: integer
        - name: _limit
          in: query
          type: integer
          description: The maximum number of items to return.
          minimum: 1
          maximum: 50
          default: 10
        - name: _sort
          in: query
          type: string
          description: Name of a (single) property to sort on. To sort in descending order, prefix with a '-' sign.
      responses:
        200:
          description: An array of objects.
          schema:
            type: array
            items:
              $ref: '#/definitions/document'
        404:
          description: Limeobject not found.
  /helpdesk/{id}/workorder/:
    get:
      summary: "Retrieve related ."
      description: "Retrieves a paginated list of workorder objects related to a specific . The result contains all available properties."
      tags:
        - helpdesk
      parameters:
        - name: id
          in: path
          description: "The id of the parent ."
          required: true
          type: integer
        - name: _limit
          in: query
          type: integer
          description: The maximum number of items to return.
          minimum: 1
          maximum: 50
          default: 10
        - name: _sort
          in: query
          type: string
          description: Name of a (single) property to sort on. To sort in descending order, prefix with a '-' sign.
      responses:
        200:
          description: An array of objects.
          schema:
            type: array
            items:
              $ref: '#/definitions/workorder'
        404:
          description: Limeobject not found.
  /helpdesk/{id}/timelog/:
    get:
      summary: "Retrieve related ."
      description: "Retrieves a paginated list of timelog objects related to a specific . The result contains all available properties."
      tags:
        - helpdesk
      parameters:
        - name: id
          in: path
          description: "The id of the parent ."
          required: true
          type: integer
        - name: _limit
          in: query
          type: integer
          description: The maximum number of items to return.
          minimum: 1
          maximum: 50
          default: 10
        - name: _sort
          in: query
          type: string
          description: Name of a (single) property to sort on. To sort in descending order, prefix with a '-' sign.
      responses:
        200:
          description: An array of objects.
          schema:
            type: array
            items:
              $ref: '#/definitions/timelog'
        404:
          description: Limeobject not found.
  /helpdesk/{id}/oldchecklistactivity/:
    get:
      summary: "Retrieve related ."
      description: "Retrieves a paginated list of checklistactivity old objects related to a specific . The result contains all available properties."
      tags:
        - helpdesk
      parameters:
        - name: id
          in: path
          description: "The id of the parent ."
          required: true
          type: integer
        - name: _limit
          in: query
          type: integer
          description: The maximum number of items to return.
          minimum: 1
          maximum: 50
          default: 10
        - name: _sort
          in: query
          type: string
          description: Name of a (single) property to sort on. To sort in descending order, prefix with a '-' sign.
      responses:
        200:
          description: An array of objects.
          schema:
            type: array
            items:
              $ref: '#/definitions/checklistactivity_old'
        404:
          description: Limeobject not found.
  /helpdesk/{id}/soschecklistactivity/:
    get:
      summary: "Retrieve related ."
      description: "Retrieves a paginated list of soschecklistactivity objects related to a specific . The result contains all available properties."
      tags:
        - helpdesk
      parameters:
        - name: id
          in: path
          description: "The id of the parent ."
          required: true
          type: integer
        - name: _limit
          in: query
          type: integer
          description: The maximum number of items to return.
          minimum: 1
          maximum: 50
          default: 10
        - name: _sort
          in: query
          type: string
          description: Name of a (single) property to sort on. To sort in descending order, prefix with a '-' sign.
      responses:
        200:
          description: An array of objects.
          schema:
            type: array
            items:
              $ref: '#/definitions/soschecklistactivity'
        404:
          description: Limeobject not found.
  /helpdesk/{id}/todo/:
    get:
      summary: "Retrieve related ."
      description: "Retrieves a paginated list of todo objects related to a specific . The result contains all available properties."
      tags:
        - helpdesk
      parameters:
        - name: id
          in: path
          description: "The id of the parent ."
          required: true
          type: integer
        - name: _limit
          in: query
          type: integer
          description: The maximum number of items to return.
          minimum: 1
          maximum: 50
          default: 10
        - name: _sort
          in: query
          type: string
          description: Name of a (single) property to sort on. To sort in descending order, prefix with a '-' sign.
      responses:
        200:
          description: An array of objects.
          schema:
            type: array
            items:
              $ref: '#/definitions/todo'
        404:
          description: Limeobject not found.
  /helpdesk/{id}/checklist_item/:
    get:
      summary: "Retrieve related ."
      description: "Retrieves a paginated list of checklist_item objects related to a specific . The result contains all available properties."
      tags:
        - helpdesk
      parameters:
        - name: id
          in: path
          description: "The id of the parent ."
          required: true
          type: integer
        - name: _limit
          in: query
          type: integer
          description: The maximum number of items to return.
          minimum: 1
          maximum: 50
          default: 10
        - name: _sort
          in: query
          type: string
          description: Name of a (single) property to sort on. To sort in descending order, prefix with a '-' sign.
      responses:
        200:
          description: An array of objects.
          schema:
            type: array
            items:
              $ref: '#/definitions/checklist_item'
        404:
          description: Limeobject not found.
  /helpdesk/{id}/subhelpdesk/:
    get:
      summary: "Retrieve related ."
      description: "Retrieves a paginated list of  objects related to a specific . The result contains all available properties."
      tags:
        - helpdesk
      parameters:
        - name: id
          in: path
          description: "The id of the parent ."
          required: true
          type: integer
        - name: _limit
          in: query
          type: integer
          description: The maximum number of items to return.
          minimum: 1
          maximum: 50
          default: 10
        - name: _sort
          in: query
          type: string
          description: Name of a (single) property to sort on. To sort in descending order, prefix with a '-' sign.
      responses:
        200:
          description: An array of objects.
          schema:
            type: array
            items:
              $ref: '#/definitions/helpdesk'
        404:
          description: Limeobject not found.
  /helpdesk/{id}/signagreement/:
    get:
      summary: "Retrieve related sign agreement."
      description: "Retrieves a paginated list of sign agreement objects related to a specific . The result contains all available properties."
      tags:
        - helpdesk
      parameters:
        - name: id
          in: path
          description: "The id of the parent ."
          required: true
          type: integer
        - name: _limit
          in: query
          type: integer
          description: The maximum number of items to return.
          minimum: 1
          maximum: 50
          default: 10
        - name: _sort
          in: query
          type: string
          description: Name of a (single) property to sort on. To sort in descending order, prefix with a '-' sign.
      responses:
        200:
          description: An array of objects.
          schema:
            type: array
            items:
              $ref: '#/definitions/Sign_agreement'
        404:
          description: Limeobject not found.
  /helpdesk/{id}/smssendout/:
    get:
      summary: "Retrieve related sms sendouts."
      description: "Retrieves a paginated list of sms sendout objects related to a specific . The result contains all available properties."
      tags:
        - helpdesk
      parameters:
        - name: id
          in: path
          description: "The id of the parent ."
          required: true
          type: integer
        - name: _limit
          in: query
          type: integer
          description: The maximum number of items to return.
          minimum: 1
          maximum: 50
          default: 10
        - name: _sort
          in: query
          type: string
          description: Name of a (single) property to sort on. To sort in descending order, prefix with a '-' sign.
      responses:
        200:
          description: An array of objects.
          schema:
            type: array
            items:
              $ref: '#/definitions/SMS_sendout'
        404:
          description: Limeobject not found.
  /helpdesk/{id}/smsrecipient/:
    get:
      summary: "Retrieve related sms recipients."
      description: "Retrieves a paginated list of sms recipient objects related to a specific . The result contains all available properties."
      tags:
        - helpdesk
      parameters:
        - name: id
          in: path
          description: "The id of the parent ."
          required: true
          type: integer
        - name: _limit
          in: query
          type: integer
          description: The maximum number of items to return.
          minimum: 1
          maximum: 50
          default: 10
        - name: _sort
          in: query
          type: string
          description: Name of a (single) property to sort on. To sort in descending order, prefix with a '-' sign.
      responses:
        200:
          description: An array of objects.
          schema:
            type: array
            items:
              $ref: '#/definitions/SMS_recipient'
        404:
          description: Limeobject not found.
  /helpdesk/{id}/debitrequest/:
    get:
      summary: "Retrieve related ."
      description: "Retrieves a paginated list of debitrequest objects related to a specific . The result contains all available properties."
      tags:
        - helpdesk
      parameters:
        - name: id
          in: path
          description: "The id of the parent ."
          required: true
          type: integer
        - name: _limit
          in: query
          type: integer
          description: The maximum number of items to return.
          minimum: 1
          maximum: 50
          default: 10
        - name: _sort
          in: query
          type: string
          description: Name of a (single) property to sort on. To sort in descending order, prefix with a '-' sign.
      responses:
        200:
          description: An array of objects.
          schema:
            type: array
            items:
              $ref: '#/definitions/debitrequest'
        404:
          description: Limeobject not found.
  /helpdesk/{id}/serviceprotocol/:
    get:
      summary: "Retrieve related ."
      description: "Retrieves a paginated list of serviceprotocol objects related to a specific . The result contains all available properties."
      tags:
        - helpdesk
      parameters:
        - name: id
          in: path
          description: "The id of the parent ."
          required: true
          type: integer
        - name: _limit
          in: query
          type: integer
          description: The maximum number of items to return.
          minimum: 1
          maximum: 50
          default: 10
        - name: _sort
          in: query
          type: string
          description: Name of a (single) property to sort on. To sort in descending order, prefix with a '-' sign.
      responses:
        200:
          description: An array of objects.
          schema:
            type: array
            items:
              $ref: '#/definitions/serviceprotocol'
        404:
          description: Limeobject not found.
  /helpdeskcategory/:
    get:
      summary: "Retrieve "
      description: "Retrieves a paginated list of  objects. The result contains all available properties."
      tags:
        - helpdeskcategory
      parameters:
        - name: _limit
          in: query
          type: integer
          description: The maximum number of items to return.
          minimum: 1
          maximum: 50
          default: 10
        - name: _sort
          in: query
          type: string
          description: Name of a (single) property to sort on. To sort in descending order, prefix with a '-' sign.
      responses:
        200:
          description: An array of objects.
          schema:
            type: array
            items:
              $ref: '#/definitions/helpdeskcategory'
    post:
      summary: "Create a new ."
      description: "Create a single  object."
      tags:
        - helpdeskcategory
      parameters:
        - name: ""
          in: body
          description: "The  data to insert."
          required: true
          schema:
            $ref: '#/definitions/helpdeskcategory'
      responses:
        201:
          description: A JSON representation of the created object.
          schema:
            $ref: '#/definitions/helpdeskcategory'
        400:
          description: Bad request.
          schema:
            $ref: '#/definitions/Error'
  /helpdeskcategory/{id}/:
    get:
      summary: "Retrieve a ."
      description: "Retrieves a single  object having the specified id."
      tags:
        - helpdeskcategory
      parameters:
        - name: id
          in: path
          description: "The id of the  to retrieve."
          required: true
          type: integer
      responses:
        200:
          description: A JSON representation of the requested object.
          schema:
            $ref: '#/definitions/helpdeskcategory'
        404:
          description: Limeobject not found.
    delete:
      summary: "Delete a ."
      description: "Deletes a single  object having the specified id."
      tags:
        - helpdeskcategory
      parameters:
        - name: id
          in: path
          description: The id of the object to delete.
          required: true
          type: integer
      responses:
        204:
          description: Success. No content returned.
        404:
          description: Limeobject not found.
    put:
      summary: "Update an existing ."
      description: "Updates a single  object having the specified id. Note that partial objects (i.e. without all properties set) can be specified."
      tags:
        - helpdeskcategory
      parameters:
        - name: id
          in: path
          description: "The id of the  to update."
          required: true
          type: integer
        - name: ""
          in: body
          description: "The  data to update."
          required: true
          schema:
            $ref: '#/definitions/helpdeskcategory'
      responses:
        200:
          description: A JSON representation of the updated (full) object.
          schema:
            $ref: '#/definitions/helpdeskcategory'
        404:
          description: Limeobject not found.
  /helpdeskcategory/{id}/helpdesk/:
    get:
      summary: "Retrieve related ."
      description: "Retrieves a paginated list of  objects related to a specific . The result contains all available properties."
      tags:
        - helpdeskcategory
      parameters:
        - name: id
          in: path
          description: "The id of the parent ."
          required: true
          type: integer
        - name: _limit
          in: query
          type: integer
          description: The maximum number of items to return.
          minimum: 1
          maximum: 50
          default: 10
        - name: _sort
          in: query
          type: string
          description: Name of a (single) property to sort on. To sort in descending order, prefix with a '-' sign.
      responses:
        200:
          description: An array of objects.
          schema:
            type: array
            items:
              $ref: '#/definitions/helpdesk'
        404:
          description: Limeobject not found.
  /helpdeskcategory/{id}/businessarea/:
    get:
      summary: "Retrieve related subcategories."
      description: "Retrieves a paginated list of subcategory objects related to a specific . The result contains all available properties."
      tags:
        - helpdeskcategory
      parameters:
        - name: id
          in: path
          description: "The id of the parent ."
          required: true
          type: integer
        - name: _limit
          in: query
          type: integer
          description: The maximum number of items to return.
          minimum: 1
          maximum: 50
          default: 10
        - name: _sort
          in: query
          type: string
          description: Name of a (single) property to sort on. To sort in descending order, prefix with a '-' sign.
      responses:
        200:
          description: An array of objects.
          schema:
            type: array
            items:
              $ref: '#/definitions/Subcategory'
        404:
          description: Limeobject not found.
  /reactioncategory/:
    get:
      summary: "Retrieve "
      description: "Retrieves a paginated list of reactioncategory objects. The result contains all available properties."
      tags:
        - reactioncategory
      parameters:
        - name: _limit
          in: query
          type: integer
          description: The maximum number of items to return.
          minimum: 1
          maximum: 50
          default: 10
        - name: _sort
          in: query
          type: string
          description: Name of a (single) property to sort on. To sort in descending order, prefix with a '-' sign.
      responses:
        200:
          description: An array of objects.
          schema:
            type: array
            items:
              $ref: '#/definitions/reactioncategory'
    post:
      summary: "Create a new reactioncategory."
      description: "Create a single reactioncategory object."
      tags:
        - reactioncategory
      parameters:
        - name: "reactioncategory"
          in: body
          description: "The reactioncategory data to insert."
          required: true
          schema:
            $ref: '#/definitions/reactioncategory'
      responses:
        201:
          description: A JSON representation of the created object.
          schema:
            $ref: '#/definitions/reactioncategory'
        400:
          description: Bad request.
          schema:
            $ref: '#/definitions/Error'
  /reactioncategory/{id}/:
    get:
      summary: "Retrieve a reactioncategory."
      description: "Retrieves a single reactioncategory object having the specified id."
      tags:
        - reactioncategory
      parameters:
        - name: id
          in: path
          description: "The id of the reactioncategory to retrieve."
          required: true
          type: integer
      responses:
        200:
          description: A JSON representation of the requested object.
          schema:
            $ref: '#/definitions/reactioncategory'
        404:
          description: Limeobject not found.
    delete:
      summary: "Delete a reactioncategory."
      description: "Deletes a single reactioncategory object having the specified id."
      tags:
        - reactioncategory
      parameters:
        - name: id
          in: path
          description: The id of the object to delete.
          required: true
          type: integer
      responses:
        204:
          description: Success. No content returned.
        404:
          description: Limeobject not found.
    put:
      summary: "Update an existing reactioncategory."
      description: "Updates a single reactioncategory object having the specified id. Note that partial objects (i.e. without all properties set) can be specified."
      tags:
        - reactioncategory
      parameters:
        - name: id
          in: path
          description: "The id of the reactioncategory to update."
          required: true
          type: integer
        - name: "reactioncategory"
          in: body
          description: "The reactioncategory data to update."
          required: true
          schema:
            $ref: '#/definitions/reactioncategory'
      responses:
        200:
          description: A JSON representation of the updated (full) object.
          schema:
            $ref: '#/definitions/reactioncategory'
        404:
          description: Limeobject not found.
  /reactioncategory/{id}/reactiontype/:
    get:
      summary: "Retrieve related ."
      description: "Retrieves a paginated list of reactiontype objects related to a specific reactioncategory. The result contains all available properties."
      tags:
        - reactioncategory
      parameters:
        - name: id
          in: path
          description: "The id of the parent reactioncategory."
          required: true
          type: integer
        - name: _limit
          in: query
          type: integer
          description: The maximum number of items to return.
          minimum: 1
          maximum: 50
          default: 10
        - name: _sort
          in: query
          type: string
          description: Name of a (single) property to sort on. To sort in descending order, prefix with a '-' sign.
      responses:
        200:
          description: An array of objects.
          schema:
            type: array
            items:
              $ref: '#/definitions/reactiontype'
        404:
          description: Limeobject not found.
  /reactioncategory/{id}/helpdesk/:
    get:
      summary: "Retrieve related ."
      description: "Retrieves a paginated list of  objects related to a specific reactioncategory. The result contains all available properties."
      tags:
        - reactioncategory
      parameters:
        - name: id
          in: path
          description: "The id of the parent reactioncategory."
          required: true
          type: integer
        - name: _limit
          in: query
          type: integer
          description: The maximum number of items to return.
          minimum: 1
          maximum: 50
          default: 10
        - name: _sort
          in: query
          type: string
          description: Name of a (single) property to sort on. To sort in descending order, prefix with a '-' sign.
      responses:
        200:
          description: An array of objects.
          schema:
            type: array
            items:
              $ref: '#/definitions/helpdesk'
        404:
          description: Limeobject not found.
  /businessarea/:
    get:
      summary: "Retrieve subcategories"
      description: "Retrieves a paginated list of subcategory objects. The result contains all available properties."
      tags:
        - Subcategories
      parameters:
        - name: _limit
          in: query
          type: integer
          description: The maximum number of items to return.
          minimum: 1
          maximum: 50
          default: 10
        - name: _sort
          in: query
          type: string
          description: Name of a (single) property to sort on. To sort in descending order, prefix with a '-' sign.
        - name: _embed
          in: query
          required: false
          type: array
          collectionFormat: multi
          items:
            enum:
              - "helpdeskcategory"
          description: Include data for related objects of the specified type.
      responses:
        200:
          description: An array of objects.
          schema:
            type: array
            items:
              $ref: '#/definitions/Subcategory'
    post:
      summary: "Create a new subcategory."
      description: "Create a single subcategory object."
      tags:
        - Subcategories
      parameters:
        - name: "Subcategory"
          in: body
          description: "The subcategory data to insert."
          required: true
          schema:
            $ref: '#/definitions/Subcategory'
      responses:
        201:
          description: A JSON representation of the created object.
          schema:
            $ref: '#/definitions/Subcategory'
        400:
          description: Bad request.
          schema:
            $ref: '#/definitions/Error'
  /businessarea/{id}/:
    get:
      summary: "Retrieve a subcategory."
      description: "Retrieves a single subcategory object having the specified id."
      tags:
        - Subcategories
      parameters:
        - name: id
          in: path
          description: "The id of the subcategory to retrieve."
          required: true
          type: integer
        - name: _embed
          in: query
          required: false
          type: array
          collectionFormat: multi
          items:
            enum:
              - "helpdeskcategory"
          description: Include data for related objects of the specified type.
      responses:
        200:
          description: A JSON representation of the requested object.
          schema:
            $ref: '#/definitions/Subcategory'
        404:
          description: Limeobject not found.
    delete:
      summary: "Delete a subcategory."
      description: "Deletes a single subcategory object having the specified id."
      tags:
        - Subcategories
      parameters:
        - name: id
          in: path
          description: The id of the object to delete.
          required: true
          type: integer
      responses:
        204:
          description: Success. No content returned.
        404:
          description: Limeobject not found.
    put:
      summary: "Update an existing subcategory."
      description: "Updates a single subcategory object having the specified id. Note that partial objects (i.e. without all properties set) can be specified."
      tags:
        - Subcategories
      parameters:
        - name: id
          in: path
          description: "The id of the subcategory to update."
          required: true
          type: integer
        - name: "Subcategory"
          in: body
          description: "The Subcategory data to update."
          required: true
          schema:
            $ref: '#/definitions/Subcategory'
      responses:
        200:
          description: A JSON representation of the updated (full) object.
          schema:
            $ref: '#/definitions/Subcategory'
        404:
          description: Limeobject not found.
  /businessarea/{id}/helpdeskcategory/:
    get:
      summary: "Retrieve a related ."
      description: "Retrieves the related  object, if any."
      tags:
        - Subcategories
      parameters:
        - name: id
          in: path
          description: "The id of the parent subcategory."
          required: true
          type: integer
      responses:
        200:
          description: A JSON representation of the requested object.
          schema:
            $ref: '#/definitions/helpdeskcategory'
        404:
          description: "No  object has been set for this relation."
  /businessarea/{id}/helpdesk/:
    get:
      summary: "Retrieve related ."
      description: "Retrieves a paginated list of  objects related to a specific subcategory. The result contains all available properties."
      tags:
        - Subcategories
      parameters:
        - name: id
          in: path
          description: "The id of the parent subcategory."
          required: true
          type: integer
        - name: _limit
          in: query
          type: integer
          description: The maximum number of items to return.
          minimum: 1
          maximum: 50
          default: 10
        - name: _sort
          in: query
          type: string
          description: Name of a (single) property to sort on. To sort in descending order, prefix with a '-' sign.
      responses:
        200:
          description: An array of objects.
          schema:
            type: array
            items:
              $ref: '#/definitions/helpdesk'
        404:
          description: Limeobject not found.
  /businessarea/{id}/business/:
    get:
      summary: "Retrieve related offerter."
      description: "Retrieves a paginated list of offert objects related to a specific subcategory. The result contains all available properties."
      tags:
        - Subcategories
      parameters:
        - name: id
          in: path
          description: "The id of the parent subcategory."
          required: true
          type: integer
        - name: _limit
          in: query
          type: integer
          description: The maximum number of items to return.
          minimum: 1
          maximum: 50
          default: 10
        - name: _sort
          in: query
          type: string
          description: Name of a (single) property to sort on. To sort in descending order, prefix with a '-' sign.
      responses:
        200:
          description: An array of objects.
          schema:
            type: array
            items:
              $ref: '#/definitions/Offert'
        404:
          description: Limeobject not found.
  /businessarea/{id}/helpdesktype/:
    get:
      summary: "Retrieve related ."
      description: "Retrieves a paginated list of checklisttemplate objects related to a specific subcategory. The result contains all available properties."
      tags:
        - Subcategories
      parameters:
        - name: id
          in: path
          description: "The id of the parent subcategory."
          required: true
          type: integer
        - name: _limit
          in: query
          type: integer
          description: The maximum number of items to return.
          minimum: 1
          maximum: 50
          default: 10
        - name: _sort
          in: query
          type: string
          description: Name of a (single) property to sort on. To sort in descending order, prefix with a '-' sign.
      responses:
        200:
          description: An array of objects.
          schema:
            type: array
            items:
              $ref: '#/definitions/checklisttemplate'
        404:
          description: Limeobject not found.
  /businessarea/{id}/campaign/:
    get:
      summary: "Retrieve related ."
      description: "Retrieves a paginated list of kampanj objects related to a specific subcategory. The result contains all available properties."
      tags:
        - Subcategories
      parameters:
        - name: id
          in: path
          description: "The id of the parent subcategory."
          required: true
          type: integer
        - name: _limit
          in: query
          type: integer
          description: The maximum number of items to return.
          minimum: 1
          maximum: 50
          default: 10
        - name: _sort
          in: query
          type: string
          description: Name of a (single) property to sort on. To sort in descending order, prefix with a '-' sign.
      responses:
        200:
          description: An array of objects.
          schema:
            type: array
            items:
              $ref: '#/definitions/Kampanj'
        404:
          description: Limeobject not found.
  /helpdesktype/:
    get:
      summary: "Retrieve "
      description: "Retrieves a paginated list of checklisttemplate objects. The result contains all available properties."
      tags:
        - helpdesktype
      parameters:
        - name: _limit
          in: query
          type: integer
          description: The maximum number of items to return.
          minimum: 1
          maximum: 50
          default: 10
        - name: _sort
          in: query
          type: string
          description: Name of a (single) property to sort on. To sort in descending order, prefix with a '-' sign.
        - name: _embed
          in: query
          required: false
          type: array
          collectionFormat: multi
          items:
            enum:
              - "businessarea"
              - "office"
              - "helpdeskgroup"
          description: Include data for related objects of the specified type.
      responses:
        200:
          description: An array of objects.
          schema:
            type: array
            items:
              $ref: '#/definitions/checklisttemplate'
    post:
      summary: "Create a new checklisttemplate."
      description: "Create a single checklisttemplate object."
      tags:
        - helpdesktype
      parameters:
        - name: "checklisttemplate"
          in: body
          description: "The checklisttemplate data to insert."
          required: true
          schema:
            $ref: '#/definitions/checklisttemplate'
      responses:
        201:
          description: A JSON representation of the created object.
          schema:
            $ref: '#/definitions/checklisttemplate'
        400:
          description: Bad request.
          schema:
            $ref: '#/definitions/Error'
  /helpdesktype/{id}/:
    get:
      summary: "Retrieve a checklisttemplate."
      description: "Retrieves a single checklisttemplate object having the specified id."
      tags:
        - helpdesktype
      parameters:
        - name: id
          in: path
          description: "The id of the checklisttemplate to retrieve."
          required: true
          type: integer
        - name: _embed
          in: query
          required: false
          type: array
          collectionFormat: multi
          items:
            enum:
              - "businessarea"
              - "office"
              - "helpdeskgroup"
          description: Include data for related objects of the specified type.
      responses:
        200:
          description: A JSON representation of the requested object.
          schema:
            $ref: '#/definitions/checklisttemplate'
        404:
          description: Limeobject not found.
    delete:
      summary: "Delete a checklisttemplate."
      description: "Deletes a single checklisttemplate object having the specified id."
      tags:
        - helpdesktype
      parameters:
        - name: id
          in: path
          description: The id of the object to delete.
          required: true
          type: integer
      responses:
        204:
          description: Success. No content returned.
        404:
          description: Limeobject not found.
    put:
      summary: "Update an existing checklisttemplate."
      description: "Updates a single checklisttemplate object having the specified id. Note that partial objects (i.e. without all properties set) can be specified."
      tags:
        - helpdesktype
      parameters:
        - name: id
          in: path
          description: "The id of the checklisttemplate to update."
          required: true
          type: integer
        - name: "checklisttemplate"
          in: body
          description: "The checklisttemplate data to update."
          required: true
          schema:
            $ref: '#/definitions/checklisttemplate'
      responses:
        200:
          description: A JSON representation of the updated (full) object.
          schema:
            $ref: '#/definitions/checklisttemplate'
        404:
          description: Limeobject not found.
  /helpdesktype/{id}/businessarea/:
    get:
      summary: "Retrieve a related subcategory."
      description: "Retrieves the related subcategory object, if any."
      tags:
        - helpdesktype
      parameters:
        - name: id
          in: path
          description: "The id of the parent checklisttemplate."
          required: true
          type: integer
      responses:
        200:
          description: A JSON representation of the requested object.
          schema:
            $ref: '#/definitions/Subcategory'
        404:
          description: "No subcategory object has been set for this relation."
  /helpdesktype/{id}/office/:
    get:
      summary: "Retrieve a related office."
      description: "Retrieves the related office object, if any."
      tags:
        - helpdesktype
      parameters:
        - name: id
          in: path
          description: "The id of the parent checklisttemplate."
          required: true
          type: integer
      responses:
        200:
          description: A JSON representation of the requested object.
          schema:
            $ref: '#/definitions/Office'
        404:
          description: "No office object has been set for this relation."
  /helpdesktype/{id}/helpdeskgroup/:
    get:
      summary: "Retrieve a related helpdeskgroup."
      description: "Retrieves the related helpdeskgroup object, if any."
      tags:
        - helpdesktype
      parameters:
        - name: id
          in: path
          description: "The id of the parent checklisttemplate."
          required: true
          type: integer
      responses:
        200:
          description: A JSON representation of the requested object.
          schema:
            $ref: '#/definitions/helpdeskgroup'
        404:
          description: "No helpdeskgroup object has been set for this relation."
  /helpdesktype/{id}/checklistactivitytemplate/:
    get:
      summary: "Retrieve related ."
      description: "Retrieves a paginated list of checklistactivitytemplate objects related to a specific checklisttemplate. The result contains all available properties."
      tags:
        - helpdesktype
      parameters:
        - name: id
          in: path
          description: "The id of the parent checklisttemplate."
          required: true
          type: integer
        - name: _limit
          in: query
          type: integer
          description: The maximum number of items to return.
          minimum: 1
          maximum: 50
          default: 10
        - name: _sort
          in: query
          type: string
          description: Name of a (single) property to sort on. To sort in descending order, prefix with a '-' sign.
      responses:
        200:
          description: An array of objects.
          schema:
            type: array
            items:
              $ref: '#/definitions/checklistactivitytemplate'
        404:
          description: Limeobject not found.
  /helpdesktype/{id}/helpdesk/:
    get:
      summary: "Retrieve related ."
      description: "Retrieves a paginated list of  objects related to a specific checklisttemplate. The result contains all available properties."
      tags:
        - helpdesktype
      parameters:
        - name: id
          in: path
          description: "The id of the parent checklisttemplate."
          required: true
          type: integer
        - name: _limit
          in: query
          type: integer
          description: The maximum number of items to return.
          minimum: 1
          maximum: 50
          default: 10
        - name: _sort
          in: query
          type: string
          description: Name of a (single) property to sort on. To sort in descending order, prefix with a '-' sign.
      responses:
        200:
          description: An array of objects.
          schema:
            type: array
            items:
              $ref: '#/definitions/helpdesk'
        404:
          description: Limeobject not found.
  /helpdesktype/{id}/checklistactivity/:
    get:
      summary: "Retrieve related checklist activities."
      description: "Retrieves a paginated list of checklist activity objects related to a specific checklisttemplate. The result contains all available properties."
      tags:
        - helpdesktype
      parameters:
        - name: id
          in: path
          description: "The id of the parent checklisttemplate."
          required: true
          type: integer
        - name: _limit
          in: query
          type: integer
          description: The maximum number of items to return.
          minimum: 1
          maximum: 50
          default: 10
        - name: _sort
          in: query
          type: string
          description: Name of a (single) property to sort on. To sort in descending order, prefix with a '-' sign.
      responses:
        200:
          description: An array of objects.
          schema:
            type: array
            items:
              $ref: '#/definitions/Checklist_Activity'
        404:
          description: Limeobject not found.
  /reactiontype/:
    get:
      summary: "Retrieve "
      description: "Retrieves a paginated list of reactiontype objects. The result contains all available properties."
      tags:
        - reactiontype
      parameters:
        - name: _limit
          in: query
          type: integer
          description: The maximum number of items to return.
          minimum: 1
          maximum: 50
          default: 10
        - name: _sort
          in: query
          type: string
          description: Name of a (single) property to sort on. To sort in descending order, prefix with a '-' sign.
        - name: _embed
          in: query
          required: false
          type: array
          collectionFormat: multi
          items:
            enum:
              - "reactioncategory"
          description: Include data for related objects of the specified type.
      responses:
        200:
          description: An array of objects.
          schema:
            type: array
            items:
              $ref: '#/definitions/reactiontype'
    post:
      summary: "Create a new reactiontype."
      description: "Create a single reactiontype object."
      tags:
        - reactiontype
      parameters:
        - name: "reactiontype"
          in: body
          description: "The reactiontype data to insert."
          required: true
          schema:
            $ref: '#/definitions/reactiontype'
      responses:
        201:
          description: A JSON representation of the created object.
          schema:
            $ref: '#/definitions/reactiontype'
        400:
          description: Bad request.
          schema:
            $ref: '#/definitions/Error'
  /reactiontype/{id}/:
    get:
      summary: "Retrieve a reactiontype."
      description: "Retrieves a single reactiontype object having the specified id."
      tags:
        - reactiontype
      parameters:
        - name: id
          in: path
          description: "The id of the reactiontype to retrieve."
          required: true
          type: integer
        - name: _embed
          in: query
          required: false
          type: array
          collectionFormat: multi
          items:
            enum:
              - "reactioncategory"
          description: Include data for related objects of the specified type.
      responses:
        200:
          description: A JSON representation of the requested object.
          schema:
            $ref: '#/definitions/reactiontype'
        404:
          description: Limeobject not found.
    delete:
      summary: "Delete a reactiontype."
      description: "Deletes a single reactiontype object having the specified id."
      tags:
        - reactiontype
      parameters:
        - name: id
          in: path
          description: The id of the object to delete.
          required: true
          type: integer
      responses:
        204:
          description: Success. No content returned.
        404:
          description: Limeobject not found.
    put:
      summary: "Update an existing reactiontype."
      description: "Updates a single reactiontype object having the specified id. Note that partial objects (i.e. without all properties set) can be specified."
      tags:
        - reactiontype
      parameters:
        - name: id
          in: path
          description: "The id of the reactiontype to update."
          required: true
          type: integer
        - name: "reactiontype"
          in: body
          description: "The reactiontype data to update."
          required: true
          schema:
            $ref: '#/definitions/reactiontype'
      responses:
        200:
          description: A JSON representation of the updated (full) object.
          schema:
            $ref: '#/definitions/reactiontype'
        404:
          description: Limeobject not found.
  /reactiontype/{id}/reactioncategory/:
    get:
      summary: "Retrieve a related reactioncategory."
      description: "Retrieves the related reactioncategory object, if any."
      tags:
        - reactiontype
      parameters:
        - name: id
          in: path
          description: "The id of the parent reactiontype."
          required: true
          type: integer
      responses:
        200:
          description: A JSON representation of the requested object.
          schema:
            $ref: '#/definitions/reactioncategory'
        404:
          description: "No reactioncategory object has been set for this relation."
  /reactiontype/{id}/helpdesk/:
    get:
      summary: "Retrieve related ."
      description: "Retrieves a paginated list of  objects related to a specific reactiontype. The result contains all available properties."
      tags:
        - reactiontype
      parameters:
        - name: id
          in: path
          description: "The id of the parent reactiontype."
          required: true
          type: integer
        - name: _limit
          in: query
          type: integer
          description: The maximum number of items to return.
          minimum: 1
          maximum: 50
          default: 10
        - name: _sort
          in: query
          type: string
          description: Name of a (single) property to sort on. To sort in descending order, prefix with a '-' sign.
      responses:
        200:
          description: An array of objects.
          schema:
            type: array
            items:
              $ref: '#/definitions/helpdesk'
        404:
          description: Limeobject not found.
  /customer/:
    get:
      summary: "Retrieve "
      description: "Retrieves a paginated list of  objects. The result contains all available properties."
      tags:
        - customer
      parameters:
        - name: _limit
          in: query
          type: integer
          description: The maximum number of items to return.
          minimum: 1
          maximum: 50
          default: 10
        - name: _sort
          in: query
          type: string
          description: Name of a (single) property to sort on. To sort in descending order, prefix with a '-' sign.
        - name: _embed
          in: query
          required: false
          type: array
          collectionFormat: multi
          items:
            enum:
              - "maincustomer"
              - "coworkerel"
              - "coworkerfjv"
              - "coworkeravf"
          description: Include data for related objects of the specified type.
      responses:
        200:
          description: An array of objects.
          schema:
            type: array
            items:
              $ref: '#/definitions/customer'
    post:
      summary: "Create a new ."
      description: "Create a single  object."
      tags:
        - customer
      parameters:
        - name: ""
          in: body
          description: "The  data to insert."
          required: true
          schema:
            $ref: '#/definitions/customer'
      responses:
        201:
          description: A JSON representation of the created object.
          schema:
            $ref: '#/definitions/customer'
        400:
          description: Bad request.
          schema:
            $ref: '#/definitions/Error'
  /customer/{id}/:
    get:
      summary: "Retrieve a ."
      description: "Retrieves a single  object having the specified id."
      tags:
        - customer
      parameters:
        - name: id
          in: path
          description: "The id of the  to retrieve."
          required: true
          type: integer
        - name: _embed
          in: query
          required: false
          type: array
          collectionFormat: multi
          items:
            enum:
              - "maincustomer"
              - "coworkerel"
              - "coworkerfjv"
              - "coworkeravf"
          description: Include data for related objects of the specified type.
      responses:
        200:
          description: A JSON representation of the requested object.
          schema:
            $ref: '#/definitions/customer'
        404:
          description: Limeobject not found.
    delete:
      summary: "Delete a ."
      description: "Deletes a single  object having the specified id."
      tags:
        - customer
      parameters:
        - name: id
          in: path
          description: The id of the object to delete.
          required: true
          type: integer
      responses:
        204:
          description: Success. No content returned.
        404:
          description: Limeobject not found.
    put:
      summary: "Update an existing ."
      description: "Updates a single  object having the specified id. Note that partial objects (i.e. without all properties set) can be specified."
      tags:
        - customer
      parameters:
        - name: id
          in: path
          description: "The id of the  to update."
          required: true
          type: integer
        - name: ""
          in: body
          description: "The  data to update."
          required: true
          schema:
            $ref: '#/definitions/customer'
      responses:
        200:
          description: A JSON representation of the updated (full) object.
          schema:
            $ref: '#/definitions/customer'
        404:
          description: Limeobject not found.
  /customer/{id}/maincustomer/:
    get:
      summary: "Retrieve a related ."
      description: "Retrieves the related  object, if any."
      tags:
        - customer
      parameters:
        - name: id
          in: path
          description: "The id of the parent ."
          required: true
          type: integer
      responses:
        200:
          description: A JSON representation of the requested object.
          schema:
            $ref: '#/definitions/customer'
        404:
          description: "No  object has been set for this relation."
  /customer/{id}/coworkerel/:
    get:
      summary: "Retrieve a related ."
      description: "Retrieves the related  object, if any."
      tags:
        - customer
      parameters:
        - name: id
          in: path
          description: "The id of the parent ."
          required: true
          type: integer
      responses:
        200:
          description: A JSON representation of the requested object.
          schema:
            $ref: '#/definitions/coworker'
        404:
          description: "No  object has been set for this relation."
  /customer/{id}/coworkerfjv/:
    get:
      summary: "Retrieve a related ."
      description: "Retrieves the related  object, if any."
      tags:
        - customer
      parameters:
        - name: id
          in: path
          description: "The id of the parent ."
          required: true
          type: integer
      responses:
        200:
          description: A JSON representation of the requested object.
          schema:
            $ref: '#/definitions/coworker'
        404:
          description: "No  object has been set for this relation."
  /customer/{id}/coworkeravf/:
    get:
      summary: "Retrieve a related ."
      description: "Retrieves the related  object, if any."
      tags:
        - customer
      parameters:
        - name: id
          in: path
          description: "The id of the parent ."
          required: true
          type: integer
      responses:
        200:
          description: A JSON representation of the requested object.
          schema:
            $ref: '#/definitions/coworker'
        404:
          description: "No  object has been set for this relation."
  /customer/{id}/person/:
    get:
      summary: "Retrieve related ."
      description: "Retrieves a paginated list of  objects related to a specific . The result contains all available properties."
      tags:
        - customer
      parameters:
        - name: id
          in: path
          description: "The id of the parent ."
          required: true
          type: integer
        - name: _limit
          in: query
          type: integer
          description: The maximum number of items to return.
          minimum: 1
          maximum: 50
          default: 10
        - name: _sort
          in: query
          type: string
          description: Name of a (single) property to sort on. To sort in descending order, prefix with a '-' sign.
      responses:
        200:
          description: An array of objects.
          schema:
            type: array
            items:
              $ref: '#/definitions/person'
        404:
          description: Limeobject not found.
  /customer/{id}/history/:
    get:
      summary: "Retrieve related ."
      description: "Retrieves a paginated list of  objects related to a specific . The result contains all available properties."
      tags:
        - customer
      parameters:
        - name: id
          in: path
          description: "The id of the parent ."
          required: true
          type: integer
        - name: _limit
          in: query
          type: integer
          description: The maximum number of items to return.
          minimum: 1
          maximum: 50
          default: 10
        - name: _sort
          in: query
          type: string
          description: Name of a (single) property to sort on. To sort in descending order, prefix with a '-' sign.
      responses:
        200:
          description: An array of objects.
          schema:
            type: array
            items:
              $ref: '#/definitions/history'
        404:
          description: Limeobject not found.
  /customer/{id}/document/:
    get:
      summary: "Retrieve related ."
      description: "Retrieves a paginated list of  objects related to a specific . The result contains all available properties."
      tags:
        - customer
      parameters:
        - name: id
          in: path
          description: "The id of the parent ."
          required: true
          type: integer
        - name: _limit
          in: query
          type: integer
          description: The maximum number of items to return.
          minimum: 1
          maximum: 50
          default: 10
        - name: _sort
          in: query
          type: string
          description: Name of a (single) property to sort on. To sort in descending order, prefix with a '-' sign.
      responses:
        200:
          description: An array of objects.
          schema:
            type: array
            items:
              $ref: '#/definitions/document'
        404:
          description: Limeobject not found.
  /customer/{id}/installation/:
    get:
      summary: "Retrieve related ."
      description: "Retrieves a paginated list of  objects related to a specific . The result contains all available properties."
      tags:
        - customer
      parameters:
        - name: id
          in: path
          description: "The id of the parent ."
          required: true
          type: integer
        - name: _limit
          in: query
          type: integer
          description: The maximum number of items to return.
          minimum: 1
          maximum: 50
          default: 10
        - name: _sort
          in: query
          type: string
          description: Name of a (single) property to sort on. To sort in descending order, prefix with a '-' sign.
      responses:
        200:
          description: An array of objects.
          schema:
            type: array
            items:
              $ref: '#/definitions/installation'
        404:
          description: Limeobject not found.
  /customer/{id}/agreement/:
    get:
      summary: "Retrieve related ."
      description: "Retrieves a paginated list of  objects related to a specific . The result contains all available properties."
      tags:
        - customer
      parameters:
        - name: id
          in: path
          description: "The id of the parent ."
          required: true
          type: integer
        - name: _limit
          in: query
          type: integer
          description: The maximum number of items to return.
          minimum: 1
          maximum: 50
          default: 10
        - name: _sort
          in: query
          type: string
          description: Name of a (single) property to sort on. To sort in descending order, prefix with a '-' sign.
      responses:
        200:
          description: An array of objects.
          schema:
            type: array
            items:
              $ref: '#/definitions/agreement'
        404:
          description: Limeobject not found.
  /customer/{id}/helpdesk/:
    get:
      summary: "Retrieve related ."
      description: "Retrieves a paginated list of  objects related to a specific . The result contains all available properties."
      tags:
        - customer
      parameters:
        - name: id
          in: path
          description: "The id of the parent ."
          required: true
          type: integer
        - name: _limit
          in: query
          type: integer
          description: The maximum number of items to return.
          minimum: 1
          maximum: 50
          default: 10
        - name: _sort
          in: query
          type: string
          description: Name of a (single) property to sort on. To sort in descending order, prefix with a '-' sign.
      responses:
        200:
          description: An array of objects.
          schema:
            type: array
            items:
              $ref: '#/definitions/helpdesk'
        404:
          description: Limeobject not found.
  /customer/{id}/business/:
    get:
      summary: "Retrieve related offerter."
      description: "Retrieves a paginated list of offert objects related to a specific . The result contains all available properties."
      tags:
        - customer
      parameters:
        - name: id
          in: path
          description: "The id of the parent ."
          required: true
          type: integer
        - name: _limit
          in: query
          type: integer
          description: The maximum number of items to return.
          minimum: 1
          maximum: 50
          default: 10
        - name: _sort
          in: query
          type: string
          description: Name of a (single) property to sort on. To sort in descending order, prefix with a '-' sign.
      responses:
        200:
          description: An array of objects.
          schema:
            type: array
            items:
              $ref: '#/definitions/Offert'
        404:
          description: Limeobject not found.
  /customer/{id}/participant/:
    get:
      summary: "Retrieve related participants."
      description: "Retrieves a paginated list of participant objects related to a specific . The result contains all available properties."
      tags:
        - customer
      parameters:
        - name: id
          in: path
          description: "The id of the parent ."
          required: true
          type: integer
        - name: _limit
          in: query
          type: integer
          description: The maximum number of items to return.
          minimum: 1
          maximum: 50
          default: 10
        - name: _sort
          in: query
          type: string
          description: Name of a (single) property to sort on. To sort in descending order, prefix with a '-' sign.
      responses:
        200:
          description: An array of objects.
          schema:
            type: array
            items:
              $ref: '#/definitions/Participant'
        404:
          description: Limeobject not found.
  /customer/{id}/todo/:
    get:
      summary: "Retrieve related ."
      description: "Retrieves a paginated list of todo objects related to a specific . The result contains all available properties."
      tags:
        - customer
      parameters:
        - name: id
          in: path
          description: "The id of the parent ."
          required: true
          type: integer
        - name: _limit
          in: query
          type: integer
          description: The maximum number of items to return.
          minimum: 1
          maximum: 50
          default: 10
        - name: _sort
          in: query
          type: string
          description: Name of a (single) property to sort on. To sort in descending order, prefix with a '-' sign.
      responses:
        200:
          description: An array of objects.
          schema:
            type: array
            items:
              $ref: '#/definitions/todo'
        404:
          description: Limeobject not found.
  /customer/{id}/consent/:
    get:
      summary: "Retrieve related legal base/consents."
      description: "Retrieves a paginated list of legal base/consent objects related to a specific . The result contains all available properties."
      tags:
        - customer
      parameters:
        - name: id
          in: path
          description: "The id of the parent ."
          required: true
          type: integer
        - name: _limit
          in: query
          type: integer
          description: The maximum number of items to return.
          minimum: 1
          maximum: 50
          default: 10
        - name: _sort
          in: query
          type: string
          description: Name of a (single) property to sort on. To sort in descending order, prefix with a '-' sign.
      responses:
        200:
          description: An array of objects.
          schema:
            type: array
            items:
              $ref: '#/definitions/Legal_base_consent'
        404:
          description: Limeobject not found.
  /customer/{id}/daughtercompanies/:
    get:
      summary: "Retrieve related ."
      description: "Retrieves a paginated list of  objects related to a specific . The result contains all available properties."
      tags:
        - customer
      parameters:
        - name: id
          in: path
          description: "The id of the parent ."
          required: true
          type: integer
        - name: _limit
          in: query
          type: integer
          description: The maximum number of items to return.
          minimum: 1
          maximum: 50
          default: 10
        - name: _sort
          in: query
          type: string
          description: Name of a (single) property to sort on. To sort in descending order, prefix with a '-' sign.
      responses:
        200:
          description: An array of objects.
          schema:
            type: array
            items:
              $ref: '#/definitions/customer'
        404:
          description: Limeobject not found.
  /customer/{id}/smsrecipient/:
    get:
      summary: "Retrieve related sms recipients."
      description: "Retrieves a paginated list of sms recipient objects related to a specific . The result contains all available properties."
      tags:
        - customer
      parameters:
        - name: id
          in: path
          description: "The id of the parent ."
          required: true
          type: integer
        - name: _limit
          in: query
          type: integer
          description: The maximum number of items to return.
          minimum: 1
          maximum: 50
          default: 10
        - name: _sort
          in: query
          type: string
          description: Name of a (single) property to sort on. To sort in descending order, prefix with a '-' sign.
      responses:
        200:
          description: An array of objects.
          schema:
            type: array
            items:
              $ref: '#/definitions/SMS_recipient'
        404:
          description: Limeobject not found.
  /customer/{id}/debitrequest/:
    get:
      summary: "Retrieve related ."
      description: "Retrieves a paginated list of debitrequest objects related to a specific . The result contains all available properties."
      tags:
        - customer
      parameters:
        - name: id
          in: path
          description: "The id of the parent ."
          required: true
          type: integer
        - name: _limit
          in: query
          type: integer
          description: The maximum number of items to return.
          minimum: 1
          maximum: 50
          default: 10
        - name: _sort
          in: query
          type: string
          description: Name of a (single) property to sort on. To sort in descending order, prefix with a '-' sign.
      responses:
        200:
          description: An array of objects.
          schema:
            type: array
            items:
              $ref: '#/definitions/debitrequest'
        404:
          description: Limeobject not found.
  /customer/{id}/serviceprotocol/:
    get:
      summary: "Retrieve related ."
      description: "Retrieves a paginated list of serviceprotocol objects related to a specific . The result contains all available properties."
      tags:
        - customer
      parameters:
        - name: id
          in: path
          description: "The id of the parent ."
          required: true
          type: integer
        - name: _limit
          in: query
          type: integer
          description: The maximum number of items to return.
          minimum: 1
          maximum: 50
          default: 10
        - name: _sort
          in: query
          type: string
          description: Name of a (single) property to sort on. To sort in descending order, prefix with a '-' sign.
      responses:
        200:
          description: An array of objects.
          schema:
            type: array
            items:
              $ref: '#/definitions/serviceprotocol'
        404:
          description: Limeobject not found.
  /person/:
    get:
      summary: "Retrieve "
      description: "Retrieves a paginated list of  objects. The result contains all available properties."
      tags:
        - person
      parameters:
        - name: _limit
          in: query
          type: integer
          description: The maximum number of items to return.
          minimum: 1
          maximum: 50
          default: 10
        - name: _sort
          in: query
          type: string
          description: Name of a (single) property to sort on. To sort in descending order, prefix with a '-' sign.
        - name: _embed
          in: query
          required: false
          type: array
          collectionFormat: multi
          items:
            enum:
              - "customer"
          description: Include data for related objects of the specified type.
      responses:
        200:
          description: An array of objects.
          schema:
            type: array
            items:
              $ref: '#/definitions/person'
    post:
      summary: "Create a new ."
      description: "Create a single  object."
      tags:
        - person
      parameters:
        - name: ""
          in: body
          description: "The  data to insert."
          required: true
          schema:
            $ref: '#/definitions/person'
      responses:
        201:
          description: A JSON representation of the created object.
          schema:
            $ref: '#/definitions/person'
        400:
          description: Bad request.
          schema:
            $ref: '#/definitions/Error'
  /person/{id}/:
    get:
      summary: "Retrieve a ."
      description: "Retrieves a single  object having the specified id."
      tags:
        - person
      parameters:
        - name: id
          in: path
          description: "The id of the  to retrieve."
          required: true
          type: integer
        - name: _embed
          in: query
          required: false
          type: array
          collectionFormat: multi
          items:
            enum:
              - "customer"
          description: Include data for related objects of the specified type.
      responses:
        200:
          description: A JSON representation of the requested object.
          schema:
            $ref: '#/definitions/person'
        404:
          description: Limeobject not found.
    delete:
      summary: "Delete a ."
      description: "Deletes a single  object having the specified id."
      tags:
        - person
      parameters:
        - name: id
          in: path
          description: The id of the object to delete.
          required: true
          type: integer
      responses:
        204:
          description: Success. No content returned.
        404:
          description: Limeobject not found.
    put:
      summary: "Update an existing ."
      description: "Updates a single  object having the specified id. Note that partial objects (i.e. without all properties set) can be specified."
      tags:
        - person
      parameters:
        - name: id
          in: path
          description: "The id of the  to update."
          required: true
          type: integer
        - name: ""
          in: body
          description: "The  data to update."
          required: true
          schema:
            $ref: '#/definitions/person'
      responses:
        200:
          description: A JSON representation of the updated (full) object.
          schema:
            $ref: '#/definitions/person'
        404:
          description: Limeobject not found.
  /person/{id}/customer/:
    get:
      summary: "Retrieve a related ."
      description: "Retrieves the related  object, if any."
      tags:
        - person
      parameters:
        - name: id
          in: path
          description: "The id of the parent ."
          required: true
          type: integer
      responses:
        200:
          description: A JSON representation of the requested object.
          schema:
            $ref: '#/definitions/customer'
        404:
          description: "No  object has been set for this relation."
  /person/{id}/participant/:
    get:
      summary: "Retrieve related participants."
      description: "Retrieves a paginated list of participant objects related to a specific . The result contains all available properties."
      tags:
        - person
      parameters:
        - name: id
          in: path
          description: "The id of the parent ."
          required: true
          type: integer
        - name: _limit
          in: query
          type: integer
          description: The maximum number of items to return.
          minimum: 1
          maximum: 50
          default: 10
        - name: _sort
          in: query
          type: string
          description: Name of a (single) property to sort on. To sort in descending order, prefix with a '-' sign.
      responses:
        200:
          description: An array of objects.
          schema:
            type: array
            items:
              $ref: '#/definitions/Participant'
        404:
          description: Limeobject not found.
  /person/{id}/history/:
    get:
      summary: "Retrieve related ."
      description: "Retrieves a paginated list of  objects related to a specific . The result contains all available properties."
      tags:
        - person
      parameters:
        - name: id
          in: path
          description: "The id of the parent ."
          required: true
          type: integer
        - name: _limit
          in: query
          type: integer
          description: The maximum number of items to return.
          minimum: 1
          maximum: 50
          default: 10
        - name: _sort
          in: query
          type: string
          description: Name of a (single) property to sort on. To sort in descending order, prefix with a '-' sign.
      responses:
        200:
          description: An array of objects.
          schema:
            type: array
            items:
              $ref: '#/definitions/history'
        404:
          description: Limeobject not found.
  /person/{id}/document/:
    get:
      summary: "Retrieve related ."
      description: "Retrieves a paginated list of  objects related to a specific . The result contains all available properties."
      tags:
        - person
      parameters:
        - name: id
          in: path
          description: "The id of the parent ."
          required: true
          type: integer
        - name: _limit
          in: query
          type: integer
          description: The maximum number of items to return.
          minimum: 1
          maximum: 50
          default: 10
        - name: _sort
          in: query
          type: string
          description: Name of a (single) property to sort on. To sort in descending order, prefix with a '-' sign.
      responses:
        200:
          description: An array of objects.
          schema:
            type: array
            items:
              $ref: '#/definitions/document'
        404:
          description: Limeobject not found.
  /person/{id}/business/:
    get:
      summary: "Retrieve related offerter."
      description: "Retrieves a paginated list of offert objects related to a specific . The result contains all available properties."
      tags:
        - person
      parameters:
        - name: id
          in: path
          description: "The id of the parent ."
          required: true
          type: integer
        - name: _limit
          in: query
          type: integer
          description: The maximum number of items to return.
          minimum: 1
          maximum: 50
          default: 10
        - name: _sort
          in: query
          type: string
          description: Name of a (single) property to sort on. To sort in descending order, prefix with a '-' sign.
      responses:
        200:
          description: An array of objects.
          schema:
            type: array
            items:
              $ref: '#/definitions/Offert'
        404:
          description: Limeobject not found.
  /person/{id}/consent/:
    get:
      summary: "Retrieve related legal base/consents."
      description: "Retrieves a paginated list of legal base/consent objects related to a specific . The result contains all available properties."
      tags:
        - person
      parameters:
        - name: id
          in: path
          description: "The id of the parent ."
          required: true
          type: integer
        - name: _limit
          in: query
          type: integer
          description: The maximum number of items to return.
          minimum: 1
          maximum: 50
          default: 10
        - name: _sort
          in: query
          type: string
          description: Name of a (single) property to sort on. To sort in descending order, prefix with a '-' sign.
      responses:
        200:
          description: An array of objects.
          schema:
            type: array
            items:
              $ref: '#/definitions/Legal_base_consent'
        404:
          description: Limeobject not found.
  /person/{id}/todo/:
    get:
      summary: "Retrieve related ."
      description: "Retrieves a paginated list of todo objects related to a specific . The result contains all available properties."
      tags:
        - person
      parameters:
        - name: id
          in: path
          description: "The id of the parent ."
          required: true
          type: integer
        - name: _limit
          in: query
          type: integer
          description: The maximum number of items to return.
          minimum: 1
          maximum: 50
          default: 10
        - name: _sort
          in: query
          type: string
          description: Name of a (single) property to sort on. To sort in descending order, prefix with a '-' sign.
      responses:
        200:
          description: An array of objects.
          schema:
            type: array
            items:
              $ref: '#/definitions/todo'
        404:
          description: Limeobject not found.
  /person/{id}/helpdesk/:
    get:
      summary: "Retrieve related ."
      description: "Retrieves a paginated list of  objects related to a specific . The result contains all available properties."
      tags:
        - person
      parameters:
        - name: id
          in: path
          description: "The id of the parent ."
          required: true
          type: integer
        - name: _limit
          in: query
          type: integer
          description: The maximum number of items to return.
          minimum: 1
          maximum: 50
          default: 10
        - name: _sort
          in: query
          type: string
          description: Name of a (single) property to sort on. To sort in descending order, prefix with a '-' sign.
      responses:
        200:
          description: An array of objects.
          schema:
            type: array
            items:
              $ref: '#/definitions/helpdesk'
        404:
          description: Limeobject not found.
  /installation/:
    get:
      summary: "Retrieve "
      description: "Retrieves a paginated list of  objects. The result contains all available properties."
      tags:
        - installation
      parameters:
        - name: _limit
          in: query
          type: integer
          description: The maximum number of items to return.
          minimum: 1
          maximum: 50
          default: 10
        - name: _sort
          in: query
          type: string
          description: Name of a (single) property to sort on. To sort in descending order, prefix with a '-' sign.
        - name: _embed
          in: query
          required: false
          type: array
          collectionFormat: multi
          items:
            enum:
              - "customer"
              - "maininstallation"
          description: Include data for related objects of the specified type.
      responses:
        200:
          description: An array of objects.
          schema:
            type: array
            items:
              $ref: '#/definitions/installation'
    post:
      summary: "Create a new ."
      description: "Create a single  object."
      tags:
        - installation
      parameters:
        - name: ""
          in: body
          description: "The  data to insert."
          required: true
          schema:
            $ref: '#/definitions/installation'
      responses:
        201:
          description: A JSON representation of the created object.
          schema:
            $ref: '#/definitions/installation'
        400:
          description: Bad request.
          schema:
            $ref: '#/definitions/Error'
  /installation/{id}/:
    get:
      summary: "Retrieve a ."
      description: "Retrieves a single  object having the specified id."
      tags:
        - installation
      parameters:
        - name: id
          in: path
          description: "The id of the  to retrieve."
          required: true
          type: integer
        - name: _embed
          in: query
          required: false
          type: array
          collectionFormat: multi
          items:
            enum:
              - "customer"
              - "maininstallation"
          description: Include data for related objects of the specified type.
      responses:
        200:
          description: A JSON representation of the requested object.
          schema:
            $ref: '#/definitions/installation'
        404:
          description: Limeobject not found.
    delete:
      summary: "Delete a ."
      description: "Deletes a single  object having the specified id."
      tags:
        - installation
      parameters:
        - name: id
          in: path
          description: The id of the object to delete.
          required: true
          type: integer
      responses:
        204:
          description: Success. No content returned.
        404:
          description: Limeobject not found.
    put:
      summary: "Update an existing ."
      description: "Updates a single  object having the specified id. Note that partial objects (i.e. without all properties set) can be specified."
      tags:
        - installation
      parameters:
        - name: id
          in: path
          description: "The id of the  to update."
          required: true
          type: integer
        - name: ""
          in: body
          description: "The  data to update."
          required: true
          schema:
            $ref: '#/definitions/installation'
      responses:
        200:
          description: A JSON representation of the updated (full) object.
          schema:
            $ref: '#/definitions/installation'
        404:
          description: Limeobject not found.
  /installation/{id}/customer/:
    get:
      summary: "Retrieve a related ."
      description: "Retrieves the related  object, if any."
      tags:
        - installation
      parameters:
        - name: id
          in: path
          description: "The id of the parent ."
          required: true
          type: integer
      responses:
        200:
          description: A JSON representation of the requested object.
          schema:
            $ref: '#/definitions/customer'
        404:
          description: "No  object has been set for this relation."
  /installation/{id}/maininstallation/:
    get:
      summary: "Retrieve a related maininstallation."
      description: "Retrieves the related maininstallation object, if any."
      tags:
        - installation
      parameters:
        - name: id
          in: path
          description: "The id of the parent ."
          required: true
          type: integer
      responses:
        200:
          description: A JSON representation of the requested object.
          schema:
            $ref: '#/definitions/maininstallation'
        404:
          description: "No maininstallation object has been set for this relation."
  /installation/{id}/history/:
    get:
      summary: "Retrieve related ."
      description: "Retrieves a paginated list of  objects related to a specific . The result contains all available properties."
      tags:
        - installation
      parameters:
        - name: id
          in: path
          description: "The id of the parent ."
          required: true
          type: integer
        - name: _limit
          in: query
          type: integer
          description: The maximum number of items to return.
          minimum: 1
          maximum: 50
          default: 10
        - name: _sort
          in: query
          type: string
          description: Name of a (single) property to sort on. To sort in descending order, prefix with a '-' sign.
      responses:
        200:
          description: An array of objects.
          schema:
            type: array
            items:
              $ref: '#/definitions/history'
        404:
          description: Limeobject not found.
  /installation/{id}/document/:
    get:
      summary: "Retrieve related ."
      description: "Retrieves a paginated list of  objects related to a specific . The result contains all available properties."
      tags:
        - installation
      parameters:
        - name: id
          in: path
          description: "The id of the parent ."
          required: true
          type: integer
        - name: _limit
          in: query
          type: integer
          description: The maximum number of items to return.
          minimum: 1
          maximum: 50
          default: 10
        - name: _sort
          in: query
          type: string
          description: Name of a (single) property to sort on. To sort in descending order, prefix with a '-' sign.
      responses:
        200:
          description: An array of objects.
          schema:
            type: array
            items:
              $ref: '#/definitions/document'
        404:
          description: Limeobject not found.
  /installation/{id}/agreement/:
    get:
      summary: "Retrieve related ."
      description: "Retrieves a paginated list of  objects related to a specific . The result contains all available properties."
      tags:
        - installation
      parameters:
        - name: id
          in: path
          description: "The id of the parent ."
          required: true
          type: integer
        - name: _limit
          in: query
          type: integer
          description: The maximum number of items to return.
          minimum: 1
          maximum: 50
          default: 10
        - name: _sort
          in: query
          type: string
          description: Name of a (single) property to sort on. To sort in descending order, prefix with a '-' sign.
      responses:
        200:
          description: An array of objects.
          schema:
            type: array
            items:
              $ref: '#/definitions/agreement'
        404:
          description: Limeobject not found.
  /installation/{id}/helpdesk/:
    get:
      summary: "Retrieve related ."
      description: "Retrieves a paginated list of  objects related to a specific . The result contains all available properties."
      tags:
        - installation
      parameters:
        - name: id
          in: path
          description: "The id of the parent ."
          required: true
          type: integer
        - name: _limit
          in: query
          type: integer
          description: The maximum number of items to return.
          minimum: 1
          maximum: 50
          default: 10
        - name: _sort
          in: query
          type: string
          description: Name of a (single) property to sort on. To sort in descending order, prefix with a '-' sign.
      responses:
        200:
          description: An array of objects.
          schema:
            type: array
            items:
              $ref: '#/definitions/helpdesk'
        404:
          description: Limeobject not found.
  /installation/{id}/participant/:
    get:
      summary: "Retrieve related participants."
      description: "Retrieves a paginated list of participant objects related to a specific . The result contains all available properties."
      tags:
        - installation
      parameters:
        - name: id
          in: path
          description: "The id of the parent ."
          required: true
          type: integer
        - name: _limit
          in: query
          type: integer
          description: The maximum number of items to return.
          minimum: 1
          maximum: 50
          default: 10
        - name: _sort
          in: query
          type: string
          description: Name of a (single) property to sort on. To sort in descending order, prefix with a '-' sign.
      responses:
        200:
          description: An array of objects.
          schema:
            type: array
            items:
              $ref: '#/definitions/Participant'
        404:
          description: Limeobject not found.
  /installation/{id}/business/:
    get:
      summary: "Retrieve related offerter."
      description: "Retrieves a paginated list of offert objects related to a specific . The result contains all available properties."
      tags:
        - installation
      parameters:
        - name: id
          in: path
          description: "The id of the parent ."
          required: true
          type: integer
        - name: _limit
          in: query
          type: integer
          description: The maximum number of items to return.
          minimum: 1
          maximum: 50
          default: 10
        - name: _sort
          in: query
          type: string
          description: Name of a (single) property to sort on. To sort in descending order, prefix with a '-' sign.
      responses:
        200:
          description: An array of objects.
          schema:
            type: array
            items:
              $ref: '#/definitions/Offert'
        404:
          description: Limeobject not found.
  /installation/{id}/todo/:
    get:
      summary: "Retrieve related ."
      description: "Retrieves a paginated list of todo objects related to a specific . The result contains all available properties."
      tags:
        - installation
      parameters:
        - name: id
          in: path
          description: "The id of the parent ."
          required: true
          type: integer
        - name: _limit
          in: query
          type: integer
          description: The maximum number of items to return.
          minimum: 1
          maximum: 50
          default: 10
        - name: _sort
          in: query
          type: string
          description: Name of a (single) property to sort on. To sort in descending order, prefix with a '-' sign.
      responses:
        200:
          description: An array of objects.
          schema:
            type: array
            items:
              $ref: '#/definitions/todo'
        404:
          description: Limeobject not found.
  /installation/{id}/smsrecipient/:
    get:
      summary: "Retrieve related sms recipients."
      description: "Retrieves a paginated list of sms recipient objects related to a specific . The result contains all available properties."
      tags:
        - installation
      parameters:
        - name: id
          in: path
          description: "The id of the parent ."
          required: true
          type: integer
        - name: _limit
          in: query
          type: integer
          description: The maximum number of items to return.
          minimum: 1
          maximum: 50
          default: 10
        - name: _sort
          in: query
          type: string
          description: Name of a (single) property to sort on. To sort in descending order, prefix with a '-' sign.
      responses:
        200:
          description: An array of objects.
          schema:
            type: array
            items:
              $ref: '#/definitions/SMS_recipient'
        404:
          description: Limeobject not found.
  /installation/{id}/debitrequest/:
    get:
      summary: "Retrieve related ."
      description: "Retrieves a paginated list of debitrequest objects related to a specific . The result contains all available properties."
      tags:
        - installation
      parameters:
        - name: id
          in: path
          description: "The id of the parent ."
          required: true
          type: integer
        - name: _limit
          in: query
          type: integer
          description: The maximum number of items to return.
          minimum: 1
          maximum: 50
          default: 10
        - name: _sort
          in: query
          type: string
          description: Name of a (single) property to sort on. To sort in descending order, prefix with a '-' sign.
      responses:
        200:
          description: An array of objects.
          schema:
            type: array
            items:
              $ref: '#/definitions/debitrequest'
        404:
          description: Limeobject not found.
  /installation/{id}/serviceprotocol/:
    get:
      summary: "Retrieve related ."
      description: "Retrieves a paginated list of serviceprotocol objects related to a specific . The result contains all available properties."
      tags:
        - installation
      parameters:
        - name: id
          in: path
          description: "The id of the parent ."
          required: true
          type: integer
        - name: _limit
          in: query
          type: integer
          description: The maximum number of items to return.
          minimum: 1
          maximum: 50
          default: 10
        - name: _sort
          in: query
          type: string
          description: Name of a (single) property to sort on. To sort in descending order, prefix with a '-' sign.
      responses:
        200:
          description: An array of objects.
          schema:
            type: array
            items:
              $ref: '#/definitions/serviceprotocol'
        404:
          description: Limeobject not found.
  /agreement/:
    get:
      summary: "Retrieve "
      description: "Retrieves a paginated list of  objects. The result contains all available properties."
      tags:
        - agreement
      parameters:
        - name: _limit
          in: query
          type: integer
          description: The maximum number of items to return.
          minimum: 1
          maximum: 50
          default: 10
        - name: _sort
          in: query
          type: string
          description: Name of a (single) property to sort on. To sort in descending order, prefix with a '-' sign.
        - name: _embed
          in: query
          required: false
          type: array
          collectionFormat: multi
          items:
            enum:
              - "customer"
              - "installation"
          description: Include data for related objects of the specified type.
      responses:
        200:
          description: An array of objects.
          schema:
            type: array
            items:
              $ref: '#/definitions/agreement'
    post:
      summary: "Create a new ."
      description: "Create a single  object."
      tags:
        - agreement
      parameters:
        - name: ""
          in: body
          description: "The  data to insert."
          required: true
          schema:
            $ref: '#/definitions/agreement'
      responses:
        201:
          description: A JSON representation of the created object.
          schema:
            $ref: '#/definitions/agreement'
        400:
          description: Bad request.
          schema:
            $ref: '#/definitions/Error'
  /agreement/{id}/:
    get:
      summary: "Retrieve a ."
      description: "Retrieves a single  object having the specified id."
      tags:
        - agreement
      parameters:
        - name: id
          in: path
          description: "The id of the  to retrieve."
          required: true
          type: integer
        - name: _embed
          in: query
          required: false
          type: array
          collectionFormat: multi
          items:
            enum:
              - "customer"
              - "installation"
          description: Include data for related objects of the specified type.
      responses:
        200:
          description: A JSON representation of the requested object.
          schema:
            $ref: '#/definitions/agreement'
        404:
          description: Limeobject not found.
    delete:
      summary: "Delete a ."
      description: "Deletes a single  object having the specified id."
      tags:
        - agreement
      parameters:
        - name: id
          in: path
          description: The id of the object to delete.
          required: true
          type: integer
      responses:
        204:
          description: Success. No content returned.
        404:
          description: Limeobject not found.
    put:
      summary: "Update an existing ."
      description: "Updates a single  object having the specified id. Note that partial objects (i.e. without all properties set) can be specified."
      tags:
        - agreement
      parameters:
        - name: id
          in: path
          description: "The id of the  to update."
          required: true
          type: integer
        - name: ""
          in: body
          description: "The  data to update."
          required: true
          schema:
            $ref: '#/definitions/agreement'
      responses:
        200:
          description: A JSON representation of the updated (full) object.
          schema:
            $ref: '#/definitions/agreement'
        404:
          description: Limeobject not found.
  /agreement/{id}/customer/:
    get:
      summary: "Retrieve a related ."
      description: "Retrieves the related  object, if any."
      tags:
        - agreement
      parameters:
        - name: id
          in: path
          description: "The id of the parent ."
          required: true
          type: integer
      responses:
        200:
          description: A JSON representation of the requested object.
          schema:
            $ref: '#/definitions/customer'
        404:
          description: "No  object has been set for this relation."
  /agreement/{id}/installation/:
    get:
      summary: "Retrieve a related ."
      description: "Retrieves the related  object, if any."
      tags:
        - agreement
      parameters:
        - name: id
          in: path
          description: "The id of the parent ."
          required: true
          type: integer
      responses:
        200:
          description: A JSON representation of the requested object.
          schema:
            $ref: '#/definitions/installation'
        404:
          description: "No  object has been set for this relation."
  /agreement/{id}/document/:
    get:
      summary: "Retrieve related ."
      description: "Retrieves a paginated list of  objects related to a specific . The result contains all available properties."
      tags:
        - agreement
      parameters:
        - name: id
          in: path
          description: "The id of the parent ."
          required: true
          type: integer
        - name: _limit
          in: query
          type: integer
          description: The maximum number of items to return.
          minimum: 1
          maximum: 50
          default: 10
        - name: _sort
          in: query
          type: string
          description: Name of a (single) property to sort on. To sort in descending order, prefix with a '-' sign.
      responses:
        200:
          description: An array of objects.
          schema:
            type: array
            items:
              $ref: '#/definitions/document'
        404:
          description: Limeobject not found.
  /agreement/{id}/participant/:
    get:
      summary: "Retrieve related participants."
      description: "Retrieves a paginated list of participant objects related to a specific . The result contains all available properties."
      tags:
        - agreement
      parameters:
        - name: id
          in: path
          description: "The id of the parent ."
          required: true
          type: integer
        - name: _limit
          in: query
          type: integer
          description: The maximum number of items to return.
          minimum: 1
          maximum: 50
          default: 10
        - name: _sort
          in: query
          type: string
          description: Name of a (single) property to sort on. To sort in descending order, prefix with a '-' sign.
      responses:
        200:
          description: An array of objects.
          schema:
            type: array
            items:
              $ref: '#/definitions/Participant'
        404:
          description: Limeobject not found.
  /agreement/{id}/helpdesk/:
    get:
      summary: "Retrieve related ."
      description: "Retrieves a paginated list of  objects related to a specific . The result contains all available properties."
      tags:
        - agreement
      parameters:
        - name: id
          in: path
          description: "The id of the parent ."
          required: true
          type: integer
        - name: _limit
          in: query
          type: integer
          description: The maximum number of items to return.
          minimum: 1
          maximum: 50
          default: 10
        - name: _sort
          in: query
          type: string
          description: Name of a (single) property to sort on. To sort in descending order, prefix with a '-' sign.
      responses:
        200:
          description: An array of objects.
          schema:
            type: array
            items:
              $ref: '#/definitions/helpdesk'
        404:
          description: Limeobject not found.
  /business/:
    get:
      summary: "Retrieve offerter"
      description: "Retrieves a paginated list of offert objects. The result contains all available properties."
      tags:
        - Offerter
      parameters:
        - name: _limit
          in: query
          type: integer
          description: The maximum number of items to return.
          minimum: 1
          maximum: 50
          default: 10
        - name: _sort
          in: query
          type: string
          description: Name of a (single) property to sort on. To sort in descending order, prefix with a '-' sign.
        - name: _embed
          in: query
          required: false
          type: array
          collectionFormat: multi
          items:
            enum:
              - "customer"
              - "person"
              - "coworker"
              - "installation"
              - "helpdesk"
              - "businessarea"
              - "businessareanew"
          description: Include data for related objects of the specified type.
      responses:
        200:
          description: An array of objects.
          schema:
            type: array
            items:
              $ref: '#/definitions/Offert'
    post:
      summary: "Create a new offert."
      description: "Create a single offert object."
      tags:
        - Offerter
      parameters:
        - name: "Offert"
          in: body
          description: "The offert data to insert."
          required: true
          schema:
            $ref: '#/definitions/Offert'
      responses:
        201:
          description: A JSON representation of the created object.
          schema:
            $ref: '#/definitions/Offert'
        400:
          description: Bad request.
          schema:
            $ref: '#/definitions/Error'
  /business/{id}/:
    get:
      summary: "Retrieve a offert."
      description: "Retrieves a single offert object having the specified id."
      tags:
        - Offerter
      parameters:
        - name: id
          in: path
          description: "The id of the offert to retrieve."
          required: true
          type: integer
        - name: _embed
          in: query
          required: false
          type: array
          collectionFormat: multi
          items:
            enum:
              - "customer"
              - "person"
              - "coworker"
              - "installation"
              - "helpdesk"
              - "businessarea"
              - "businessareanew"
          description: Include data for related objects of the specified type.
      responses:
        200:
          description: A JSON representation of the requested object.
          schema:
            $ref: '#/definitions/Offert'
        404:
          description: Limeobject not found.
    delete:
      summary: "Delete a offert."
      description: "Deletes a single offert object having the specified id."
      tags:
        - Offerter
      parameters:
        - name: id
          in: path
          description: The id of the object to delete.
          required: true
          type: integer
      responses:
        204:
          description: Success. No content returned.
        404:
          description: Limeobject not found.
    put:
      summary: "Update an existing offert."
      description: "Updates a single offert object having the specified id. Note that partial objects (i.e. without all properties set) can be specified."
      tags:
        - Offerter
      parameters:
        - name: id
          in: path
          description: "The id of the offert to update."
          required: true
          type: integer
        - name: "Offert"
          in: body
          description: "The Offert data to update."
          required: true
          schema:
            $ref: '#/definitions/Offert'
      responses:
        200:
          description: A JSON representation of the updated (full) object.
          schema:
            $ref: '#/definitions/Offert'
        404:
          description: Limeobject not found.
  /business/{id}/customer/:
    get:
      summary: "Retrieve a related ."
      description: "Retrieves the related  object, if any."
      tags:
        - Offerter
      parameters:
        - name: id
          in: path
          description: "The id of the parent offert."
          required: true
          type: integer
      responses:
        200:
          description: A JSON representation of the requested object.
          schema:
            $ref: '#/definitions/customer'
        404:
          description: "No  object has been set for this relation."
  /business/{id}/person/:
    get:
      summary: "Retrieve a related ."
      description: "Retrieves the related  object, if any."
      tags:
        - Offerter
      parameters:
        - name: id
          in: path
          description: "The id of the parent offert."
          required: true
          type: integer
      responses:
        200:
          description: A JSON representation of the requested object.
          schema:
            $ref: '#/definitions/person'
        404:
          description: "No  object has been set for this relation."
  /business/{id}/coworker/:
    get:
      summary: "Retrieve a related ."
      description: "Retrieves the related  object, if any."
      tags:
        - Offerter
      parameters:
        - name: id
          in: path
          description: "The id of the parent offert."
          required: true
          type: integer
      responses:
        200:
          description: A JSON representation of the requested object.
          schema:
            $ref: '#/definitions/coworker'
        404:
          description: "No  object has been set for this relation."
  /business/{id}/installation/:
    get:
      summary: "Retrieve a related ."
      description: "Retrieves the related  object, if any."
      tags:
        - Offerter
      parameters:
        - name: id
          in: path
          description: "The id of the parent offert."
          required: true
          type: integer
      responses:
        200:
          description: A JSON representation of the requested object.
          schema:
            $ref: '#/definitions/installation'
        404:
          description: "No  object has been set for this relation."
  /business/{id}/helpdesk/:
    get:
      summary: "Retrieve a related ."
      description: "Retrieves the related  object, if any."
      tags:
        - Offerter
      parameters:
        - name: id
          in: path
          description: "The id of the parent offert."
          required: true
          type: integer
      responses:
        200:
          description: A JSON representation of the requested object.
          schema:
            $ref: '#/definitions/helpdesk'
        404:
          description: "No  object has been set for this relation."
  /business/{id}/businessarea/:
    get:
      summary: "Retrieve a related subcategory."
      description: "Retrieves the related subcategory object, if any."
      tags:
        - Offerter
      parameters:
        - name: id
          in: path
          description: "The id of the parent offert."
          required: true
          type: integer
      responses:
        200:
          description: A JSON representation of the requested object.
          schema:
            $ref: '#/definitions/Subcategory'
        404:
          description: "No subcategory object has been set for this relation."
  /business/{id}/businessareanew/:
    get:
      summary: "Retrieve a related buisiness area."
      description: "Retrieves the related buisiness area object, if any."
      tags:
        - Offerter
      parameters:
        - name: id
          in: path
          description: "The id of the parent offert."
          required: true
          type: integer
      responses:
        200:
          description: A JSON representation of the requested object.
          schema:
            $ref: '#/definitions/Buisiness_area'
        404:
          description: "No buisiness area object has been set for this relation."
  /business/{id}/history/:
    get:
      summary: "Retrieve related ."
      description: "Retrieves a paginated list of  objects related to a specific offert. The result contains all available properties."
      tags:
        - Offerter
      parameters:
        - name: id
          in: path
          description: "The id of the parent offert."
          required: true
          type: integer
        - name: _limit
          in: query
          type: integer
          description: The maximum number of items to return.
          minimum: 1
          maximum: 50
          default: 10
        - name: _sort
          in: query
          type: string
          description: Name of a (single) property to sort on. To sort in descending order, prefix with a '-' sign.
      responses:
        200:
          description: An array of objects.
          schema:
            type: array
            items:
              $ref: '#/definitions/history'
        404:
          description: Limeobject not found.
  /business/{id}/todo/:
    get:
      summary: "Retrieve related ."
      description: "Retrieves a paginated list of todo objects related to a specific offert. The result contains all available properties."
      tags:
        - Offerter
      parameters:
        - name: id
          in: path
          description: "The id of the parent offert."
          required: true
          type: integer
        - name: _limit
          in: query
          type: integer
          description: The maximum number of items to return.
          minimum: 1
          maximum: 50
          default: 10
        - name: _sort
          in: query
          type: string
          description: Name of a (single) property to sort on. To sort in descending order, prefix with a '-' sign.
      responses:
        200:
          description: An array of objects.
          schema:
            type: array
            items:
              $ref: '#/definitions/todo'
        404:
          description: Limeobject not found.
  /business/{id}/document/:
    get:
      summary: "Retrieve related ."
      description: "Retrieves a paginated list of  objects related to a specific offert. The result contains all available properties."
      tags:
        - Offerter
      parameters:
        - name: id
          in: path
          description: "The id of the parent offert."
          required: true
          type: integer
        - name: _limit
          in: query
          type: integer
          description: The maximum number of items to return.
          minimum: 1
          maximum: 50
          default: 10
        - name: _sort
          in: query
          type: string
          description: Name of a (single) property to sort on. To sort in descending order, prefix with a '-' sign.
      responses:
        200:
          description: An array of objects.
          schema:
            type: array
            items:
              $ref: '#/definitions/document'
        404:
          description: Limeobject not found.
  /business/{id}/helpdesk2/:
    get:
      summary: "Retrieve related ."
      description: "Retrieves a paginated list of  objects related to a specific offert. The result contains all available properties."
      tags:
        - Offerter
      parameters:
        - name: id
          in: path
          description: "The id of the parent offert."
          required: true
          type: integer
        - name: _limit
          in: query
          type: integer
          description: The maximum number of items to return.
          minimum: 1
          maximum: 50
          default: 10
        - name: _sort
          in: query
          type: string
          description: Name of a (single) property to sort on. To sort in descending order, prefix with a '-' sign.
      responses:
        200:
          description: An array of objects.
          schema:
            type: array
            items:
              $ref: '#/definitions/helpdesk'
        404:
          description: Limeobject not found.
  /campaign/:
    get:
      summary: "Retrieve "
      description: "Retrieves a paginated list of kampanj objects. The result contains all available properties."
      tags:
        - campaign
      parameters:
        - name: _limit
          in: query
          type: integer
          description: The maximum number of items to return.
          minimum: 1
          maximum: 50
          default: 10
        - name: _sort
          in: query
          type: string
          description: Name of a (single) property to sort on. To sort in descending order, prefix with a '-' sign.
        - name: _embed
          in: query
          required: false
          type: array
          collectionFormat: multi
          items:
            enum:
              - "businessareanew"
              - "businessarea"
              - "coworker"
          description: Include data for related objects of the specified type.
      responses:
        200:
          description: An array of objects.
          schema:
            type: array
            items:
              $ref: '#/definitions/Kampanj'
    post:
      summary: "Create a new kampanj."
      description: "Create a single kampanj object."
      tags:
        - campaign
      parameters:
        - name: "Kampanj"
          in: body
          description: "The kampanj data to insert."
          required: true
          schema:
            $ref: '#/definitions/Kampanj'
      responses:
        201:
          description: A JSON representation of the created object.
          schema:
            $ref: '#/definitions/Kampanj'
        400:
          description: Bad request.
          schema:
            $ref: '#/definitions/Error'
  /campaign/{id}/:
    get:
      summary: "Retrieve a kampanj."
      description: "Retrieves a single kampanj object having the specified id."
      tags:
        - campaign
      parameters:
        - name: id
          in: path
          description: "The id of the kampanj to retrieve."
          required: true
          type: integer
        - name: _embed
          in: query
          required: false
          type: array
          collectionFormat: multi
          items:
            enum:
              - "businessareanew"
              - "businessarea"
              - "coworker"
          description: Include data for related objects of the specified type.
      responses:
        200:
          description: A JSON representation of the requested object.
          schema:
            $ref: '#/definitions/Kampanj'
        404:
          description: Limeobject not found.
    delete:
      summary: "Delete a kampanj."
      description: "Deletes a single kampanj object having the specified id."
      tags:
        - campaign
      parameters:
        - name: id
          in: path
          description: The id of the object to delete.
          required: true
          type: integer
      responses:
        204:
          description: Success. No content returned.
        404:
          description: Limeobject not found.
    put:
      summary: "Update an existing kampanj."
      description: "Updates a single kampanj object having the specified id. Note that partial objects (i.e. without all properties set) can be specified."
      tags:
        - campaign
      parameters:
        - name: id
          in: path
          description: "The id of the kampanj to update."
          required: true
          type: integer
        - name: "Kampanj"
          in: body
          description: "The Kampanj data to update."
          required: true
          schema:
            $ref: '#/definitions/Kampanj'
      responses:
        200:
          description: A JSON representation of the updated (full) object.
          schema:
            $ref: '#/definitions/Kampanj'
        404:
          description: Limeobject not found.
  /campaign/{id}/businessareanew/:
    get:
      summary: "Retrieve a related buisiness area."
      description: "Retrieves the related buisiness area object, if any."
      tags:
        - campaign
      parameters:
        - name: id
          in: path
          description: "The id of the parent kampanj."
          required: true
          type: integer
      responses:
        200:
          description: A JSON representation of the requested object.
          schema:
            $ref: '#/definitions/Buisiness_area'
        404:
          description: "No buisiness area object has been set for this relation."
  /campaign/{id}/businessarea/:
    get:
      summary: "Retrieve a related subcategory."
      description: "Retrieves the related subcategory object, if any."
      tags:
        - campaign
      parameters:
        - name: id
          in: path
          description: "The id of the parent kampanj."
          required: true
          type: integer
      responses:
        200:
          description: A JSON representation of the requested object.
          schema:
            $ref: '#/definitions/Subcategory'
        404:
          description: "No subcategory object has been set for this relation."
  /campaign/{id}/coworker/:
    get:
      summary: "Retrieve a related ."
      description: "Retrieves the related  object, if any."
      tags:
        - campaign
      parameters:
        - name: id
          in: path
          description: "The id of the parent kampanj."
          required: true
          type: integer
      responses:
        200:
          description: A JSON representation of the requested object.
          schema:
            $ref: '#/definitions/coworker'
        404:
          description: "No  object has been set for this relation."
  /campaign/{id}/participant/:
    get:
      summary: "Retrieve related participants."
      description: "Retrieves a paginated list of participant objects related to a specific kampanj. The result contains all available properties."
      tags:
        - campaign
      parameters:
        - name: id
          in: path
          description: "The id of the parent kampanj."
          required: true
          type: integer
        - name: _limit
          in: query
          type: integer
          description: The maximum number of items to return.
          minimum: 1
          maximum: 50
          default: 10
        - name: _sort
          in: query
          type: string
          description: Name of a (single) property to sort on. To sort in descending order, prefix with a '-' sign.
      responses:
        200:
          description: An array of objects.
          schema:
            type: array
            items:
              $ref: '#/definitions/Participant'
        404:
          description: Limeobject not found.
  /campaign/{id}/history/:
    get:
      summary: "Retrieve related ."
      description: "Retrieves a paginated list of  objects related to a specific kampanj. The result contains all available properties."
      tags:
        - campaign
      parameters:
        - name: id
          in: path
          description: "The id of the parent kampanj."
          required: true
          type: integer
        - name: _limit
          in: query
          type: integer
          description: The maximum number of items to return.
          minimum: 1
          maximum: 50
          default: 10
        - name: _sort
          in: query
          type: string
          description: Name of a (single) property to sort on. To sort in descending order, prefix with a '-' sign.
      responses:
        200:
          description: An array of objects.
          schema:
            type: array
            items:
              $ref: '#/definitions/history'
        404:
          description: Limeobject not found.
  /campaign/{id}/document/:
    get:
      summary: "Retrieve related ."
      description: "Retrieves a paginated list of  objects related to a specific kampanj. The result contains all available properties."
      tags:
        - campaign
      parameters:
        - name: id
          in: path
          description: "The id of the parent kampanj."
          required: true
          type: integer
        - name: _limit
          in: query
          type: integer
          description: The maximum number of items to return.
          minimum: 1
          maximum: 50
          default: 10
        - name: _sort
          in: query
          type: string
          description: Name of a (single) property to sort on. To sort in descending order, prefix with a '-' sign.
      responses:
        200:
          description: An array of objects.
          schema:
            type: array
            items:
              $ref: '#/definitions/document'
        404:
          description: Limeobject not found.
  /campaign/{id}/todo/:
    get:
      summary: "Retrieve related ."
      description: "Retrieves a paginated list of todo objects related to a specific kampanj. The result contains all available properties."
      tags:
        - campaign
      parameters:
        - name: id
          in: path
          description: "The id of the parent kampanj."
          required: true
          type: integer
        - name: _limit
          in: query
          type: integer
          description: The maximum number of items to return.
          minimum: 1
          maximum: 50
          default: 10
        - name: _sort
          in: query
          type: string
          description: Name of a (single) property to sort on. To sort in descending order, prefix with a '-' sign.
      responses:
        200:
          description: An array of objects.
          schema:
            type: array
            items:
              $ref: '#/definitions/todo'
        404:
          description: Limeobject not found.
  /campaign/{id}/helpdesk/:
    get:
      summary: "Retrieve related ."
      description: "Retrieves a paginated list of  objects related to a specific kampanj. The result contains all available properties."
      tags:
        - campaign
      parameters:
        - name: id
          in: path
          description: "The id of the parent kampanj."
          required: true
          type: integer
        - name: _limit
          in: query
          type: integer
          description: The maximum number of items to return.
          minimum: 1
          maximum: 50
          default: 10
        - name: _sort
          in: query
          type: string
          description: Name of a (single) property to sort on. To sort in descending order, prefix with a '-' sign.
      responses:
        200:
          description: An array of objects.
          schema:
            type: array
            items:
              $ref: '#/definitions/helpdesk'
        404:
          description: Limeobject not found.
  /campaign/{id}/smsrecipient/:
    get:
      summary: "Retrieve related sms recipients."
      description: "Retrieves a paginated list of sms recipient objects related to a specific kampanj. The result contains all available properties."
      tags:
        - campaign
      parameters:
        - name: id
          in: path
          description: "The id of the parent kampanj."
          required: true
          type: integer
        - name: _limit
          in: query
          type: integer
          description: The maximum number of items to return.
          minimum: 1
          maximum: 50
          default: 10
        - name: _sort
          in: query
          type: string
          description: Name of a (single) property to sort on. To sort in descending order, prefix with a '-' sign.
      responses:
        200:
          description: An array of objects.
          schema:
            type: array
            items:
              $ref: '#/definitions/SMS_recipient'
        404:
          description: Limeobject not found.
  /participant/:
    get:
      summary: "Retrieve participants"
      description: "Retrieves a paginated list of participant objects. The result contains all available properties."
      tags:
        - Participants
      parameters:
        - name: _limit
          in: query
          type: integer
          description: The maximum number of items to return.
          minimum: 1
          maximum: 50
          default: 10
        - name: _sort
          in: query
          type: string
          description: Name of a (single) property to sort on. To sort in descending order, prefix with a '-' sign.
        - name: _embed
          in: query
          required: false
          type: array
          collectionFormat: multi
          items:
            enum:
              - "customer"
              - "person"
              - "agreement"
              - "installation"
              - "campaign"
              - "helpdesk"
              - "coworker"
          description: Include data for related objects of the specified type.
      responses:
        200:
          description: An array of objects.
          schema:
            type: array
            items:
              $ref: '#/definitions/Participant'
    post:
      summary: "Create a new participant."
      description: "Create a single participant object."
      tags:
        - Participants
      parameters:
        - name: "Participant"
          in: body
          description: "The participant data to insert."
          required: true
          schema:
            $ref: '#/definitions/Participant'
      responses:
        201:
          description: A JSON representation of the created object.
          schema:
            $ref: '#/definitions/Participant'
        400:
          description: Bad request.
          schema:
            $ref: '#/definitions/Error'
  /participant/{id}/:
    get:
      summary: "Retrieve a participant."
      description: "Retrieves a single participant object having the specified id."
      tags:
        - Participants
      parameters:
        - name: id
          in: path
          description: "The id of the participant to retrieve."
          required: true
          type: integer
        - name: _embed
          in: query
          required: false
          type: array
          collectionFormat: multi
          items:
            enum:
              - "customer"
              - "person"
              - "agreement"
              - "installation"
              - "campaign"
              - "helpdesk"
              - "coworker"
          description: Include data for related objects of the specified type.
      responses:
        200:
          description: A JSON representation of the requested object.
          schema:
            $ref: '#/definitions/Participant'
        404:
          description: Limeobject not found.
    delete:
      summary: "Delete a participant."
      description: "Deletes a single participant object having the specified id."
      tags:
        - Participants
      parameters:
        - name: id
          in: path
          description: The id of the object to delete.
          required: true
          type: integer
      responses:
        204:
          description: Success. No content returned.
        404:
          description: Limeobject not found.
    put:
      summary: "Update an existing participant."
      description: "Updates a single participant object having the specified id. Note that partial objects (i.e. without all properties set) can be specified."
      tags:
        - Participants
      parameters:
        - name: id
          in: path
          description: "The id of the participant to update."
          required: true
          type: integer
        - name: "Participant"
          in: body
          description: "The Participant data to update."
          required: true
          schema:
            $ref: '#/definitions/Participant'
      responses:
        200:
          description: A JSON representation of the updated (full) object.
          schema:
            $ref: '#/definitions/Participant'
        404:
          description: Limeobject not found.
  /participant/{id}/customer/:
    get:
      summary: "Retrieve a related ."
      description: "Retrieves the related  object, if any."
      tags:
        - Participants
      parameters:
        - name: id
          in: path
          description: "The id of the parent participant."
          required: true
          type: integer
      responses:
        200:
          description: A JSON representation of the requested object.
          schema:
            $ref: '#/definitions/customer'
        404:
          description: "No  object has been set for this relation."
  /participant/{id}/person/:
    get:
      summary: "Retrieve a related ."
      description: "Retrieves the related  object, if any."
      tags:
        - Participants
      parameters:
        - name: id
          in: path
          description: "The id of the parent participant."
          required: true
          type: integer
      responses:
        200:
          description: A JSON representation of the requested object.
          schema:
            $ref: '#/definitions/person'
        404:
          description: "No  object has been set for this relation."
  /participant/{id}/agreement/:
    get:
      summary: "Retrieve a related ."
      description: "Retrieves the related  object, if any."
      tags:
        - Participants
      parameters:
        - name: id
          in: path
          description: "The id of the parent participant."
          required: true
          type: integer
      responses:
        200:
          description: A JSON representation of the requested object.
          schema:
            $ref: '#/definitions/agreement'
        404:
          description: "No  object has been set for this relation."
  /participant/{id}/installation/:
    get:
      summary: "Retrieve a related ."
      description: "Retrieves the related  object, if any."
      tags:
        - Participants
      parameters:
        - name: id
          in: path
          description: "The id of the parent participant."
          required: true
          type: integer
      responses:
        200:
          description: A JSON representation of the requested object.
          schema:
            $ref: '#/definitions/installation'
        404:
          description: "No  object has been set for this relation."
  /participant/{id}/campaign/:
    get:
      summary: "Retrieve a related kampanj."
      description: "Retrieves the related kampanj object, if any."
      tags:
        - Participants
      parameters:
        - name: id
          in: path
          description: "The id of the parent participant."
          required: true
          type: integer
      responses:
        200:
          description: A JSON representation of the requested object.
          schema:
            $ref: '#/definitions/Kampanj'
        404:
          description: "No kampanj object has been set for this relation."
  /participant/{id}/coworker/:
    get:
      summary: "Retrieve a related ."
      description: "Retrieves the related  object, if any."
      tags:
        - Participants
      parameters:
        - name: id
          in: path
          description: "The id of the parent participant."
          required: true
          type: integer
      responses:
        200:
          description: A JSON representation of the requested object.
          schema:
            $ref: '#/definitions/coworker'
        404:
          description: "No  object has been set for this relation."
  /participant/{id}/document/:
    get:
      summary: "Retrieve related ."
      description: "Retrieves a paginated list of  objects related to a specific participant. The result contains all available properties."
      tags:
        - Participants
      parameters:
        - name: id
          in: path
          description: "The id of the parent participant."
          required: true
          type: integer
        - name: _limit
          in: query
          type: integer
          description: The maximum number of items to return.
          minimum: 1
          maximum: 50
          default: 10
        - name: _sort
          in: query
          type: string
          description: Name of a (single) property to sort on. To sort in descending order, prefix with a '-' sign.
      responses:
        200:
          description: An array of objects.
          schema:
            type: array
            items:
              $ref: '#/definitions/document'
        404:
          description: Limeobject not found.
  /history/:
    get:
      summary: "Retrieve "
      description: "Retrieves a paginated list of  objects. The result contains all available properties."
      tags:
        - history
      parameters:
        - name: _limit
          in: query
          type: integer
          description: The maximum number of items to return.
          minimum: 1
          maximum: 50
          default: 10
        - name: _sort
          in: query
          type: string
          description: Name of a (single) property to sort on. To sort in descending order, prefix with a '-' sign.
        - name: _embed
          in: query
          required: false
          type: array
          collectionFormat: multi
          items:
            enum:
              - "customer"
              - "person"
              - "coworker"
              - "helpdesk"
              - "installation"
              - "business"
              - "campaign"
              - "office"
              - "checklist_item"
              - "todo"
              - "signagreement"
              - "smsrecipient"
          description: Include data for related objects of the specified type.
      responses:
        200:
          description: An array of objects.
          schema:
            type: array
            items:
              $ref: '#/definitions/history'
    post:
      summary: "Create a new ."
      description: "Create a single  object."
      tags:
        - history
      parameters:
        - name: ""
          in: body
          description: "The  data to insert."
          required: true
          schema:
            $ref: '#/definitions/history'
      responses:
        201:
          description: A JSON representation of the created object.
          schema:
            $ref: '#/definitions/history'
        400:
          description: Bad request.
          schema:
            $ref: '#/definitions/Error'
  /history/{id}/:
    get:
      summary: "Retrieve a ."
      description: "Retrieves a single  object having the specified id."
      tags:
        - history
      parameters:
        - name: id
          in: path
          description: "The id of the  to retrieve."
          required: true
          type: integer
        - name: _embed
          in: query
          required: false
          type: array
          collectionFormat: multi
          items:
            enum:
              - "customer"
              - "person"
              - "coworker"
              - "helpdesk"
              - "installation"
              - "business"
              - "campaign"
              - "office"
              - "checklist_item"
              - "todo"
              - "signagreement"
              - "smsrecipient"
          description: Include data for related objects of the specified type.
      responses:
        200:
          description: A JSON representation of the requested object.
          schema:
            $ref: '#/definitions/history'
        404:
          description: Limeobject not found.
    delete:
      summary: "Delete a ."
      description: "Deletes a single  object having the specified id."
      tags:
        - history
      parameters:
        - name: id
          in: path
          description: The id of the object to delete.
          required: true
          type: integer
      responses:
        204:
          description: Success. No content returned.
        404:
          description: Limeobject not found.
    put:
      summary: "Update an existing ."
      description: "Updates a single  object having the specified id. Note that partial objects (i.e. without all properties set) can be specified."
      tags:
        - history
      parameters:
        - name: id
          in: path
          description: "The id of the  to update."
          required: true
          type: integer
        - name: ""
          in: body
          description: "The  data to update."
          required: true
          schema:
            $ref: '#/definitions/history'
      responses:
        200:
          description: A JSON representation of the updated (full) object.
          schema:
            $ref: '#/definitions/history'
        404:
          description: Limeobject not found.
  /history/{id}/customer/:
    get:
      summary: "Retrieve a related ."
      description: "Retrieves the related  object, if any."
      tags:
        - history
      parameters:
        - name: id
          in: path
          description: "The id of the parent ."
          required: true
          type: integer
      responses:
        200:
          description: A JSON representation of the requested object.
          schema:
            $ref: '#/definitions/customer'
        404:
          description: "No  object has been set for this relation."
  /history/{id}/person/:
    get:
      summary: "Retrieve a related ."
      description: "Retrieves the related  object, if any."
      tags:
        - history
      parameters:
        - name: id
          in: path
          description: "The id of the parent ."
          required: true
          type: integer
      responses:
        200:
          description: A JSON representation of the requested object.
          schema:
            $ref: '#/definitions/person'
        404:
          description: "No  object has been set for this relation."
  /history/{id}/coworker/:
    get:
      summary: "Retrieve a related ."
      description: "Retrieves the related  object, if any."
      tags:
        - history
      parameters:
        - name: id
          in: path
          description: "The id of the parent ."
          required: true
          type: integer
      responses:
        200:
          description: A JSON representation of the requested object.
          schema:
            $ref: '#/definitions/coworker'
        404:
          description: "No  object has been set for this relation."
  /history/{id}/helpdesk/:
    get:
      summary: "Retrieve a related ."
      description: "Retrieves the related  object, if any."
      tags:
        - history
      parameters:
        - name: id
          in: path
          description: "The id of the parent ."
          required: true
          type: integer
      responses:
        200:
          description: A JSON representation of the requested object.
          schema:
            $ref: '#/definitions/helpdesk'
        404:
          description: "No  object has been set for this relation."
  /history/{id}/installation/:
    get:
      summary: "Retrieve a related ."
      description: "Retrieves the related  object, if any."
      tags:
        - history
      parameters:
        - name: id
          in: path
          description: "The id of the parent ."
          required: true
          type: integer
      responses:
        200:
          description: A JSON representation of the requested object.
          schema:
            $ref: '#/definitions/installation'
        404:
          description: "No  object has been set for this relation."
  /history/{id}/business/:
    get:
      summary: "Retrieve a related offert."
      description: "Retrieves the related offert object, if any."
      tags:
        - history
      parameters:
        - name: id
          in: path
          description: "The id of the parent ."
          required: true
          type: integer
      responses:
        200:
          description: A JSON representation of the requested object.
          schema:
            $ref: '#/definitions/Offert'
        404:
          description: "No offert object has been set for this relation."
  /history/{id}/campaign/:
    get:
      summary: "Retrieve a related kampanj."
      description: "Retrieves the related kampanj object, if any."
      tags:
        - history
      parameters:
        - name: id
          in: path
          description: "The id of the parent ."
          required: true
          type: integer
      responses:
        200:
          description: A JSON representation of the requested object.
          schema:
            $ref: '#/definitions/Kampanj'
        404:
          description: "No kampanj object has been set for this relation."
  /history/{id}/office/:
    get:
      summary: "Retrieve a related office."
      description: "Retrieves the related office object, if any."
      tags:
        - history
      parameters:
        - name: id
          in: path
          description: "The id of the parent ."
          required: true
          type: integer
      responses:
        200:
          description: A JSON representation of the requested object.
          schema:
            $ref: '#/definitions/Office'
        404:
          description: "No office object has been set for this relation."
  /history/{id}/todo/:
    get:
      summary: "Retrieve a related todo."
      description: "Retrieves the related todo object, if any."
      tags:
        - history
      parameters:
        - name: id
          in: path
          description: "The id of the parent ."
          required: true
          type: integer
      responses:
        200:
          description: A JSON representation of the requested object.
          schema:
            $ref: '#/definitions/todo'
        404:
          description: "No todo object has been set for this relation."
  /history/{id}/signagreement/:
    get:
      summary: "Retrieve a related sign agreement."
      description: "Retrieves the related sign agreement object, if any."
      tags:
        - history
      parameters:
        - name: id
          in: path
          description: "The id of the parent ."
          required: true
          type: integer
      responses:
        200:
          description: A JSON representation of the requested object.
          schema:
            $ref: '#/definitions/Sign_agreement'
        404:
          description: "No sign agreement object has been set for this relation."
  /history/{id}/document/:
    get:
      summary: "Retrieve related ."
      description: "Retrieves a paginated list of  objects related to a specific . The result contains all available properties."
      tags:
        - history
      parameters:
        - name: id
          in: path
          description: "The id of the parent ."
          required: true
          type: integer
        - name: _limit
          in: query
          type: integer
          description: The maximum number of items to return.
          minimum: 1
          maximum: 50
          default: 10
        - name: _sort
          in: query
          type: string
          description: Name of a (single) property to sort on. To sort in descending order, prefix with a '-' sign.
      responses:
        200:
          description: An array of objects.
          schema:
            type: array
            items:
              $ref: '#/definitions/document'
        404:
          description: Limeobject not found.
  /signagreement/:
    get:
      summary: "Retrieve sign agreement"
      description: "Retrieves a paginated list of sign agreement objects. The result contains all available properties."
      tags:
        - Sign agreement
      parameters:
        - name: _limit
          in: query
          type: integer
          description: The maximum number of items to return.
          minimum: 1
          maximum: 50
          default: 10
        - name: _sort
          in: query
          type: string
          description: Name of a (single) property to sort on. To sort in descending order, prefix with a '-' sign.
        - name: _embed
          in: query
          required: false
          type: array
          collectionFormat: multi
          items:
            enum:
              - "helpdesk"
          description: Include data for related objects of the specified type.
      responses:
        200:
          description: An array of objects.
          schema:
            type: array
            items:
              $ref: '#/definitions/Sign_agreement'
    post:
      summary: "Create a new sign agreement."
      description: "Create a single sign agreement object."
      tags:
        - Sign agreement
      parameters:
        - name: "Sign agreement"
          in: body
          description: "The sign agreement data to insert."
          required: true
          schema:
            $ref: '#/definitions/Sign_agreement'
      responses:
        201:
          description: A JSON representation of the created object.
          schema:
            $ref: '#/definitions/Sign_agreement'
        400:
          description: Bad request.
          schema:
            $ref: '#/definitions/Error'
  /signagreement/{id}/:
    get:
      summary: "Retrieve a sign agreement."
      description: "Retrieves a single sign agreement object having the specified id."
      tags:
        - Sign agreement
      parameters:
        - name: id
          in: path
          description: "The id of the sign agreement to retrieve."
          required: true
          type: integer
        - name: _embed
          in: query
          required: false
          type: array
          collectionFormat: multi
          items:
            enum:
              - "helpdesk"
          description: Include data for related objects of the specified type.
      responses:
        200:
          description: A JSON representation of the requested object.
          schema:
            $ref: '#/definitions/Sign_agreement'
        404:
          description: Limeobject not found.
    delete:
      summary: "Delete a sign agreement."
      description: "Deletes a single sign agreement object having the specified id."
      tags:
        - Sign agreement
      parameters:
        - name: id
          in: path
          description: The id of the object to delete.
          required: true
          type: integer
      responses:
        204:
          description: Success. No content returned.
        404:
          description: Limeobject not found.
    put:
      summary: "Update an existing sign agreement."
      description: "Updates a single sign agreement object having the specified id. Note that partial objects (i.e. without all properties set) can be specified."
      tags:
        - Sign agreement
      parameters:
        - name: id
          in: path
          description: "The id of the sign agreement to update."
          required: true
          type: integer
        - name: "Sign agreement"
          in: body
          description: "The Sign agreement data to update."
          required: true
          schema:
            $ref: '#/definitions/Sign_agreement'
      responses:
        200:
          description: A JSON representation of the updated (full) object.
          schema:
            $ref: '#/definitions/Sign_agreement'
        404:
          description: Limeobject not found.
  /signagreement/{id}/helpdesk/:
    get:
      summary: "Retrieve a related ."
      description: "Retrieves the related  object, if any."
      tags:
        - Sign agreement
      parameters:
        - name: id
          in: path
          description: "The id of the parent sign agreement."
          required: true
          type: integer
      responses:
        200:
          description: A JSON representation of the requested object.
          schema:
            $ref: '#/definitions/helpdesk'
        404:
          description: "No  object has been set for this relation."
  /signagreement/{id}/history/:
    get:
      summary: "Retrieve related ."
      description: "Retrieves a paginated list of  objects related to a specific sign agreement. The result contains all available properties."
      tags:
        - Sign agreement
      parameters:
        - name: id
          in: path
          description: "The id of the parent sign agreement."
          required: true
          type: integer
        - name: _limit
          in: query
          type: integer
          description: The maximum number of items to return.
          minimum: 1
          maximum: 50
          default: 10
        - name: _sort
          in: query
          type: string
          description: Name of a (single) property to sort on. To sort in descending order, prefix with a '-' sign.
      responses:
        200:
          description: An array of objects.
          schema:
            type: array
            items:
              $ref: '#/definitions/history'
        404:
          description: Limeobject not found.
  /document/:
    get:
      summary: "Retrieve "
      description: "Retrieves a paginated list of  objects. The result contains all available properties."
      tags:
        - document
      parameters:
        - name: _limit
          in: query
          type: integer
          description: The maximum number of items to return.
          minimum: 1
          maximum: 50
          default: 10
        - name: _sort
          in: query
          type: string
          description: Name of a (single) property to sort on. To sort in descending order, prefix with a '-' sign.
        - name: _embed
          in: query
          required: false
          type: array
          collectionFormat: multi
          items:
            enum:
              - "whiteboard"
              - "document"
              - "coworker"
              - "customer"
              - "person"
              - "helpdesk"
              - "campaign"
              - "business"
              - "installation"
              - "maininstallation"
              - "agreement"
              - "participant"
              - "workorder"
              - "todo"
              - "history"
          description: Include data for related objects of the specified type.
      responses:
        200:
          description: An array of objects.
          schema:
            type: array
            items:
              $ref: '#/definitions/document'
    post:
      summary: "Create a new ."
      description: "Create a single  object."
      tags:
        - document
      parameters:
        - name: ""
          in: body
          description: "The  data to insert."
          required: true
          schema:
            $ref: '#/definitions/document'
      responses:
        201:
          description: A JSON representation of the created object.
          schema:
            $ref: '#/definitions/document'
        400:
          description: Bad request.
          schema:
            $ref: '#/definitions/Error'
  /document/{id}/:
    get:
      summary: "Retrieve a ."
      description: "Retrieves a single  object having the specified id."
      tags:
        - document
      parameters:
        - name: id
          in: path
          description: "The id of the  to retrieve."
          required: true
          type: integer
        - name: _embed
          in: query
          required: false
          type: array
          collectionFormat: multi
          items:
            enum:
              - "whiteboard"
              - "document"
              - "coworker"
              - "customer"
              - "person"
              - "helpdesk"
              - "campaign"
              - "business"
              - "installation"
              - "maininstallation"
              - "agreement"
              - "participant"
              - "workorder"
              - "todo"
              - "history"
          description: Include data for related objects of the specified type.
      responses:
        200:
          description: A JSON representation of the requested object.
          schema:
            $ref: '#/definitions/document'
        404:
          description: Limeobject not found.
    delete:
      summary: "Delete a ."
      description: "Deletes a single  object having the specified id."
      tags:
        - document
      parameters:
        - name: id
          in: path
          description: The id of the object to delete.
          required: true
          type: integer
      responses:
        204:
          description: Success. No content returned.
        404:
          description: Limeobject not found.
    put:
      summary: "Update an existing ."
      description: "Updates a single  object having the specified id. Note that partial objects (i.e. without all properties set) can be specified."
      tags:
        - document
      parameters:
        - name: id
          in: path
          description: "The id of the  to update."
          required: true
          type: integer
        - name: ""
          in: body
          description: "The  data to update."
          required: true
          schema:
            $ref: '#/definitions/document'
      responses:
        200:
          description: A JSON representation of the updated (full) object.
          schema:
            $ref: '#/definitions/document'
        404:
          description: Limeobject not found.
  /document/{id}/whiteboard/:
    get:
      summary: "Retrieve a related whiteboard."
      description: "Retrieves the related whiteboard object, if any."
      tags:
        - document
      parameters:
        - name: id
          in: path
          description: "The id of the parent ."
          required: true
          type: integer
      responses:
        200:
          description: A JSON representation of the requested object.
          schema:
            $ref: '#/definitions/Whiteboard'
        404:
          description: "No whiteboard object has been set for this relation."
  /document/{id}/coworker/:
    get:
      summary: "Retrieve a related ."
      description: "Retrieves the related  object, if any."
      tags:
        - document
      parameters:
        - name: id
          in: path
          description: "The id of the parent ."
          required: true
          type: integer
      responses:
        200:
          description: A JSON representation of the requested object.
          schema:
            $ref: '#/definitions/coworker'
        404:
          description: "No  object has been set for this relation."
  /document/{id}/customer/:
    get:
      summary: "Retrieve a related ."
      description: "Retrieves the related  object, if any."
      tags:
        - document
      parameters:
        - name: id
          in: path
          description: "The id of the parent ."
          required: true
          type: integer
      responses:
        200:
          description: A JSON representation of the requested object.
          schema:
            $ref: '#/definitions/customer'
        404:
          description: "No  object has been set for this relation."
  /document/{id}/person/:
    get:
      summary: "Retrieve a related ."
      description: "Retrieves the related  object, if any."
      tags:
        - document
      parameters:
        - name: id
          in: path
          description: "The id of the parent ."
          required: true
          type: integer
      responses:
        200:
          description: A JSON representation of the requested object.
          schema:
            $ref: '#/definitions/person'
        404:
          description: "No  object has been set for this relation."
  /document/{id}/helpdesk/:
    get:
      summary: "Retrieve a related ."
      description: "Retrieves the related  object, if any."
      tags:
        - document
      parameters:
        - name: id
          in: path
          description: "The id of the parent ."
          required: true
          type: integer
      responses:
        200:
          description: A JSON representation of the requested object.
          schema:
            $ref: '#/definitions/helpdesk'
        404:
          description: "No  object has been set for this relation."
  /document/{id}/campaign/:
    get:
      summary: "Retrieve a related kampanj."
      description: "Retrieves the related kampanj object, if any."
      tags:
        - document
      parameters:
        - name: id
          in: path
          description: "The id of the parent ."
          required: true
          type: integer
      responses:
        200:
          description: A JSON representation of the requested object.
          schema:
            $ref: '#/definitions/Kampanj'
        404:
          description: "No kampanj object has been set for this relation."
  /document/{id}/business/:
    get:
      summary: "Retrieve a related offert."
      description: "Retrieves the related offert object, if any."
      tags:
        - document
      parameters:
        - name: id
          in: path
          description: "The id of the parent ."
          required: true
          type: integer
      responses:
        200:
          description: A JSON representation of the requested object.
          schema:
            $ref: '#/definitions/Offert'
        404:
          description: "No offert object has been set for this relation."
  /document/{id}/installation/:
    get:
      summary: "Retrieve a related ."
      description: "Retrieves the related  object, if any."
      tags:
        - document
      parameters:
        - name: id
          in: path
          description: "The id of the parent ."
          required: true
          type: integer
      responses:
        200:
          description: A JSON representation of the requested object.
          schema:
            $ref: '#/definitions/installation'
        404:
          description: "No  object has been set for this relation."
  /document/{id}/maininstallation/:
    get:
      summary: "Retrieve a related maininstallation."
      description: "Retrieves the related maininstallation object, if any."
      tags:
        - document
      parameters:
        - name: id
          in: path
          description: "The id of the parent ."
          required: true
          type: integer
      responses:
        200:
          description: A JSON representation of the requested object.
          schema:
            $ref: '#/definitions/maininstallation'
        404:
          description: "No maininstallation object has been set for this relation."
  /document/{id}/agreement/:
    get:
      summary: "Retrieve a related ."
      description: "Retrieves the related  object, if any."
      tags:
        - document
      parameters:
        - name: id
          in: path
          description: "The id of the parent ."
          required: true
          type: integer
      responses:
        200:
          description: A JSON representation of the requested object.
          schema:
            $ref: '#/definitions/agreement'
        404:
          description: "No  object has been set for this relation."
  /document/{id}/participant/:
    get:
      summary: "Retrieve a related participant."
      description: "Retrieves the related participant object, if any."
      tags:
        - document
      parameters:
        - name: id
          in: path
          description: "The id of the parent ."
          required: true
          type: integer
      responses:
        200:
          description: A JSON representation of the requested object.
          schema:
            $ref: '#/definitions/Participant'
        404:
          description: "No participant object has been set for this relation."
  /document/{id}/workorder/:
    get:
      summary: "Retrieve a related workorder."
      description: "Retrieves the related workorder object, if any."
      tags:
        - document
      parameters:
        - name: id
          in: path
          description: "The id of the parent ."
          required: true
          type: integer
      responses:
        200:
          description: A JSON representation of the requested object.
          schema:
            $ref: '#/definitions/workorder'
        404:
          description: "No workorder object has been set for this relation."
  /document/{id}/todo/:
    get:
      summary: "Retrieve a related todo."
      description: "Retrieves the related todo object, if any."
      tags:
        - document
      parameters:
        - name: id
          in: path
          description: "The id of the parent ."
          required: true
          type: integer
      responses:
        200:
          description: A JSON representation of the requested object.
          schema:
            $ref: '#/definitions/todo'
        404:
          description: "No todo object has been set for this relation."
  /document/{id}/history/:
    get:
      summary: "Retrieve a related ."
      description: "Retrieves the related  object, if any."
      tags:
        - document
      parameters:
        - name: id
          in: path
          description: "The id of the parent ."
          required: true
          type: integer
      responses:
        200:
          description: A JSON representation of the requested object.
          schema:
            $ref: '#/definitions/history'
        404:
          description: "No  object has been set for this relation."
  /coworker/:
    get:
      summary: "Retrieve "
      description: "Retrieves a paginated list of  objects. The result contains all available properties."
      tags:
        - coworker
      parameters:
        - name: _limit
          in: query
          type: integer
          description: The maximum number of items to return.
          minimum: 1
          maximum: 50
          default: 10
        - name: _sort
          in: query
          type: string
          description: Name of a (single) property to sort on. To sort in descending order, prefix with a '-' sign.
        - name: _embed
          in: query
          required: false
          type: array
          collectionFormat: multi
          items:
            enum:
              - "office"
              - "businesschecklogin"
              - "entrepreneur"
          description: Include data for related objects of the specified type.
      responses:
        200:
          description: An array of objects.
          schema:
            type: array
            items:
              $ref: '#/definitions/coworker'
    post:
      summary: "Create a new ."
      description: "Create a single  object."
      tags:
        - coworker
      parameters:
        - name: ""
          in: body
          description: "The  data to insert."
          required: true
          schema:
            $ref: '#/definitions/coworker'
      responses:
        201:
          description: A JSON representation of the created object.
          schema:
            $ref: '#/definitions/coworker'
        400:
          description: Bad request.
          schema:
            $ref: '#/definitions/Error'
  /coworker/{id}/:
    get:
      summary: "Retrieve a ."
      description: "Retrieves a single  object having the specified id."
      tags:
        - coworker
      parameters:
        - name: id
          in: path
          description: "The id of the  to retrieve."
          required: true
          type: integer
        - name: _embed
          in: query
          required: false
          type: array
          collectionFormat: multi
          items:
            enum:
              - "office"
              - "businesschecklogin"
              - "entrepreneur"
          description: Include data for related objects of the specified type.
      responses:
        200:
          description: A JSON representation of the requested object.
          schema:
            $ref: '#/definitions/coworker'
        404:
          description: Limeobject not found.
    delete:
      summary: "Delete a ."
      description: "Deletes a single  object having the specified id."
      tags:
        - coworker
      parameters:
        - name: id
          in: path
          description: The id of the object to delete.
          required: true
          type: integer
      responses:
        204:
          description: Success. No content returned.
        404:
          description: Limeobject not found.
    put:
      summary: "Update an existing ."
      description: "Updates a single  object having the specified id. Note that partial objects (i.e. without all properties set) can be specified."
      tags:
        - coworker
      parameters:
        - name: id
          in: path
          description: "The id of the  to update."
          required: true
          type: integer
        - name: ""
          in: body
          description: "The  data to update."
          required: true
          schema:
            $ref: '#/definitions/coworker'
      responses:
        200:
          description: A JSON representation of the updated (full) object.
          schema:
            $ref: '#/definitions/coworker'
        404:
          description: Limeobject not found.
  /coworker/{id}/office/:
    get:
      summary: "Retrieve a related office."
      description: "Retrieves the related office object, if any."
      tags:
        - coworker
      parameters:
        - name: id
          in: path
          description: "The id of the parent ."
          required: true
          type: integer
      responses:
        200:
          description: A JSON representation of the requested object.
          schema:
            $ref: '#/definitions/Office'
        404:
          description: "No office object has been set for this relation."
  /coworker/{id}/businesschecklogin/:
    get:
      summary: "Retrieve a related businesschecklogin."
      description: "Retrieves the related businesschecklogin object, if any."
      tags:
        - coworker
      parameters:
        - name: id
          in: path
          description: "The id of the parent ."
          required: true
          type: integer
      responses:
        200:
          description: A JSON representation of the requested object.
          schema:
            $ref: '#/definitions/businesschecklogin'
        404:
          description: "No businesschecklogin object has been set for this relation."
  /coworker/{id}/whiteboarddoer/:
    get:
      summary: "Retrieve related whiteboard."
      description: "Retrieves a paginated list of whiteboard objects related to a specific . The result contains all available properties."
      tags:
        - coworker
      parameters:
        - name: id
          in: path
          description: "The id of the parent ."
          required: true
          type: integer
        - name: _limit
          in: query
          type: integer
          description: The maximum number of items to return.
          minimum: 1
          maximum: 50
          default: 10
        - name: _sort
          in: query
          type: string
          description: Name of a (single) property to sort on. To sort in descending order, prefix with a '-' sign.
      responses:
        200:
          description: An array of objects.
          schema:
            type: array
            items:
              $ref: '#/definitions/Whiteboard'
        404:
          description: Limeobject not found.
  /coworker/{id}/whiteboardresponsible/:
    get:
      summary: "Retrieve related whiteboard."
      description: "Retrieves a paginated list of whiteboard objects related to a specific . The result contains all available properties."
      tags:
        - coworker
      parameters:
        - name: id
          in: path
          description: "The id of the parent ."
          required: true
          type: integer
        - name: _limit
          in: query
          type: integer
          description: The maximum number of items to return.
          minimum: 1
          maximum: 50
          default: 10
        - name: _sort
          in: query
          type: string
          description: Name of a (single) property to sort on. To sort in descending order, prefix with a '-' sign.
      responses:
        200:
          description: An array of objects.
          schema:
            type: array
            items:
              $ref: '#/definitions/Whiteboard'
        404:
          description: Limeobject not found.
  /coworker/{id}/whiteboard/:
    get:
      summary: "Retrieve related whiteboard."
      description: "Retrieves a paginated list of whiteboard objects related to a specific . The result contains all available properties."
      tags:
        - coworker
      parameters:
        - name: id
          in: path
          description: "The id of the parent ."
          required: true
          type: integer
        - name: _limit
          in: query
          type: integer
          description: The maximum number of items to return.
          minimum: 1
          maximum: 50
          default: 10
        - name: _sort
          in: query
          type: string
          description: Name of a (single) property to sort on. To sort in descending order, prefix with a '-' sign.
      responses:
        200:
          description: An array of objects.
          schema:
            type: array
            items:
              $ref: '#/definitions/Whiteboard'
        404:
          description: Limeobject not found.
  /coworker/{id}/history/:
    get:
      summary: "Retrieve related ."
      description: "Retrieves a paginated list of  objects related to a specific . The result contains all available properties."
      tags:
        - coworker
      parameters:
        - name: id
          in: path
          description: "The id of the parent ."
          required: true
          type: integer
        - name: _limit
          in: query
          type: integer
          description: The maximum number of items to return.
          minimum: 1
          maximum: 50
          default: 10
        - name: _sort
          in: query
          type: string
          description: Name of a (single) property to sort on. To sort in descending order, prefix with a '-' sign.
      responses:
        200:
          description: An array of objects.
          schema:
            type: array
            items:
              $ref: '#/definitions/history'
        404:
          description: Limeobject not found.
  /coworker/{id}/helpdesk/:
    get:
      summary: "Retrieve related ."
      description: "Retrieves a paginated list of  objects related to a specific . The result contains all available properties."
      tags:
        - coworker
      parameters:
        - name: id
          in: path
          description: "The id of the parent ."
          required: true
          type: integer
        - name: _limit
          in: query
          type: integer
          description: The maximum number of items to return.
          minimum: 1
          maximum: 50
          default: 10
        - name: _sort
          in: query
          type: string
          description: Name of a (single) property to sort on. To sort in descending order, prefix with a '-' sign.
      responses:
        200:
          description: An array of objects.
          schema:
            type: array
            items:
              $ref: '#/definitions/helpdesk'
        404:
          description: Limeobject not found.
  /coworker/{id}/workorder/:
    get:
      summary: "Retrieve related ."
      description: "Retrieves a paginated list of workorder objects related to a specific . The result contains all available properties."
      tags:
        - coworker
      parameters:
        - name: id
          in: path
          description: "The id of the parent ."
          required: true
          type: integer
        - name: _limit
          in: query
          type: integer
          description: The maximum number of items to return.
          minimum: 1
          maximum: 50
          default: 10
        - name: _sort
          in: query
          type: string
          description: Name of a (single) property to sort on. To sort in descending order, prefix with a '-' sign.
      responses:
        200:
          description: An array of objects.
          schema:
            type: array
            items:
              $ref: '#/definitions/workorder'
        404:
          description: Limeobject not found.
  /coworker/{id}/timelog/:
    get:
      summary: "Retrieve related ."
      description: "Retrieves a paginated list of timelog objects related to a specific . The result contains all available properties."
      tags:
        - coworker
      parameters:
        - name: id
          in: path
          description: "The id of the parent ."
          required: true
          type: integer
        - name: _limit
          in: query
          type: integer
          description: The maximum number of items to return.
          minimum: 1
          maximum: 50
          default: 10
        - name: _sort
          in: query
          type: string
          description: Name of a (single) property to sort on. To sort in descending order, prefix with a '-' sign.
      responses:
        200:
          description: An array of objects.
          schema:
            type: array
            items:
              $ref: '#/definitions/timelog'
        404:
          description: Limeobject not found.
  /coworker/{id}/checklist_item/:
    get:
      summary: "Retrieve related ."
      description: "Retrieves a paginated list of checklist_item objects related to a specific . The result contains all available properties."
      tags:
        - coworker
      parameters:
        - name: id
          in: path
          description: "The id of the parent ."
          required: true
          type: integer
        - name: _limit
          in: query
          type: integer
          description: The maximum number of items to return.
          minimum: 1
          maximum: 50
          default: 10
        - name: _sort
          in: query
          type: string
          description: Name of a (single) property to sort on. To sort in descending order, prefix with a '-' sign.
      responses:
        200:
          description: An array of objects.
          schema:
            type: array
            items:
              $ref: '#/definitions/checklist_item'
        404:
          description: Limeobject not found.
  /coworker/{id}/business/:
    get:
      summary: "Retrieve related offerter."
      description: "Retrieves a paginated list of offert objects related to a specific . The result contains all available properties."
      tags:
        - coworker
      parameters:
        - name: id
          in: path
          description: "The id of the parent ."
          required: true
          type: integer
        - name: _limit
          in: query
          type: integer
          description: The maximum number of items to return.
          minimum: 1
          maximum: 50
          default: 10
        - name: _sort
          in: query
          type: string
          description: Name of a (single) property to sort on. To sort in descending order, prefix with a '-' sign.
      responses:
        200:
          description: An array of objects.
          schema:
            type: array
            items:
              $ref: '#/definitions/Offert'
        404:
          description: Limeobject not found.
  /coworker/{id}/customerel/:
    get:
      summary: "Retrieve related ."
      description: "Retrieves a paginated list of  objects related to a specific . The result contains all available properties."
      tags:
        - coworker
      parameters:
        - name: id
          in: path
          description: "The id of the parent ."
          required: true
          type: integer
        - name: _limit
          in: query
          type: integer
          description: The maximum number of items to return.
          minimum: 1
          maximum: 50
          default: 10
        - name: _sort
          in: query
          type: string
          description: Name of a (single) property to sort on. To sort in descending order, prefix with a '-' sign.
      responses:
        200:
          description: An array of objects.
          schema:
            type: array
            items:
              $ref: '#/definitions/customer'
        404:
          description: Limeobject not found.
  /coworker/{id}/customerfjv/:
    get:
      summary: "Retrieve related ."
      description: "Retrieves a paginated list of  objects related to a specific . The result contains all available properties."
      tags:
        - coworker
      parameters:
        - name: id
          in: path
          description: "The id of the parent ."
          required: true
          type: integer
        - name: _limit
          in: query
          type: integer
          description: The maximum number of items to return.
          minimum: 1
          maximum: 50
          default: 10
        - name: _sort
          in: query
          type: string
          description: Name of a (single) property to sort on. To sort in descending order, prefix with a '-' sign.
      responses:
        200:
          description: An array of objects.
          schema:
            type: array
            items:
              $ref: '#/definitions/customer'
        404:
          description: Limeobject not found.
  /coworker/{id}/document/:
    get:
      summary: "Retrieve related ."
      description: "Retrieves a paginated list of  objects related to a specific . The result contains all available properties."
      tags:
        - coworker
      parameters:
        - name: id
          in: path
          description: "The id of the parent ."
          required: true
          type: integer
        - name: _limit
          in: query
          type: integer
          description: The maximum number of items to return.
          minimum: 1
          maximum: 50
          default: 10
        - name: _sort
          in: query
          type: string
          description: Name of a (single) property to sort on. To sort in descending order, prefix with a '-' sign.
      responses:
        200:
          description: An array of objects.
          schema:
            type: array
            items:
              $ref: '#/definitions/document'
        404:
          description: Limeobject not found.
  /coworker/{id}/campaign/:
    get:
      summary: "Retrieve related ."
      description: "Retrieves a paginated list of kampanj objects related to a specific . The result contains all available properties."
      tags:
        - coworker
      parameters:
        - name: id
          in: path
          description: "The id of the parent ."
          required: true
          type: integer
        - name: _limit
          in: query
          type: integer
          description: The maximum number of items to return.
          minimum: 1
          maximum: 50
          default: 10
        - name: _sort
          in: query
          type: string
          description: Name of a (single) property to sort on. To sort in descending order, prefix with a '-' sign.
      responses:
        200:
          description: An array of objects.
          schema:
            type: array
            items:
              $ref: '#/definitions/Kampanj'
        404:
          description: Limeobject not found.
  /coworker/{id}/sosprojectleader1/:
    get:
      summary: "Retrieve related ."
      description: "Retrieves a paginated list of  objects related to a specific . The result contains all available properties."
      tags:
        - coworker
      parameters:
        - name: id
          in: path
          description: "The id of the parent ."
          required: true
          type: integer
        - name: _limit
          in: query
          type: integer
          description: The maximum number of items to return.
          minimum: 1
          maximum: 50
          default: 10
        - name: _sort
          in: query
          type: string
          description: Name of a (single) property to sort on. To sort in descending order, prefix with a '-' sign.
      responses:
        200:
          description: An array of objects.
          schema:
            type: array
            items:
              $ref: '#/definitions/helpdesk'
        404:
          description: Limeobject not found.
  /coworker/{id}/sosprojectleader2/:
    get:
      summary: "Retrieve related ."
      description: "Retrieves a paginated list of  objects related to a specific . The result contains all available properties."
      tags:
        - coworker
      parameters:
        - name: id
          in: path
          description: "The id of the parent ."
          required: true
          type: integer
        - name: _limit
          in: query
          type: integer
          description: The maximum number of items to return.
          minimum: 1
          maximum: 50
          default: 10
        - name: _sort
          in: query
          type: string
          description: Name of a (single) property to sort on. To sort in descending order, prefix with a '-' sign.
      responses:
        200:
          description: An array of objects.
          schema:
            type: array
            items:
              $ref: '#/definitions/helpdesk'
        404:
          description: Limeobject not found.
  /coworker/{id}/checklistactivitytemplate/:
    get:
      summary: "Retrieve related ."
      description: "Retrieves a paginated list of checklistactivitytemplate objects related to a specific . The result contains all available properties."
      tags:
        - coworker
      parameters:
        - name: id
          in: path
          description: "The id of the parent ."
          required: true
          type: integer
        - name: _limit
          in: query
          type: integer
          description: The maximum number of items to return.
          minimum: 1
          maximum: 50
          default: 10
        - name: _sort
          in: query
          type: string
          description: Name of a (single) property to sort on. To sort in descending order, prefix with a '-' sign.
      responses:
        200:
          description: An array of objects.
          schema:
            type: array
            items:
              $ref: '#/definitions/checklistactivitytemplate'
        404:
          description: Limeobject not found.
  /coworker/{id}/oldchecklistactivity/:
    get:
      summary: "Retrieve related ."
      description: "Retrieves a paginated list of checklistactivity old objects related to a specific . The result contains all available properties."
      tags:
        - coworker
      parameters:
        - name: id
          in: path
          description: "The id of the parent ."
          required: true
          type: integer
        - name: _limit
          in: query
          type: integer
          description: The maximum number of items to return.
          minimum: 1
          maximum: 50
          default: 10
        - name: _sort
          in: query
          type: string
          description: Name of a (single) property to sort on. To sort in descending order, prefix with a '-' sign.
      responses:
        200:
          description: An array of objects.
          schema:
            type: array
            items:
              $ref: '#/definitions/checklistactivity_old'
        404:
          description: Limeobject not found.
  /coworker/{id}/participant/:
    get:
      summary: "Retrieve related participants."
      description: "Retrieves a paginated list of participant objects related to a specific . The result contains all available properties."
      tags:
        - coworker
      parameters:
        - name: id
          in: path
          description: "The id of the parent ."
          required: true
          type: integer
        - name: _limit
          in: query
          type: integer
          description: The maximum number of items to return.
          minimum: 1
          maximum: 50
          default: 10
        - name: _sort
          in: query
          type: string
          description: Name of a (single) property to sort on. To sort in descending order, prefix with a '-' sign.
      responses:
        200:
          description: An array of objects.
          schema:
            type: array
            items:
              $ref: '#/definitions/Participant'
        404:
          description: Limeobject not found.
  /coworker/{id}/customer/:
    get:
      summary: "Retrieve related ."
      description: "Retrieves a paginated list of  objects related to a specific . The result contains all available properties."
      tags:
        - coworker
      parameters:
        - name: id
          in: path
          description: "The id of the parent ."
          required: true
          type: integer
        - name: _limit
          in: query
          type: integer
          description: The maximum number of items to return.
          minimum: 1
          maximum: 50
          default: 10
        - name: _sort
          in: query
          type: string
          description: Name of a (single) property to sort on. To sort in descending order, prefix with a '-' sign.
      responses:
        200:
          description: An array of objects.
          schema:
            type: array
            items:
              $ref: '#/definitions/customer'
        404:
          description: Limeobject not found.
  /coworker/{id}/todo/:
    get:
      summary: "Retrieve related ."
      description: "Retrieves a paginated list of todo objects related to a specific . The result contains all available properties."
      tags:
        - coworker
      parameters:
        - name: id
          in: path
          description: "The id of the parent ."
          required: true
          type: integer
        - name: _limit
          in: query
          type: integer
          description: The maximum number of items to return.
          minimum: 1
          maximum: 50
          default: 10
        - name: _sort
          in: query
          type: string
          description: Name of a (single) property to sort on. To sort in descending order, prefix with a '-' sign.
      responses:
        200:
          description: An array of objects.
          schema:
            type: array
            items:
              $ref: '#/definitions/todo'
        404:
          description: Limeobject not found.
  /coworker/{id}/helpdeskgroupmembers/:
    get:
      summary: "Retrieve related ."
      description: "Retrieves a paginated list of helpdeskgroupmembers objects related to a specific . The result contains all available properties."
      tags:
        - coworker
      parameters:
        - name: id
          in: path
          description: "The id of the parent ."
          required: true
          type: integer
        - name: _limit
          in: query
          type: integer
          description: The maximum number of items to return.
          minimum: 1
          maximum: 50
          default: 10
        - name: _sort
          in: query
          type: string
          description: Name of a (single) property to sort on. To sort in descending order, prefix with a '-' sign.
      responses:
        200:
          description: An array of objects.
          schema:
            type: array
            items:
              $ref: '#/definitions/helpdeskgroupmembers'
        404:
          description: Limeobject not found.
  /coworker/{id}/infotiles/:
    get:
      summary: "Retrieve related infotiles."
      description: "Retrieves a paginated list of infotile objects related to a specific . The result contains all available properties."
      tags:
        - coworker
      parameters:
        - name: id
          in: path
          description: "The id of the parent ."
          required: true
          type: integer
        - name: _limit
          in: query
          type: integer
          description: The maximum number of items to return.
          minimum: 1
          maximum: 50
          default: 10
        - name: _sort
          in: query
          type: string
          description: Name of a (single) property to sort on. To sort in descending order, prefix with a '-' sign.
      responses:
        200:
          description: An array of objects.
          schema:
            type: array
            items:
              $ref: '#/definitions/InfoTile'
        404:
          description: Limeobject not found.
  /coworker/{id}/serviceprotocol/:
    get:
      summary: "Retrieve related ."
      description: "Retrieves a paginated list of serviceprotocol objects related to a specific . The result contains all available properties."
      tags:
        - coworker
      parameters:
        - name: id
          in: path
          description: "The id of the parent ."
          required: true
          type: integer
        - name: _limit
          in: query
          type: integer
          description: The maximum number of items to return.
          minimum: 1
          maximum: 50
          default: 10
        - name: _sort
          in: query
          type: string
          description: Name of a (single) property to sort on. To sort in descending order, prefix with a '-' sign.
      responses:
        200:
          description: An array of objects.
          schema:
            type: array
            items:
              $ref: '#/definitions/serviceprotocol'
        404:
          description: Limeobject not found.
  /office/:
    get:
      summary: "Retrieve "
      description: "Retrieves a paginated list of office objects. The result contains all available properties."
      tags:
        - office
      parameters:
        - name: _limit
          in: query
          type: integer
          description: The maximum number of items to return.
          minimum: 1
          maximum: 50
          default: 10
        - name: _sort
          in: query
          type: string
          description: Name of a (single) property to sort on. To sort in descending order, prefix with a '-' sign.
      responses:
        200:
          description: An array of objects.
          schema:
            type: array
            items:
              $ref: '#/definitions/Office'
    post:
      summary: "Create a new office."
      description: "Create a single office object."
      tags:
        - office
      parameters:
        - name: "Office"
          in: body
          description: "The office data to insert."
          required: true
          schema:
            $ref: '#/definitions/Office'
      responses:
        201:
          description: A JSON representation of the created object.
          schema:
            $ref: '#/definitions/Office'
        400:
          description: Bad request.
          schema:
            $ref: '#/definitions/Error'
  /office/{id}/:
    get:
      summary: "Retrieve a office."
      description: "Retrieves a single office object having the specified id."
      tags:
        - office
      parameters:
        - name: id
          in: path
          description: "The id of the office to retrieve."
          required: true
          type: integer
      responses:
        200:
          description: A JSON representation of the requested object.
          schema:
            $ref: '#/definitions/Office'
        404:
          description: Limeobject not found.
    delete:
      summary: "Delete a office."
      description: "Deletes a single office object having the specified id."
      tags:
        - office
      parameters:
        - name: id
          in: path
          description: The id of the object to delete.
          required: true
          type: integer
      responses:
        204:
          description: Success. No content returned.
        404:
          description: Limeobject not found.
    put:
      summary: "Update an existing office."
      description: "Updates a single office object having the specified id. Note that partial objects (i.e. without all properties set) can be specified."
      tags:
        - office
      parameters:
        - name: id
          in: path
          description: "The id of the office to update."
          required: true
          type: integer
        - name: "Office"
          in: body
          description: "The Office data to update."
          required: true
          schema:
            $ref: '#/definitions/Office'
      responses:
        200:
          description: A JSON representation of the updated (full) object.
          schema:
            $ref: '#/definitions/Office'
        404:
          description: Limeobject not found.
  /office/{id}/history/:
    get:
      summary: "Retrieve related ."
      description: "Retrieves a paginated list of  objects related to a specific office. The result contains all available properties."
      tags:
        - office
      parameters:
        - name: id
          in: path
          description: "The id of the parent office."
          required: true
          type: integer
        - name: _limit
          in: query
          type: integer
          description: The maximum number of items to return.
          minimum: 1
          maximum: 50
          default: 10
        - name: _sort
          in: query
          type: string
          description: Name of a (single) property to sort on. To sort in descending order, prefix with a '-' sign.
      responses:
        200:
          description: An array of objects.
          schema:
            type: array
            items:
              $ref: '#/definitions/history'
        404:
          description: Limeobject not found.
  /office/{id}/checklistactivitytemplate/:
    get:
      summary: "Retrieve related ."
      description: "Retrieves a paginated list of checklistactivitytemplate objects related to a specific office. The result contains all available properties."
      tags:
        - office
      parameters:
        - name: id
          in: path
          description: "The id of the parent office."
          required: true
          type: integer
        - name: _limit
          in: query
          type: integer
          description: The maximum number of items to return.
          minimum: 1
          maximum: 50
          default: 10
        - name: _sort
          in: query
          type: string
          description: Name of a (single) property to sort on. To sort in descending order, prefix with a '-' sign.
      responses:
        200:
          description: An array of objects.
          schema:
            type: array
            items:
              $ref: '#/definitions/checklistactivitytemplate'
        404:
          description: Limeobject not found.
  /office/{id}/coworker/:
    get:
      summary: "Retrieve related ."
      description: "Retrieves a paginated list of  objects related to a specific office. The result contains all available properties."
      tags:
        - office
      parameters:
        - name: id
          in: path
          description: "The id of the parent office."
          required: true
          type: integer
        - name: _limit
          in: query
          type: integer
          description: The maximum number of items to return.
          minimum: 1
          maximum: 50
          default: 10
        - name: _sort
          in: query
          type: string
          description: Name of a (single) property to sort on. To sort in descending order, prefix with a '-' sign.
      responses:
        200:
          description: An array of objects.
          schema:
            type: array
            items:
              $ref: '#/definitions/coworker'
        404:
          description: Limeobject not found.
  /office/{id}/helpdesk/:
    get:
      summary: "Retrieve related ."
      description: "Retrieves a paginated list of  objects related to a specific office. The result contains all available properties."
      tags:
        - office
      parameters:
        - name: id
          in: path
          description: "The id of the parent office."
          required: true
          type: integer
        - name: _limit
          in: query
          type: integer
          description: The maximum number of items to return.
          minimum: 1
          maximum: 50
          default: 10
        - name: _sort
          in: query
          type: string
          description: Name of a (single) property to sort on. To sort in descending order, prefix with a '-' sign.
      responses:
        200:
          description: An array of objects.
          schema:
            type: array
            items:
              $ref: '#/definitions/helpdesk'
        404:
          description: Limeobject not found.
  /office/{id}/helpdesktype/:
    get:
      summary: "Retrieve related ."
      description: "Retrieves a paginated list of checklisttemplate objects related to a specific office. The result contains all available properties."
      tags:
        - office
      parameters:
        - name: id
          in: path
          description: "The id of the parent office."
          required: true
          type: integer
        - name: _limit
          in: query
          type: integer
          description: The maximum number of items to return.
          minimum: 1
          maximum: 50
          default: 10
        - name: _sort
          in: query
          type: string
          description: Name of a (single) property to sort on. To sort in descending order, prefix with a '-' sign.
      responses:
        200:
          description: An array of objects.
          schema:
            type: array
            items:
              $ref: '#/definitions/checklisttemplate'
        404:
          description: Limeobject not found.
  /office/{id}/checklistactivity/:
    get:
      summary: "Retrieve related checklist activities."
      description: "Retrieves a paginated list of checklist activity objects related to a specific office. The result contains all available properties."
      tags:
        - office
      parameters:
        - name: id
          in: path
          description: "The id of the parent office."
          required: true
          type: integer
        - name: _limit
          in: query
          type: integer
          description: The maximum number of items to return.
          minimum: 1
          maximum: 50
          default: 10
        - name: _sort
          in: query
          type: string
          description: Name of a (single) property to sort on. To sort in descending order, prefix with a '-' sign.
      responses:
        200:
          description: An array of objects.
          schema:
            type: array
            items:
              $ref: '#/definitions/Checklist_Activity'
        404:
          description: Limeobject not found.
  /office/{id}/soschecklistactivity/:
    get:
      summary: "Retrieve related ."
      description: "Retrieves a paginated list of soschecklistactivity objects related to a specific office. The result contains all available properties."
      tags:
        - office
      parameters:
        - name: id
          in: path
          description: "The id of the parent office."
          required: true
          type: integer
        - name: _limit
          in: query
          type: integer
          description: The maximum number of items to return.
          minimum: 1
          maximum: 50
          default: 10
        - name: _sort
          in: query
          type: string
          description: Name of a (single) property to sort on. To sort in descending order, prefix with a '-' sign.
      responses:
        200:
          description: An array of objects.
          schema:
            type: array
            items:
              $ref: '#/definitions/soschecklistactivity'
        404:
          description: Limeobject not found.
  /office/{id}/todo/:
    get:
      summary: "Retrieve related ."
      description: "Retrieves a paginated list of todo objects related to a specific office. The result contains all available properties."
      tags:
        - office
      parameters:
        - name: id
          in: path
          description: "The id of the parent office."
          required: true
          type: integer
        - name: _limit
          in: query
          type: integer
          description: The maximum number of items to return.
          minimum: 1
          maximum: 50
          default: 10
        - name: _sort
          in: query
          type: string
          description: Name of a (single) property to sort on. To sort in descending order, prefix with a '-' sign.
      responses:
        200:
          description: An array of objects.
          schema:
            type: array
            items:
              $ref: '#/definitions/todo'
        404:
          description: Limeobject not found.
  /office/{id}/infotiles/:
    get:
      summary: "Retrieve related infotiles."
      description: "Retrieves a paginated list of infotile objects related to a specific office. The result contains all available properties."
      tags:
        - office
      parameters:
        - name: id
          in: path
          description: "The id of the parent office."
          required: true
          type: integer
        - name: _limit
          in: query
          type: integer
          description: The maximum number of items to return.
          minimum: 1
          maximum: 50
          default: 10
        - name: _sort
          in: query
          type: string
          description: Name of a (single) property to sort on. To sort in descending order, prefix with a '-' sign.
      responses:
        200:
          description: An array of objects.
          schema:
            type: array
            items:
              $ref: '#/definitions/InfoTile'
        404:
          description: Limeobject not found.
  /todo/:
    get:
      summary: "Retrieve "
      description: "Retrieves a paginated list of todo objects. The result contains all available properties."
      tags:
        - todo
      parameters:
        - name: _limit
          in: query
          type: integer
          description: The maximum number of items to return.
          minimum: 1
          maximum: 50
          default: 10
        - name: _sort
          in: query
          type: string
          description: Name of a (single) property to sort on. To sort in descending order, prefix with a '-' sign.
        - name: _embed
          in: query
          required: false
          type: array
          collectionFormat: multi
          items:
            enum:
              - "coworker"
              - "customer"
              - "installation"
              - "person"
              - "business"
              - "campaign"
              - "helpdesk"
              - "office"
          description: Include data for related objects of the specified type.
      responses:
        200:
          description: An array of objects.
          schema:
            type: array
            items:
              $ref: '#/definitions/todo'
    post:
      summary: "Create a new todo."
      description: "Create a single todo object."
      tags:
        - todo
      parameters:
        - name: "todo"
          in: body
          description: "The todo data to insert."
          required: true
          schema:
            $ref: '#/definitions/todo'
      responses:
        201:
          description: A JSON representation of the created object.
          schema:
            $ref: '#/definitions/todo'
        400:
          description: Bad request.
          schema:
            $ref: '#/definitions/Error'
  /todo/{id}/:
    get:
      summary: "Retrieve a todo."
      description: "Retrieves a single todo object having the specified id."
      tags:
        - todo
      parameters:
        - name: id
          in: path
          description: "The id of the todo to retrieve."
          required: true
          type: integer
        - name: _embed
          in: query
          required: false
          type: array
          collectionFormat: multi
          items:
            enum:
              - "coworker"
              - "customer"
              - "installation"
              - "person"
              - "business"
              - "campaign"
              - "helpdesk"
              - "office"
          description: Include data for related objects of the specified type.
      responses:
        200:
          description: A JSON representation of the requested object.
          schema:
            $ref: '#/definitions/todo'
        404:
          description: Limeobject not found.
    delete:
      summary: "Delete a todo."
      description: "Deletes a single todo object having the specified id."
      tags:
        - todo
      parameters:
        - name: id
          in: path
          description: The id of the object to delete.
          required: true
          type: integer
      responses:
        204:
          description: Success. No content returned.
        404:
          description: Limeobject not found.
    put:
      summary: "Update an existing todo."
      description: "Updates a single todo object having the specified id. Note that partial objects (i.e. without all properties set) can be specified."
      tags:
        - todo
      parameters:
        - name: id
          in: path
          description: "The id of the todo to update."
          required: true
          type: integer
        - name: "todo"
          in: body
          description: "The todo data to update."
          required: true
          schema:
            $ref: '#/definitions/todo'
      responses:
        200:
          description: A JSON representation of the updated (full) object.
          schema:
            $ref: '#/definitions/todo'
        404:
          description: Limeobject not found.
  /todo/{id}/coworker/:
    get:
      summary: "Retrieve a related ."
      description: "Retrieves the related  object, if any."
      tags:
        - todo
      parameters:
        - name: id
          in: path
          description: "The id of the parent todo."
          required: true
          type: integer
      responses:
        200:
          description: A JSON representation of the requested object.
          schema:
            $ref: '#/definitions/coworker'
        404:
          description: "No  object has been set for this relation."
  /todo/{id}/customer/:
    get:
      summary: "Retrieve a related ."
      description: "Retrieves the related  object, if any."
      tags:
        - todo
      parameters:
        - name: id
          in: path
          description: "The id of the parent todo."
          required: true
          type: integer
      responses:
        200:
          description: A JSON representation of the requested object.
          schema:
            $ref: '#/definitions/customer'
        404:
          description: "No  object has been set for this relation."
  /todo/{id}/installation/:
    get:
      summary: "Retrieve a related ."
      description: "Retrieves the related  object, if any."
      tags:
        - todo
      parameters:
        - name: id
          in: path
          description: "The id of the parent todo."
          required: true
          type: integer
      responses:
        200:
          description: A JSON representation of the requested object.
          schema:
            $ref: '#/definitions/installation'
        404:
          description: "No  object has been set for this relation."
  /todo/{id}/person/:
    get:
      summary: "Retrieve a related ."
      description: "Retrieves the related  object, if any."
      tags:
        - todo
      parameters:
        - name: id
          in: path
          description: "The id of the parent todo."
          required: true
          type: integer
      responses:
        200:
          description: A JSON representation of the requested object.
          schema:
            $ref: '#/definitions/person'
        404:
          description: "No  object has been set for this relation."
  /todo/{id}/business/:
    get:
      summary: "Retrieve a related offert."
      description: "Retrieves the related offert object, if any."
      tags:
        - todo
      parameters:
        - name: id
          in: path
          description: "The id of the parent todo."
          required: true
          type: integer
      responses:
        200:
          description: A JSON representation of the requested object.
          schema:
            $ref: '#/definitions/Offert'
        404:
          description: "No offert object has been set for this relation."
  /todo/{id}/campaign/:
    get:
      summary: "Retrieve a related kampanj."
      description: "Retrieves the related kampanj object, if any."
      tags:
        - todo
      parameters:
        - name: id
          in: path
          description: "The id of the parent todo."
          required: true
          type: integer
      responses:
        200:
          description: A JSON representation of the requested object.
          schema:
            $ref: '#/definitions/Kampanj'
        404:
          description: "No kampanj object has been set for this relation."
  /todo/{id}/helpdesk/:
    get:
      summary: "Retrieve a related ."
      description: "Retrieves the related  object, if any."
      tags:
        - todo
      parameters:
        - name: id
          in: path
          description: "The id of the parent todo."
          required: true
          type: integer
      responses:
        200:
          description: A JSON representation of the requested object.
          schema:
            $ref: '#/definitions/helpdesk'
        404:
          description: "No  object has been set for this relation."
  /todo/{id}/office/:
    get:
      summary: "Retrieve a related office."
      description: "Retrieves the related office object, if any."
      tags:
        - todo
      parameters:
        - name: id
          in: path
          description: "The id of the parent todo."
          required: true
          type: integer
      responses:
        200:
          description: A JSON representation of the requested object.
          schema:
            $ref: '#/definitions/Office'
        404:
          description: "No office object has been set for this relation."
  /todo/{id}/document/:
    get:
      summary: "Retrieve related ."
      description: "Retrieves a paginated list of  objects related to a specific todo. The result contains all available properties."
      tags:
        - todo
      parameters:
        - name: id
          in: path
          description: "The id of the parent todo."
          required: true
          type: integer
        - name: _limit
          in: query
          type: integer
          description: The maximum number of items to return.
          minimum: 1
          maximum: 50
          default: 10
        - name: _sort
          in: query
          type: string
          description: Name of a (single) property to sort on. To sort in descending order, prefix with a '-' sign.
      responses:
        200:
          description: An array of objects.
          schema:
            type: array
            items:
              $ref: '#/definitions/document'
        404:
          description: Limeobject not found.
  /todo/{id}/history/:
    get:
      summary: "Retrieve related ."
      description: "Retrieves a paginated list of  objects related to a specific todo. The result contains all available properties."
      tags:
        - todo
      parameters:
        - name: id
          in: path
          description: "The id of the parent todo."
          required: true
          type: integer
        - name: _limit
          in: query
          type: integer
          description: The maximum number of items to return.
          minimum: 1
          maximum: 50
          default: 10
        - name: _sort
          in: query
          type: string
          description: Name of a (single) property to sort on. To sort in descending order, prefix with a '-' sign.
      responses:
        200:
          description: An array of objects.
          schema:
            type: array
            items:
              $ref: '#/definitions/history'
        404:
          description: Limeobject not found.
  /businessareanew/:
    get:
      summary: "Retrieve buisiness area"
      description: "Retrieves a paginated list of buisiness area objects. The result contains all available properties."
      tags:
        - Buisiness area
      parameters:
        - name: _limit
          in: query
          type: integer
          description: The maximum number of items to return.
          minimum: 1
          maximum: 50
          default: 10
        - name: _sort
          in: query
          type: string
          description: Name of a (single) property to sort on. To sort in descending order, prefix with a '-' sign.
      responses:
        200:
          description: An array of objects.
          schema:
            type: array
            items:
              $ref: '#/definitions/Buisiness_area'
    post:
      summary: "Create a new buisiness area."
      description: "Create a single buisiness area object."
      tags:
        - Buisiness area
      parameters:
        - name: "Buisiness area"
          in: body
          description: "The buisiness area data to insert."
          required: true
          schema:
            $ref: '#/definitions/Buisiness_area'
      responses:
        201:
          description: A JSON representation of the created object.
          schema:
            $ref: '#/definitions/Buisiness_area'
        400:
          description: Bad request.
          schema:
            $ref: '#/definitions/Error'
  /businessareanew/{id}/:
    get:
      summary: "Retrieve a buisiness area."
      description: "Retrieves a single buisiness area object having the specified id."
      tags:
        - Buisiness area
      parameters:
        - name: id
          in: path
          description: "The id of the buisiness area to retrieve."
          required: true
          type: integer
      responses:
        200:
          description: A JSON representation of the requested object.
          schema:
            $ref: '#/definitions/Buisiness_area'
        404:
          description: Limeobject not found.
    delete:
      summary: "Delete a buisiness area."
      description: "Deletes a single buisiness area object having the specified id."
      tags:
        - Buisiness area
      parameters:
        - name: id
          in: path
          description: The id of the object to delete.
          required: true
          type: integer
      responses:
        204:
          description: Success. No content returned.
        404:
          description: Limeobject not found.
    put:
      summary: "Update an existing buisiness area."
      description: "Updates a single buisiness area object having the specified id. Note that partial objects (i.e. without all properties set) can be specified."
      tags:
        - Buisiness area
      parameters:
        - name: id
          in: path
          description: "The id of the buisiness area to update."
          required: true
          type: integer
        - name: "Buisiness area"
          in: body
          description: "The Buisiness area data to update."
          required: true
          schema:
            $ref: '#/definitions/Buisiness_area'
      responses:
        200:
          description: A JSON representation of the updated (full) object.
          schema:
            $ref: '#/definitions/Buisiness_area'
        404:
          description: Limeobject not found.
  /businessareanew/{id}/business/:
    get:
      summary: "Retrieve related offerter."
      description: "Retrieves a paginated list of offert objects related to a specific buisiness area. The result contains all available properties."
      tags:
        - Buisiness area
      parameters:
        - name: id
          in: path
          description: "The id of the parent buisiness area."
          required: true
          type: integer
        - name: _limit
          in: query
          type: integer
          description: The maximum number of items to return.
          minimum: 1
          maximum: 50
          default: 10
        - name: _sort
          in: query
          type: string
          description: Name of a (single) property to sort on. To sort in descending order, prefix with a '-' sign.
      responses:
        200:
          description: An array of objects.
          schema:
            type: array
            items:
              $ref: '#/definitions/Offert'
        404:
          description: Limeobject not found.
  /businessareanew/{id}/campaign/:
    get:
      summary: "Retrieve related ."
      description: "Retrieves a paginated list of kampanj objects related to a specific buisiness area. The result contains all available properties."
      tags:
        - Buisiness area
      parameters:
        - name: id
          in: path
          description: "The id of the parent buisiness area."
          required: true
          type: integer
        - name: _limit
          in: query
          type: integer
          description: The maximum number of items to return.
          minimum: 1
          maximum: 50
          default: 10
        - name: _sort
          in: query
          type: string
          description: Name of a (single) property to sort on. To sort in descending order, prefix with a '-' sign.
      responses:
        200:
          description: An array of objects.
          schema:
            type: array
            items:
              $ref: '#/definitions/Kampanj'
        404:
          description: Limeobject not found.
  /protectedid/:
    get:
      summary: "Retrieve protected id"
      description: "Retrieves a paginated list of protected id objects. The result contains all available properties."
      tags:
        - Protected ID
      parameters:
        - name: _limit
          in: query
          type: integer
          description: The maximum number of items to return.
          minimum: 1
          maximum: 50
          default: 10
        - name: _sort
          in: query
          type: string
          description: Name of a (single) property to sort on. To sort in descending order, prefix with a '-' sign.
      responses:
        200:
          description: An array of objects.
          schema:
            type: array
            items:
              $ref: '#/definitions/Protected_ID'
    post:
      summary: "Create a new protected id."
      description: "Create a single protected id object."
      tags:
        - Protected ID
      parameters:
        - name: "Protected ID"
          in: body
          description: "The protected id data to insert."
          required: true
          schema:
            $ref: '#/definitions/Protected_ID'
      responses:
        201:
          description: A JSON representation of the created object.
          schema:
            $ref: '#/definitions/Protected_ID'
        400:
          description: Bad request.
          schema:
            $ref: '#/definitions/Error'
  /protectedid/{id}/:
    get:
      summary: "Retrieve a protected id."
      description: "Retrieves a single protected id object having the specified id."
      tags:
        - Protected ID
      parameters:
        - name: id
          in: path
          description: "The id of the protected id to retrieve."
          required: true
          type: integer
      responses:
        200:
          description: A JSON representation of the requested object.
          schema:
            $ref: '#/definitions/Protected_ID'
        404:
          description: Limeobject not found.
    delete:
      summary: "Delete a protected id."
      description: "Deletes a single protected id object having the specified id."
      tags:
        - Protected ID
      parameters:
        - name: id
          in: path
          description: The id of the object to delete.
          required: true
          type: integer
      responses:
        204:
          description: Success. No content returned.
        404:
          description: Limeobject not found.
    put:
      summary: "Update an existing protected id."
      description: "Updates a single protected id object having the specified id. Note that partial objects (i.e. without all properties set) can be specified."
      tags:
        - Protected ID
      parameters:
        - name: id
          in: path
          description: "The id of the protected id to update."
          required: true
          type: integer
        - name: "Protected ID"
          in: body
          description: "The Protected ID data to update."
          required: true
          schema:
            $ref: '#/definitions/Protected_ID'
      responses:
        200:
          description: A JSON representation of the updated (full) object.
          schema:
            $ref: '#/definitions/Protected_ID'
        404:
          description: Limeobject not found.
  /maininstallation/:
    get:
      summary: "Retrieve "
      description: "Retrieves a paginated list of maininstallation objects. The result contains all available properties."
      tags:
        - maininstallation
      parameters:
        - name: _limit
          in: query
          type: integer
          description: The maximum number of items to return.
          minimum: 1
          maximum: 50
          default: 10
        - name: _sort
          in: query
          type: string
          description: Name of a (single) property to sort on. To sort in descending order, prefix with a '-' sign.
      responses:
        200:
          description: An array of objects.
          schema:
            type: array
            items:
              $ref: '#/definitions/maininstallation'
    post:
      summary: "Create a new maininstallation."
      description: "Create a single maininstallation object."
      tags:
        - maininstallation
      parameters:
        - name: "maininstallation"
          in: body
          description: "The maininstallation data to insert."
          required: true
          schema:
            $ref: '#/definitions/maininstallation'
      responses:
        201:
          description: A JSON representation of the created object.
          schema:
            $ref: '#/definitions/maininstallation'
        400:
          description: Bad request.
          schema:
            $ref: '#/definitions/Error'
  /maininstallation/{id}/:
    get:
      summary: "Retrieve a maininstallation."
      description: "Retrieves a single maininstallation object having the specified id."
      tags:
        - maininstallation
      parameters:
        - name: id
          in: path
          description: "The id of the maininstallation to retrieve."
          required: true
          type: integer
      responses:
        200:
          description: A JSON representation of the requested object.
          schema:
            $ref: '#/definitions/maininstallation'
        404:
          description: Limeobject not found.
    delete:
      summary: "Delete a maininstallation."
      description: "Deletes a single maininstallation object having the specified id."
      tags:
        - maininstallation
      parameters:
        - name: id
          in: path
          description: The id of the object to delete.
          required: true
          type: integer
      responses:
        204:
          description: Success. No content returned.
        404:
          description: Limeobject not found.
    put:
      summary: "Update an existing maininstallation."
      description: "Updates a single maininstallation object having the specified id. Note that partial objects (i.e. without all properties set) can be specified."
      tags:
        - maininstallation
      parameters:
        - name: id
          in: path
          description: "The id of the maininstallation to update."
          required: true
          type: integer
        - name: "maininstallation"
          in: body
          description: "The maininstallation data to update."
          required: true
          schema:
            $ref: '#/definitions/maininstallation'
      responses:
        200:
          description: A JSON representation of the updated (full) object.
          schema:
            $ref: '#/definitions/maininstallation'
        404:
          description: Limeobject not found.
  /maininstallation/{id}/installation/:
    get:
      summary: "Retrieve related ."
      description: "Retrieves a paginated list of  objects related to a specific maininstallation. The result contains all available properties."
      tags:
        - maininstallation
      parameters:
        - name: id
          in: path
          description: "The id of the parent maininstallation."
          required: true
          type: integer
        - name: _limit
          in: query
          type: integer
          description: The maximum number of items to return.
          minimum: 1
          maximum: 50
          default: 10
        - name: _sort
          in: query
          type: string
          description: Name of a (single) property to sort on. To sort in descending order, prefix with a '-' sign.
      responses:
        200:
          description: An array of objects.
          schema:
            type: array
            items:
              $ref: '#/definitions/installation'
        404:
          description: Limeobject not found.
  /maininstallation/{id}/document/:
    get:
      summary: "Retrieve related ."
      description: "Retrieves a paginated list of  objects related to a specific maininstallation. The result contains all available properties."
      tags:
        - maininstallation
      parameters:
        - name: id
          in: path
          description: "The id of the parent maininstallation."
          required: true
          type: integer
        - name: _limit
          in: query
          type: integer
          description: The maximum number of items to return.
          minimum: 1
          maximum: 50
          default: 10
        - name: _sort
          in: query
          type: string
          description: Name of a (single) property to sort on. To sort in descending order, prefix with a '-' sign.
      responses:
        200:
          description: An array of objects.
          schema:
            type: array
            items:
              $ref: '#/definitions/document'
        404:
          description: Limeobject not found.
  /smssendout/:
    get:
      summary: "Retrieve sms sendouts"
      description: "Retrieves a paginated list of sms sendout objects. The result contains all available properties."
      tags:
        - SMS sendouts
      parameters:
        - name: _limit
          in: query
          type: integer
          description: The maximum number of items to return.
          minimum: 1
          maximum: 50
          default: 10
        - name: _sort
          in: query
          type: string
          description: Name of a (single) property to sort on. To sort in descending order, prefix with a '-' sign.
        - name: _embed
          in: query
          required: false
          type: array
          collectionFormat: multi
          items:
            enum:
              - "helpdesk"
          description: Include data for related objects of the specified type.
      responses:
        200:
          description: An array of objects.
          schema:
            type: array
            items:
              $ref: '#/definitions/SMS_sendout'
    post:
      summary: "Create a new sms sendout."
      description: "Create a single sms sendout object."
      tags:
        - SMS sendouts
      parameters:
        - name: "SMS sendout"
          in: body
          description: "The sms sendout data to insert."
          required: true
          schema:
            $ref: '#/definitions/SMS_sendout'
      responses:
        201:
          description: A JSON representation of the created object.
          schema:
            $ref: '#/definitions/SMS_sendout'
        400:
          description: Bad request.
          schema:
            $ref: '#/definitions/Error'
  /smssendout/{id}/:
    get:
      summary: "Retrieve a sms sendout."
      description: "Retrieves a single sms sendout object having the specified id."
      tags:
        - SMS sendouts
      parameters:
        - name: id
          in: path
          description: "The id of the sms sendout to retrieve."
          required: true
          type: integer
        - name: _embed
          in: query
          required: false
          type: array
          collectionFormat: multi
          items:
            enum:
              - "helpdesk"
          description: Include data for related objects of the specified type.
      responses:
        200:
          description: A JSON representation of the requested object.
          schema:
            $ref: '#/definitions/SMS_sendout'
        404:
          description: Limeobject not found.
    delete:
      summary: "Delete a sms sendout."
      description: "Deletes a single sms sendout object having the specified id."
      tags:
        - SMS sendouts
      parameters:
        - name: id
          in: path
          description: The id of the object to delete.
          required: true
          type: integer
      responses:
        204:
          description: Success. No content returned.
        404:
          description: Limeobject not found.
    put:
      summary: "Update an existing sms sendout."
      description: "Updates a single sms sendout object having the specified id. Note that partial objects (i.e. without all properties set) can be specified."
      tags:
        - SMS sendouts
      parameters:
        - name: id
          in: path
          description: "The id of the sms sendout to update."
          required: true
          type: integer
        - name: "SMS sendout"
          in: body
          description: "The SMS sendout data to update."
          required: true
          schema:
            $ref: '#/definitions/SMS_sendout'
      responses:
        200:
          description: A JSON representation of the updated (full) object.
          schema:
            $ref: '#/definitions/SMS_sendout'
        404:
          description: Limeobject not found.
  /smssendout/{id}/helpdesk/:
    get:
      summary: "Retrieve a related ."
      description: "Retrieves the related  object, if any."
      tags:
        - SMS sendouts
      parameters:
        - name: id
          in: path
          description: "The id of the parent sms sendout."
          required: true
          type: integer
      responses:
        200:
          description: A JSON representation of the requested object.
          schema:
            $ref: '#/definitions/helpdesk'
        404:
          description: "No  object has been set for this relation."
  /smssendout/{id}/smsrecipient/:
    get:
      summary: "Retrieve related sms recipients."
      description: "Retrieves a paginated list of sms recipient objects related to a specific sms sendout. The result contains all available properties."
      tags:
        - SMS sendouts
      parameters:
        - name: id
          in: path
          description: "The id of the parent sms sendout."
          required: true
          type: integer
        - name: _limit
          in: query
          type: integer
          description: The maximum number of items to return.
          minimum: 1
          maximum: 50
          default: 10
        - name: _sort
          in: query
          type: string
          description: Name of a (single) property to sort on. To sort in descending order, prefix with a '-' sign.
      responses:
        200:
          description: An array of objects.
          schema:
            type: array
            items:
              $ref: '#/definitions/SMS_recipient'
        404:
          description: Limeobject not found.
  /smstemplate/:
    get:
      summary: "Retrieve sms templates"
      description: "Retrieves a paginated list of sms template objects. The result contains all available properties."
      tags:
        - SMS templates
      parameters:
        - name: _limit
          in: query
          type: integer
          description: The maximum number of items to return.
          minimum: 1
          maximum: 50
          default: 10
        - name: _sort
          in: query
          type: string
          description: Name of a (single) property to sort on. To sort in descending order, prefix with a '-' sign.
      responses:
        200:
          description: An array of objects.
          schema:
            type: array
            items:
              $ref: '#/definitions/SMS_template'
    post:
      summary: "Create a new sms template."
      description: "Create a single sms template object."
      tags:
        - SMS templates
      parameters:
        - name: "SMS template"
          in: body
          description: "The sms template data to insert."
          required: true
          schema:
            $ref: '#/definitions/SMS_template'
      responses:
        201:
          description: A JSON representation of the created object.
          schema:
            $ref: '#/definitions/SMS_template'
        400:
          description: Bad request.
          schema:
            $ref: '#/definitions/Error'
  /smstemplate/{id}/:
    get:
      summary: "Retrieve a sms template."
      description: "Retrieves a single sms template object having the specified id."
      tags:
        - SMS templates
      parameters:
        - name: id
          in: path
          description: "The id of the sms template to retrieve."
          required: true
          type: integer
      responses:
        200:
          description: A JSON representation of the requested object.
          schema:
            $ref: '#/definitions/SMS_template'
        404:
          description: Limeobject not found.
    delete:
      summary: "Delete a sms template."
      description: "Deletes a single sms template object having the specified id."
      tags:
        - SMS templates
      parameters:
        - name: id
          in: path
          description: The id of the object to delete.
          required: true
          type: integer
      responses:
        204:
          description: Success. No content returned.
        404:
          description: Limeobject not found.
    put:
      summary: "Update an existing sms template."
      description: "Updates a single sms template object having the specified id. Note that partial objects (i.e. without all properties set) can be specified."
      tags:
        - SMS templates
      parameters:
        - name: id
          in: path
          description: "The id of the sms template to update."
          required: true
          type: integer
        - name: "SMS template"
          in: body
          description: "The SMS template data to update."
          required: true
          schema:
            $ref: '#/definitions/SMS_template'
      responses:
        200:
          description: A JSON representation of the updated (full) object.
          schema:
            $ref: '#/definitions/SMS_template'
        404:
          description: Limeobject not found.
  /smsrecipient/:
    get:
      summary: "Retrieve sms recipients"
      description: "Retrieves a paginated list of sms recipient objects. The result contains all available properties."
      tags:
        - SMS recipients
      parameters:
        - name: _limit
          in: query
          type: integer
          description: The maximum number of items to return.
          minimum: 1
          maximum: 50
          default: 10
        - name: _sort
          in: query
          type: string
          description: Name of a (single) property to sort on. To sort in descending order, prefix with a '-' sign.
        - name: _embed
          in: query
          required: false
          type: array
          collectionFormat: multi
          items:
            enum:
              - "smssendout"
              - "customer"
              - "installation"
              - "helpdesk"
              - "campaign"
              - "history"
          description: Include data for related objects of the specified type.
      responses:
        200:
          description: An array of objects.
          schema:
            type: array
            items:
              $ref: '#/definitions/SMS_recipient'
    post:
      summary: "Create a new sms recipient."
      description: "Create a single sms recipient object."
      tags:
        - SMS recipients
      parameters:
        - name: "SMS recipient"
          in: body
          description: "The sms recipient data to insert."
          required: true
          schema:
            $ref: '#/definitions/SMS_recipient'
      responses:
        201:
          description: A JSON representation of the created object.
          schema:
            $ref: '#/definitions/SMS_recipient'
        400:
          description: Bad request.
          schema:
            $ref: '#/definitions/Error'
  /smsrecipient/{id}/:
    get:
      summary: "Retrieve a sms recipient."
      description: "Retrieves a single sms recipient object having the specified id."
      tags:
        - SMS recipients
      parameters:
        - name: id
          in: path
          description: "The id of the sms recipient to retrieve."
          required: true
          type: integer
        - name: _embed
          in: query
          required: false
          type: array
          collectionFormat: multi
          items:
            enum:
              - "smssendout"
              - "customer"
              - "installation"
              - "helpdesk"
              - "campaign"
              - "history"
          description: Include data for related objects of the specified type.
      responses:
        200:
          description: A JSON representation of the requested object.
          schema:
            $ref: '#/definitions/SMS_recipient'
        404:
          description: Limeobject not found.
    delete:
      summary: "Delete a sms recipient."
      description: "Deletes a single sms recipient object having the specified id."
      tags:
        - SMS recipients
      parameters:
        - name: id
          in: path
          description: The id of the object to delete.
          required: true
          type: integer
      responses:
        204:
          description: Success. No content returned.
        404:
          description: Limeobject not found.
    put:
      summary: "Update an existing sms recipient."
      description: "Updates a single sms recipient object having the specified id. Note that partial objects (i.e. without all properties set) can be specified."
      tags:
        - SMS recipients
      parameters:
        - name: id
          in: path
          description: "The id of the sms recipient to update."
          required: true
          type: integer
        - name: "SMS recipient"
          in: body
          description: "The SMS recipient data to update."
          required: true
          schema:
            $ref: '#/definitions/SMS_recipient'
      responses:
        200:
          description: A JSON representation of the updated (full) object.
          schema:
            $ref: '#/definitions/SMS_recipient'
        404:
          description: Limeobject not found.
  /smsrecipient/{id}/smssendout/:
    get:
      summary: "Retrieve a related sms sendout."
      description: "Retrieves the related sms sendout object, if any."
      tags:
        - SMS recipients
      parameters:
        - name: id
          in: path
          description: "The id of the parent sms recipient."
          required: true
          type: integer
      responses:
        200:
          description: A JSON representation of the requested object.
          schema:
            $ref: '#/definitions/SMS_sendout'
        404:
          description: "No sms sendout object has been set for this relation."
  /smsrecipient/{id}/customer/:
    get:
      summary: "Retrieve a related ."
      description: "Retrieves the related  object, if any."
      tags:
        - SMS recipients
      parameters:
        - name: id
          in: path
          description: "The id of the parent sms recipient."
          required: true
          type: integer
      responses:
        200:
          description: A JSON representation of the requested object.
          schema:
            $ref: '#/definitions/customer'
        404:
          description: "No  object has been set for this relation."
  /smsrecipient/{id}/installation/:
    get:
      summary: "Retrieve a related ."
      description: "Retrieves the related  object, if any."
      tags:
        - SMS recipients
      parameters:
        - name: id
          in: path
          description: "The id of the parent sms recipient."
          required: true
          type: integer
      responses:
        200:
          description: A JSON representation of the requested object.
          schema:
            $ref: '#/definitions/installation'
        404:
          description: "No  object has been set for this relation."
  /smsrecipient/{id}/helpdesk/:
    get:
      summary: "Retrieve a related ."
      description: "Retrieves the related  object, if any."
      tags:
        - SMS recipients
      parameters:
        - name: id
          in: path
          description: "The id of the parent sms recipient."
          required: true
          type: integer
      responses:
        200:
          description: A JSON representation of the requested object.
          schema:
            $ref: '#/definitions/helpdesk'
        404:
          description: "No  object has been set for this relation."
  /smsrecipient/{id}/campaign/:
    get:
      summary: "Retrieve a related kampanj."
      description: "Retrieves the related kampanj object, if any."
      tags:
        - SMS recipients
      parameters:
        - name: id
          in: path
          description: "The id of the parent sms recipient."
          required: true
          type: integer
      responses:
        200:
          description: A JSON representation of the requested object.
          schema:
            $ref: '#/definitions/Kampanj'
        404:
          description: "No kampanj object has been set for this relation."
  /smsrecipient/{id}/history/:
    get:
      summary: "Retrieve a related ."
      description: "Retrieves the related  object, if any."
      tags:
        - SMS recipients
      parameters:
        - name: id
          in: path
          description: "The id of the parent sms recipient."
          required: true
          type: integer
      responses:
        200:
          description: A JSON representation of the requested object.
          schema:
            $ref: '#/definitions/history'
        404:
          description: "No  object has been set for this relation."
  /checklist_item/:
    get:
      summary: "Retrieve "
      description: "Retrieves a paginated list of checklist_item objects. The result contains all available properties."
      tags:
        - checklist_item
      parameters:
        - name: _limit
          in: query
          type: integer
          description: The maximum number of items to return.
          minimum: 1
          maximum: 50
          default: 10
        - name: _sort
          in: query
          type: string
          description: Name of a (single) property to sort on. To sort in descending order, prefix with a '-' sign.
        - name: _embed
          in: query
          required: false
          type: array
          collectionFormat: multi
          items:
            enum:
              - "coworker"
              - "checklist_item_previous"
              - "history"
              - "helpdesk"
          description: Include data for related objects of the specified type.
      responses:
        200:
          description: An array of objects.
          schema:
            type: array
            items:
              $ref: '#/definitions/checklist_item'
    post:
      summary: "Create a new checklist_item."
      description: "Create a single checklist_item object."
      tags:
        - checklist_item
      parameters:
        - name: "checklist_item"
          in: body
          description: "The checklist_item data to insert."
          required: true
          schema:
            $ref: '#/definitions/checklist_item'
      responses:
        201:
          description: A JSON representation of the created object.
          schema:
            $ref: '#/definitions/checklist_item'
        400:
          description: Bad request.
          schema:
            $ref: '#/definitions/Error'
  /checklist_item/{id}/:
    get:
      summary: "Retrieve a checklist_item."
      description: "Retrieves a single checklist_item object having the specified id."
      tags:
        - checklist_item
      parameters:
        - name: id
          in: path
          description: "The id of the checklist_item to retrieve."
          required: true
          type: integer
        - name: _embed
          in: query
          required: false
          type: array
          collectionFormat: multi
          items:
            enum:
              - "coworker"
              - "checklist_item_previous"
              - "history"
              - "helpdesk"
          description: Include data for related objects of the specified type.
      responses:
        200:
          description: A JSON representation of the requested object.
          schema:
            $ref: '#/definitions/checklist_item'
        404:
          description: Limeobject not found.
    delete:
      summary: "Delete a checklist_item."
      description: "Deletes a single checklist_item object having the specified id."
      tags:
        - checklist_item
      parameters:
        - name: id
          in: path
          description: The id of the object to delete.
          required: true
          type: integer
      responses:
        204:
          description: Success. No content returned.
        404:
          description: Limeobject not found.
    put:
      summary: "Update an existing checklist_item."
      description: "Updates a single checklist_item object having the specified id. Note that partial objects (i.e. without all properties set) can be specified."
      tags:
        - checklist_item
      parameters:
        - name: id
          in: path
          description: "The id of the checklist_item to update."
          required: true
          type: integer
        - name: "checklist_item"
          in: body
          description: "The checklist_item data to update."
          required: true
          schema:
            $ref: '#/definitions/checklist_item'
      responses:
        200:
          description: A JSON representation of the updated (full) object.
          schema:
            $ref: '#/definitions/checklist_item'
        404:
          description: Limeobject not found.
  /checklist_item/{id}/coworker/:
    get:
      summary: "Retrieve a related ."
      description: "Retrieves the related  object, if any."
      tags:
        - checklist_item
      parameters:
        - name: id
          in: path
          description: "The id of the parent checklist_item."
          required: true
          type: integer
      responses:
        200:
          description: A JSON representation of the requested object.
          schema:
            $ref: '#/definitions/coworker'
        404:
          description: "No  object has been set for this relation."
  /checklist_item/{id}/checklist_item_previous/:
    get:
      summary: "Retrieve a related checklist_item."
      description: "Retrieves the related checklist_item object, if any."
      tags:
        - checklist_item
      parameters:
        - name: id
          in: path
          description: "The id of the parent checklist_item."
          required: true
          type: integer
      responses:
        200:
          description: A JSON representation of the requested object.
          schema:
            $ref: '#/definitions/checklist_item'
        404:
          description: "No checklist_item object has been set for this relation."
  /checklist_item/{id}/history/:
    get:
      summary: "Retrieve a related ."
      description: "Retrieves the related  object, if any."
      tags:
        - checklist_item
      parameters:
        - name: id
          in: path
          description: "The id of the parent checklist_item."
          required: true
          type: integer
      responses:
        200:
          description: A JSON representation of the requested object.
          schema:
            $ref: '#/definitions/history'
        404:
          description: "No  object has been set for this relation."
  /checklist_item/{id}/helpdesk/:
    get:
      summary: "Retrieve a related ."
      description: "Retrieves the related  object, if any."
      tags:
        - checklist_item
      parameters:
        - name: id
          in: path
          description: "The id of the parent checklist_item."
          required: true
          type: integer
      responses:
        200:
          description: A JSON representation of the requested object.
          schema:
            $ref: '#/definitions/helpdesk'
        404:
          description: "No  object has been set for this relation."
  /checklist_item/{id}/checklist_items_next/:
    get:
      summary: "Retrieve related ."
      description: "Retrieves a paginated list of checklist_item objects related to a specific checklist_item. The result contains all available properties."
      tags:
        - checklist_item
      parameters:
        - name: id
          in: path
          description: "The id of the parent checklist_item."
          required: true
          type: integer
        - name: _limit
          in: query
          type: integer
          description: The maximum number of items to return.
          minimum: 1
          maximum: 50
          default: 10
        - name: _sort
          in: query
          type: string
          description: Name of a (single) property to sort on. To sort in descending order, prefix with a '-' sign.
      responses:
        200:
          description: An array of objects.
          schema:
            type: array
            items:
              $ref: '#/definitions/checklist_item'
        404:
          description: Limeobject not found.
  /debitrequest/:
    get:
      summary: "Retrieve "
      description: "Retrieves a paginated list of debitrequest objects. The result contains all available properties."
      tags:
        - debitrequest
      parameters:
        - name: _limit
          in: query
          type: integer
          description: The maximum number of items to return.
          minimum: 1
          maximum: 50
          default: 10
        - name: _sort
          in: query
          type: string
          description: Name of a (single) property to sort on. To sort in descending order, prefix with a '-' sign.
        - name: _embed
          in: query
          required: false
          type: array
          collectionFormat: multi
          items:
            enum:
              - "customer"
              - "helpdesk"
              - "installation"
              - "serviceprotocol"
          description: Include data for related objects of the specified type.
      responses:
        200:
          description: An array of objects.
          schema:
            type: array
            items:
              $ref: '#/definitions/debitrequest'
    post:
      summary: "Create a new debitrequest."
      description: "Create a single debitrequest object."
      tags:
        - debitrequest
      parameters:
        - name: "debitrequest"
          in: body
          description: "The debitrequest data to insert."
          required: true
          schema:
            $ref: '#/definitions/debitrequest'
      responses:
        201:
          description: A JSON representation of the created object.
          schema:
            $ref: '#/definitions/debitrequest'
        400:
          description: Bad request.
          schema:
            $ref: '#/definitions/Error'
  /debitrequest/{id}/:
    get:
      summary: "Retrieve a debitrequest."
      description: "Retrieves a single debitrequest object having the specified id."
      tags:
        - debitrequest
      parameters:
        - name: id
          in: path
          description: "The id of the debitrequest to retrieve."
          required: true
          type: integer
        - name: _embed
          in: query
          required: false
          type: array
          collectionFormat: multi
          items:
            enum:
              - "customer"
              - "helpdesk"
              - "installation"
              - "serviceprotocol"
          description: Include data for related objects of the specified type.
      responses:
        200:
          description: A JSON representation of the requested object.
          schema:
            $ref: '#/definitions/debitrequest'
        404:
          description: Limeobject not found.
    delete:
      summary: "Delete a debitrequest."
      description: "Deletes a single debitrequest object having the specified id."
      tags:
        - debitrequest
      parameters:
        - name: id
          in: path
          description: The id of the object to delete.
          required: true
          type: integer
      responses:
        204:
          description: Success. No content returned.
        404:
          description: Limeobject not found.
    put:
      summary: "Update an existing debitrequest."
      description: "Updates a single debitrequest object having the specified id. Note that partial objects (i.e. without all properties set) can be specified."
      tags:
        - debitrequest
      parameters:
        - name: id
          in: path
          description: "The id of the debitrequest to update."
          required: true
          type: integer
        - name: "debitrequest"
          in: body
          description: "The debitrequest data to update."
          required: true
          schema:
            $ref: '#/definitions/debitrequest'
      responses:
        200:
          description: A JSON representation of the updated (full) object.
          schema:
            $ref: '#/definitions/debitrequest'
        404:
          description: Limeobject not found.
  /debitrequest/{id}/customer/:
    get:
      summary: "Retrieve a related ."
      description: "Retrieves the related  object, if any."
      tags:
        - debitrequest
      parameters:
        - name: id
          in: path
          description: "The id of the parent debitrequest."
          required: true
          type: integer
      responses:
        200:
          description: A JSON representation of the requested object.
          schema:
            $ref: '#/definitions/customer'
        404:
          description: "No  object has been set for this relation."
  /debitrequest/{id}/helpdesk/:
    get:
      summary: "Retrieve a related ."
      description: "Retrieves the related  object, if any."
      tags:
        - debitrequest
      parameters:
        - name: id
          in: path
          description: "The id of the parent debitrequest."
          required: true
          type: integer
      responses:
        200:
          description: A JSON representation of the requested object.
          schema:
            $ref: '#/definitions/helpdesk'
        404:
          description: "No  object has been set for this relation."
  /debitrequest/{id}/installation/:
    get:
      summary: "Retrieve a related ."
      description: "Retrieves the related  object, if any."
      tags:
        - debitrequest
      parameters:
        - name: id
          in: path
          description: "The id of the parent debitrequest."
          required: true
          type: integer
      responses:
        200:
          description: A JSON representation of the requested object.
          schema:
            $ref: '#/definitions/installation'
        404:
          description: "No  object has been set for this relation."
  /debitrequest/{id}/serviceprotocol/:
    get:
      summary: "Retrieve a related serviceprotocol."
      description: "Retrieves the related serviceprotocol object, if any."
      tags:
        - debitrequest
      parameters:
        - name: id
          in: path
          description: "The id of the parent debitrequest."
          required: true
          type: integer
      responses:
        200:
          description: A JSON representation of the requested object.
          schema:
            $ref: '#/definitions/serviceprotocol'
        404:
          description: "No serviceprotocol object has been set for this relation."
  /serviceprotocol/:
    get:
      summary: "Retrieve "
      description: "Retrieves a paginated list of serviceprotocol objects. The result contains all available properties."
      tags:
        - serviceprotocol
      parameters:
        - name: _limit
          in: query
          type: integer
          description: The maximum number of items to return.
          minimum: 1
          maximum: 50
          default: 10
        - name: _sort
          in: query
          type: string
          description: Name of a (single) property to sort on. To sort in descending order, prefix with a '-' sign.
        - name: _embed
          in: query
          required: false
          type: array
          collectionFormat: multi
          items:
            enum:
              - "helpdesk"
              - "customer"
              - "coworker"
              - "installation"
          description: Include data for related objects of the specified type.
      responses:
        200:
          description: An array of objects.
          schema:
            type: array
            items:
              $ref: '#/definitions/serviceprotocol'
    post:
      summary: "Create a new serviceprotocol."
      description: "Create a single serviceprotocol object."
      tags:
        - serviceprotocol
      parameters:
        - name: "serviceprotocol"
          in: body
          description: "The serviceprotocol data to insert."
          required: true
          schema:
            $ref: '#/definitions/serviceprotocol'
      responses:
        201:
          description: A JSON representation of the created object.
          schema:
            $ref: '#/definitions/serviceprotocol'
        400:
          description: Bad request.
          schema:
            $ref: '#/definitions/Error'
  /serviceprotocol/{id}/:
    get:
      summary: "Retrieve a serviceprotocol."
      description: "Retrieves a single serviceprotocol object having the specified id."
      tags:
        - serviceprotocol
      parameters:
        - name: id
          in: path
          description: "The id of the serviceprotocol to retrieve."
          required: true
          type: integer
        - name: _embed
          in: query
          required: false
          type: array
          collectionFormat: multi
          items:
            enum:
              - "helpdesk"
              - "customer"
              - "coworker"
              - "installation"
          description: Include data for related objects of the specified type.
      responses:
        200:
          description: A JSON representation of the requested object.
          schema:
            $ref: '#/definitions/serviceprotocol'
        404:
          description: Limeobject not found.
    delete:
      summary: "Delete a serviceprotocol."
      description: "Deletes a single serviceprotocol object having the specified id."
      tags:
        - serviceprotocol
      parameters:
        - name: id
          in: path
          description: The id of the object to delete.
          required: true
          type: integer
      responses:
        204:
          description: Success. No content returned.
        404:
          description: Limeobject not found.
    put:
      summary: "Update an existing serviceprotocol."
      description: "Updates a single serviceprotocol object having the specified id. Note that partial objects (i.e. without all properties set) can be specified."
      tags:
        - serviceprotocol
      parameters:
        - name: id
          in: path
          description: "The id of the serviceprotocol to update."
          required: true
          type: integer
        - name: "serviceprotocol"
          in: body
          description: "The serviceprotocol data to update."
          required: true
          schema:
            $ref: '#/definitions/serviceprotocol'
      responses:
        200:
          description: A JSON representation of the updated (full) object.
          schema:
            $ref: '#/definitions/serviceprotocol'
        404:
          description: Limeobject not found.
  /serviceprotocol/{id}/helpdesk/:
    get:
      summary: "Retrieve a related ."
      description: "Retrieves the related  object, if any."
      tags:
        - serviceprotocol
      parameters:
        - name: id
          in: path
          description: "The id of the parent serviceprotocol."
          required: true
          type: integer
      responses:
        200:
          description: A JSON representation of the requested object.
          schema:
            $ref: '#/definitions/helpdesk'
        404:
          description: "No  object has been set for this relation."
  /serviceprotocol/{id}/customer/:
    get:
      summary: "Retrieve a related ."
      description: "Retrieves the related  object, if any."
      tags:
        - serviceprotocol
      parameters:
        - name: id
          in: path
          description: "The id of the parent serviceprotocol."
          required: true
          type: integer
      responses:
        200:
          description: A JSON representation of the requested object.
          schema:
            $ref: '#/definitions/customer'
        404:
          description: "No  object has been set for this relation."
  /serviceprotocol/{id}/coworker/:
    get:
      summary: "Retrieve a related ."
      description: "Retrieves the related  object, if any."
      tags:
        - serviceprotocol
      parameters:
        - name: id
          in: path
          description: "The id of the parent serviceprotocol."
          required: true
          type: integer
      responses:
        200:
          description: A JSON representation of the requested object.
          schema:
            $ref: '#/definitions/coworker'
        404:
          description: "No  object has been set for this relation."
  /serviceprotocol/{id}/installation/:
    get:
      summary: "Retrieve a related ."
      description: "Retrieves the related  object, if any."
      tags:
        - serviceprotocol
      parameters:
        - name: id
          in: path
          description: "The id of the parent serviceprotocol."
          required: true
          type: integer
      responses:
        200:
          description: A JSON representation of the requested object.
          schema:
            $ref: '#/definitions/installation'
        404:
          description: "No  object has been set for this relation."
  /serviceprotocol/{id}/debitrequest/:
    get:
      summary: "Retrieve related ."
      description: "Retrieves a paginated list of debitrequest objects related to a specific serviceprotocol. The result contains all available properties."
      tags:
        - serviceprotocol
      parameters:
        - name: id
          in: path
          description: "The id of the parent serviceprotocol."
          required: true
          type: integer
        - name: _limit
          in: query
          type: integer
          description: The maximum number of items to return.
          minimum: 1
          maximum: 50
          default: 10
        - name: _sort
          in: query
          type: string
          description: Name of a (single) property to sort on. To sort in descending order, prefix with a '-' sign.
      responses:
        200:
          description: An array of objects.
          schema:
            type: array
            items:
              $ref: '#/definitions/debitrequest'
        404:
          description: Limeobject not found.
  /article/:
    get:
      summary: "Retrieve "
      description: "Retrieves a paginated list of article objects. The result contains all available properties."
      tags:
        - article
      parameters:
        - name: _limit
          in: query
          type: integer
          description: The maximum number of items to return.
          minimum: 1
          maximum: 50
          default: 10
        - name: _sort
          in: query
          type: string
          description: Name of a (single) property to sort on. To sort in descending order, prefix with a '-' sign.
      responses:
        200:
          description: An array of objects.
          schema:
            type: array
            items:
              $ref: '#/definitions/article'
    post:
      summary: "Create a new article."
      description: "Create a single article object."
      tags:
        - article
      parameters:
        - name: "article"
          in: body
          description: "The article data to insert."
          required: true
          schema:
            $ref: '#/definitions/article'
      responses:
        201:
          description: A JSON representation of the created object.
          schema:
            $ref: '#/definitions/article'
        400:
          description: Bad request.
          schema:
            $ref: '#/definitions/Error'
  /article/{id}/:
    get:
      summary: "Retrieve a article."
      description: "Retrieves a single article object having the specified id."
      tags:
        - article
      parameters:
        - name: id
          in: path
          description: "The id of the article to retrieve."
          required: true
          type: integer
      responses:
        200:
          description: A JSON representation of the requested object.
          schema:
            $ref: '#/definitions/article'
        404:
          description: Limeobject not found.
    delete:
      summary: "Delete a article."
      description: "Deletes a single article object having the specified id."
      tags:
        - article
      parameters:
        - name: id
          in: path
          description: The id of the object to delete.
          required: true
          type: integer
      responses:
        204:
          description: Success. No content returned.
        404:
          description: Limeobject not found.
    put:
      summary: "Update an existing article."
      description: "Updates a single article object having the specified id. Note that partial objects (i.e. without all properties set) can be specified."
      tags:
        - article
      parameters:
        - name: id
          in: path
          description: "The id of the article to update."
          required: true
          type: integer
        - name: "article"
          in: body
          description: "The article data to update."
          required: true
          schema:
            $ref: '#/definitions/article'
      responses:
        200:
          description: A JSON representation of the updated (full) object.
          schema:
            $ref: '#/definitions/article'
        404:
          description: Limeobject not found.
  /consent/:
    get:
      summary: "Retrieve legal base/consents"
      description: "Retrieves a paginated list of legal base/consent objects. The result contains all available properties."
      tags:
        - Legal base/consents
      parameters:
        - name: _limit
          in: query
          type: integer
          description: The maximum number of items to return.
          minimum: 1
          maximum: 50
          default: 10
        - name: _sort
          in: query
          type: string
          description: Name of a (single) property to sort on. To sort in descending order, prefix with a '-' sign.
        - name: _embed
          in: query
          required: false
          type: array
          collectionFormat: multi
          items:
            enum:
              - "consenttype"
              - "person"
              - "customer"
          description: Include data for related objects of the specified type.
      responses:
        200:
          description: An array of objects.
          schema:
            type: array
            items:
              $ref: '#/definitions/Legal_base_consent'
    post:
      summary: "Create a new legal base/consent."
      description: "Create a single legal base/consent object."
      tags:
        - Legal base/consents
      parameters:
        - name: "Legal base/consent"
          in: body
          description: "The legal base/consent data to insert."
          required: true
          schema:
            $ref: '#/definitions/Legal_base_consent'
      responses:
        201:
          description: A JSON representation of the created object.
          schema:
            $ref: '#/definitions/Legal_base_consent'
        400:
          description: Bad request.
          schema:
            $ref: '#/definitions/Error'
  /consent/{id}/:
    get:
      summary: "Retrieve a legal base/consent."
      description: "Retrieves a single legal base/consent object having the specified id."
      tags:
        - Legal base/consents
      parameters:
        - name: id
          in: path
          description: "The id of the legal base/consent to retrieve."
          required: true
          type: integer
        - name: _embed
          in: query
          required: false
          type: array
          collectionFormat: multi
          items:
            enum:
              - "consenttype"
              - "person"
              - "customer"
          description: Include data for related objects of the specified type.
      responses:
        200:
          description: A JSON representation of the requested object.
          schema:
            $ref: '#/definitions/Legal_base_consent'
        404:
          description: Limeobject not found.
    delete:
      summary: "Delete a legal base/consent."
      description: "Deletes a single legal base/consent object having the specified id."
      tags:
        - Legal base/consents
      parameters:
        - name: id
          in: path
          description: The id of the object to delete.
          required: true
          type: integer
      responses:
        204:
          description: Success. No content returned.
        404:
          description: Limeobject not found.
    put:
      summary: "Update an existing legal base/consent."
      description: "Updates a single legal base/consent object having the specified id. Note that partial objects (i.e. without all properties set) can be specified."
      tags:
        - Legal base/consents
      parameters:
        - name: id
          in: path
          description: "The id of the legal base/consent to update."
          required: true
          type: integer
        - name: "Legal base/consent"
          in: body
          description: "The Legal base/consent data to update."
          required: true
          schema:
            $ref: '#/definitions/Legal_base_consent'
      responses:
        200:
          description: A JSON representation of the updated (full) object.
          schema:
            $ref: '#/definitions/Legal_base_consent'
        404:
          description: Limeobject not found.
  /consent/{id}/consenttype/:
    get:
      summary: "Retrieve a related consent type."
      description: "Retrieves the related consent type object, if any."
      tags:
        - Legal base/consents
      parameters:
        - name: id
          in: path
          description: "The id of the parent legal base/consent."
          required: true
          type: integer
      responses:
        200:
          description: A JSON representation of the requested object.
          schema:
            $ref: '#/definitions/Consent_type'
        404:
          description: "No consent type object has been set for this relation."
  /consent/{id}/person/:
    get:
      summary: "Retrieve a related ."
      description: "Retrieves the related  object, if any."
      tags:
        - Legal base/consents
      parameters:
        - name: id
          in: path
          description: "The id of the parent legal base/consent."
          required: true
          type: integer
      responses:
        200:
          description: A JSON representation of the requested object.
          schema:
            $ref: '#/definitions/person'
        404:
          description: "No  object has been set for this relation."
  /consent/{id}/customer/:
    get:
      summary: "Retrieve a related ."
      description: "Retrieves the related  object, if any."
      tags:
        - Legal base/consents
      parameters:
        - name: id
          in: path
          description: "The id of the parent legal base/consent."
          required: true
          type: integer
      responses:
        200:
          description: A JSON representation of the requested object.
          schema:
            $ref: '#/definitions/customer'
        404:
          description: "No  object has been set for this relation."
  /soschecklistactivity/:
    get:
      summary: "Retrieve "
      description: "Retrieves a paginated list of soschecklistactivity objects. The result contains all available properties."
      tags:
        - soschecklistactivity
      parameters:
        - name: _limit
          in: query
          type: integer
          description: The maximum number of items to return.
          minimum: 1
          maximum: 50
          default: 10
        - name: _sort
          in: query
          type: string
          description: Name of a (single) property to sort on. To sort in descending order, prefix with a '-' sign.
        - name: _embed
          in: query
          required: false
          type: array
          collectionFormat: multi
          items:
            enum:
              - "checklistactivity"
              - "helpdesk"
              - "checklistactivityoption"
              - "office"
          description: Include data for related objects of the specified type.
      responses:
        200:
          description: An array of objects.
          schema:
            type: array
            items:
              $ref: '#/definitions/soschecklistactivity'
    post:
      summary: "Create a new soschecklistactivity."
      description: "Create a single soschecklistactivity object."
      tags:
        - soschecklistactivity
      parameters:
        - name: "soschecklistactivity"
          in: body
          description: "The soschecklistactivity data to insert."
          required: true
          schema:
            $ref: '#/definitions/soschecklistactivity'
      responses:
        201:
          description: A JSON representation of the created object.
          schema:
            $ref: '#/definitions/soschecklistactivity'
        400:
          description: Bad request.
          schema:
            $ref: '#/definitions/Error'
  /soschecklistactivity/{id}/:
    get:
      summary: "Retrieve a soschecklistactivity."
      description: "Retrieves a single soschecklistactivity object having the specified id."
      tags:
        - soschecklistactivity
      parameters:
        - name: id
          in: path
          description: "The id of the soschecklistactivity to retrieve."
          required: true
          type: integer
        - name: _embed
          in: query
          required: false
          type: array
          collectionFormat: multi
          items:
            enum:
              - "checklistactivity"
              - "helpdesk"
              - "checklistactivityoption"
              - "office"
          description: Include data for related objects of the specified type.
      responses:
        200:
          description: A JSON representation of the requested object.
          schema:
            $ref: '#/definitions/soschecklistactivity'
        404:
          description: Limeobject not found.
    delete:
      summary: "Delete a soschecklistactivity."
      description: "Deletes a single soschecklistactivity object having the specified id."
      tags:
        - soschecklistactivity
      parameters:
        - name: id
          in: path
          description: The id of the object to delete.
          required: true
          type: integer
      responses:
        204:
          description: Success. No content returned.
        404:
          description: Limeobject not found.
    put:
      summary: "Update an existing soschecklistactivity."
      description: "Updates a single soschecklistactivity object having the specified id. Note that partial objects (i.e. without all properties set) can be specified."
      tags:
        - soschecklistactivity
      parameters:
        - name: id
          in: path
          description: "The id of the soschecklistactivity to update."
          required: true
          type: integer
        - name: "soschecklistactivity"
          in: body
          description: "The soschecklistactivity data to update."
          required: true
          schema:
            $ref: '#/definitions/soschecklistactivity'
      responses:
        200:
          description: A JSON representation of the updated (full) object.
          schema:
            $ref: '#/definitions/soschecklistactivity'
        404:
          description: Limeobject not found.
  /soschecklistactivity/{id}/checklistactivity/:
    get:
      summary: "Retrieve a related checklist activity."
      description: "Retrieves the related checklist activity object, if any."
      tags:
        - soschecklistactivity
      parameters:
        - name: id
          in: path
          description: "The id of the parent soschecklistactivity."
          required: true
          type: integer
      responses:
        200:
          description: A JSON representation of the requested object.
          schema:
            $ref: '#/definitions/Checklist_Activity'
        404:
          description: "No checklist activity object has been set for this relation."
  /soschecklistactivity/{id}/helpdesk/:
    get:
      summary: "Retrieve a related ."
      description: "Retrieves the related  object, if any."
      tags:
        - soschecklistactivity
      parameters:
        - name: id
          in: path
          description: "The id of the parent soschecklistactivity."
          required: true
          type: integer
      responses:
        200:
          description: A JSON representation of the requested object.
          schema:
            $ref: '#/definitions/helpdesk'
        404:
          description: "No  object has been set for this relation."
  /soschecklistactivity/{id}/checklistactivityoption/:
    get:
      summary: "Retrieve a related checklist activity."
      description: "Retrieves the related checklist activity object, if any."
      tags:
        - soschecklistactivity
      parameters:
        - name: id
          in: path
          description: "The id of the parent soschecklistactivity."
          required: true
          type: integer
      responses:
        200:
          description: A JSON representation of the requested object.
          schema:
            $ref: '#/definitions/Checklist_Activity'
        404:
          description: "No checklist activity object has been set for this relation."
  /soschecklistactivity/{id}/office/:
    get:
      summary: "Retrieve a related office."
      description: "Retrieves the related office object, if any."
      tags:
        - soschecklistactivity
      parameters:
        - name: id
          in: path
          description: "The id of the parent soschecklistactivity."
          required: true
          type: integer
      responses:
        200:
          description: A JSON representation of the requested object.
          schema:
            $ref: '#/definitions/Office'
        404:
          description: "No office object has been set for this relation."
  /consenttype/:
    get:
      summary: "Retrieve consent type"
      description: "Retrieves a paginated list of consent type objects. The result contains all available properties."
      tags:
        - Consent type
      parameters:
        - name: _limit
          in: query
          type: integer
          description: The maximum number of items to return.
          minimum: 1
          maximum: 50
          default: 10
        - name: _sort
          in: query
          type: string
          description: Name of a (single) property to sort on. To sort in descending order, prefix with a '-' sign.
      responses:
        200:
          description: An array of objects.
          schema:
            type: array
            items:
              $ref: '#/definitions/Consent_type'
    post:
      summary: "Create a new consent type."
      description: "Create a single consent type object."
      tags:
        - Consent type
      parameters:
        - name: "Consent type"
          in: body
          description: "The consent type data to insert."
          required: true
          schema:
            $ref: '#/definitions/Consent_type'
      responses:
        201:
          description: A JSON representation of the created object.
          schema:
            $ref: '#/definitions/Consent_type'
        400:
          description: Bad request.
          schema:
            $ref: '#/definitions/Error'
  /consenttype/{id}/:
    get:
      summary: "Retrieve a consent type."
      description: "Retrieves a single consent type object having the specified id."
      tags:
        - Consent type
      parameters:
        - name: id
          in: path
          description: "The id of the consent type to retrieve."
          required: true
          type: integer
      responses:
        200:
          description: A JSON representation of the requested object.
          schema:
            $ref: '#/definitions/Consent_type'
        404:
          description: Limeobject not found.
    delete:
      summary: "Delete a consent type."
      description: "Deletes a single consent type object having the specified id."
      tags:
        - Consent type
      parameters:
        - name: id
          in: path
          description: The id of the object to delete.
          required: true
          type: integer
      responses:
        204:
          description: Success. No content returned.
        404:
          description: Limeobject not found.
    put:
      summary: "Update an existing consent type."
      description: "Updates a single consent type object having the specified id. Note that partial objects (i.e. without all properties set) can be specified."
      tags:
        - Consent type
      parameters:
        - name: id
          in: path
          description: "The id of the consent type to update."
          required: true
          type: integer
        - name: "Consent type"
          in: body
          description: "The Consent type data to update."
          required: true
          schema:
            $ref: '#/definitions/Consent_type'
      responses:
        200:
          description: A JSON representation of the updated (full) object.
          schema:
            $ref: '#/definitions/Consent_type'
        404:
          description: Limeobject not found.
  /consenttype/{id}/consent/:
    get:
      summary: "Retrieve related legal base/consents."
      description: "Retrieves a paginated list of legal base/consent objects related to a specific consent type. The result contains all available properties."
      tags:
        - Consent type
      parameters:
        - name: id
          in: path
          description: "The id of the parent consent type."
          required: true
          type: integer
        - name: _limit
          in: query
          type: integer
          description: The maximum number of items to return.
          minimum: 1
          maximum: 50
          default: 10
        - name: _sort
          in: query
          type: string
          description: Name of a (single) property to sort on. To sort in descending order, prefix with a '-' sign.
      responses:
        200:
          description: An array of objects.
          schema:
            type: array
            items:
              $ref: '#/definitions/Legal_base_consent'
        404:
          description: Limeobject not found.
  /infotiles/:
    get:
      summary: "Retrieve infotiles"
      description: "Retrieves a paginated list of infotile objects. The result contains all available properties."
      tags:
        - InfoTiles
      parameters:
        - name: _limit
          in: query
          type: integer
          description: The maximum number of items to return.
          minimum: 1
          maximum: 50
          default: 10
        - name: _sort
          in: query
          type: string
          description: Name of a (single) property to sort on. To sort in descending order, prefix with a '-' sign.
        - name: _embed
          in: query
          required: false
          type: array
          collectionFormat: multi
          items:
            enum:
              - "coworker"
              - "office"
          description: Include data for related objects of the specified type.
      responses:
        200:
          description: An array of objects.
          schema:
            type: array
            items:
              $ref: '#/definitions/InfoTile'
    post:
      summary: "Create a new infotile."
      description: "Create a single infotile object."
      tags:
        - InfoTiles
      parameters:
        - name: "InfoTile"
          in: body
          description: "The infotile data to insert."
          required: true
          schema:
            $ref: '#/definitions/InfoTile'
      responses:
        201:
          description: A JSON representation of the created object.
          schema:
            $ref: '#/definitions/InfoTile'
        400:
          description: Bad request.
          schema:
            $ref: '#/definitions/Error'
  /infotiles/{id}/:
    get:
      summary: "Retrieve a infotile."
      description: "Retrieves a single infotile object having the specified id."
      tags:
        - InfoTiles
      parameters:
        - name: id
          in: path
          description: "The id of the infotile to retrieve."
          required: true
          type: integer
        - name: _embed
          in: query
          required: false
          type: array
          collectionFormat: multi
          items:
            enum:
              - "coworker"
              - "office"
          description: Include data for related objects of the specified type.
      responses:
        200:
          description: A JSON representation of the requested object.
          schema:
            $ref: '#/definitions/InfoTile'
        404:
          description: Limeobject not found.
    delete:
      summary: "Delete a infotile."
      description: "Deletes a single infotile object having the specified id."
      tags:
        - InfoTiles
      parameters:
        - name: id
          in: path
          description: The id of the object to delete.
          required: true
          type: integer
      responses:
        204:
          description: Success. No content returned.
        404:
          description: Limeobject not found.
    put:
      summary: "Update an existing infotile."
      description: "Updates a single infotile object having the specified id. Note that partial objects (i.e. without all properties set) can be specified."
      tags:
        - InfoTiles
      parameters:
        - name: id
          in: path
          description: "The id of the infotile to update."
          required: true
          type: integer
        - name: "InfoTile"
          in: body
          description: "The InfoTile data to update."
          required: true
          schema:
            $ref: '#/definitions/InfoTile'
      responses:
        200:
          description: A JSON representation of the updated (full) object.
          schema:
            $ref: '#/definitions/InfoTile'
        404:
          description: Limeobject not found.
  /infotiles/{id}/coworker/:
    get:
      summary: "Retrieve a related ."
      description: "Retrieves the related  object, if any."
      tags:
        - InfoTiles
      parameters:
        - name: id
          in: path
          description: "The id of the parent infotile."
          required: true
          type: integer
      responses:
        200:
          description: A JSON representation of the requested object.
          schema:
            $ref: '#/definitions/coworker'
        404:
          description: "No  object has been set for this relation."
  /infotiles/{id}/office/:
    get:
      summary: "Retrieve a related office."
      description: "Retrieves the related office object, if any."
      tags:
        - InfoTiles
      parameters:
        - name: id
          in: path
          description: "The id of the parent infotile."
          required: true
          type: integer
      responses:
        200:
          description: A JSON representation of the requested object.
          schema:
            $ref: '#/definitions/Office'
        404:
          description: "No office object has been set for this relation."
  /nextstep/:
    get:
      summary: "Retrieve "
      description: "Retrieves a paginated list of nextstep objects. The result contains all available properties."
      tags:
        - nextstep
      parameters:
        - name: _limit
          in: query
          type: integer
          description: The maximum number of items to return.
          minimum: 1
          maximum: 50
          default: 10
        - name: _sort
          in: query
          type: string
          description: Name of a (single) property to sort on. To sort in descending order, prefix with a '-' sign.
        - name: _embed
          in: query
          required: false
          type: array
          collectionFormat: multi
          items:
            enum:
              - "checklistactivity"
              - "nextcheckliststep"
          description: Include data for related objects of the specified type.
      responses:
        200:
          description: An array of objects.
          schema:
            type: array
            items:
              $ref: '#/definitions/nextstep'
    post:
      summary: "Create a new nextstep."
      description: "Create a single nextstep object."
      tags:
        - nextstep
      parameters:
        - name: "nextstep"
          in: body
          description: "The nextstep data to insert."
          required: true
          schema:
            $ref: '#/definitions/nextstep'
      responses:
        201:
          description: A JSON representation of the created object.
          schema:
            $ref: '#/definitions/nextstep'
        400:
          description: Bad request.
          schema:
            $ref: '#/definitions/Error'
  /nextstep/{id}/:
    get:
      summary: "Retrieve a nextstep."
      description: "Retrieves a single nextstep object having the specified id."
      tags:
        - nextstep
      parameters:
        - name: id
          in: path
          description: "The id of the nextstep to retrieve."
          required: true
          type: integer
        - name: _embed
          in: query
          required: false
          type: array
          collectionFormat: multi
          items:
            enum:
              - "checklistactivity"
              - "nextcheckliststep"
          description: Include data for related objects of the specified type.
      responses:
        200:
          description: A JSON representation of the requested object.
          schema:
            $ref: '#/definitions/nextstep'
        404:
          description: Limeobject not found.
    delete:
      summary: "Delete a nextstep."
      description: "Deletes a single nextstep object having the specified id."
      tags:
        - nextstep
      parameters:
        - name: id
          in: path
          description: The id of the object to delete.
          required: true
          type: integer
      responses:
        204:
          description: Success. No content returned.
        404:
          description: Limeobject not found.
    put:
      summary: "Update an existing nextstep."
      description: "Updates a single nextstep object having the specified id. Note that partial objects (i.e. without all properties set) can be specified."
      tags:
        - nextstep
      parameters:
        - name: id
          in: path
          description: "The id of the nextstep to update."
          required: true
          type: integer
        - name: "nextstep"
          in: body
          description: "The nextstep data to update."
          required: true
          schema:
            $ref: '#/definitions/nextstep'
      responses:
        200:
          description: A JSON representation of the updated (full) object.
          schema:
            $ref: '#/definitions/nextstep'
        404:
          description: Limeobject not found.
  /nextstep/{id}/checklistactivity/:
    get:
      summary: "Retrieve a related checklist activity."
      description: "Retrieves the related checklist activity object, if any."
      tags:
        - nextstep
      parameters:
        - name: id
          in: path
          description: "The id of the parent nextstep."
          required: true
          type: integer
      responses:
        200:
          description: A JSON representation of the requested object.
          schema:
            $ref: '#/definitions/Checklist_Activity'
        404:
          description: "No checklist activity object has been set for this relation."
  /nextstep/{id}/nextcheckliststep/:
    get:
      summary: "Retrieve a related checklist activity."
      description: "Retrieves the related checklist activity object, if any."
      tags:
        - nextstep
      parameters:
        - name: id
          in: path
          description: "The id of the parent nextstep."
          required: true
          type: integer
      responses:
        200:
          description: A JSON representation of the requested object.
          schema:
            $ref: '#/definitions/Checklist_Activity'
        404:
          description: "No checklist activity object has been set for this relation."
  /timelog/:
    get:
      summary: "Retrieve "
      description: "Retrieves a paginated list of timelog objects. The result contains all available properties."
      tags:
        - timelog
      parameters:
        - name: _limit
          in: query
          type: integer
          description: The maximum number of items to return.
          minimum: 1
          maximum: 50
          default: 10
        - name: _sort
          in: query
          type: string
          description: Name of a (single) property to sort on. To sort in descending order, prefix with a '-' sign.
        - name: _embed
          in: query
          required: false
          type: array
          collectionFormat: multi
          items:
            enum:
              - "coworker"
              - "helpdesk"
          description: Include data for related objects of the specified type.
      responses:
        200:
          description: An array of objects.
          schema:
            type: array
            items:
              $ref: '#/definitions/timelog'
    post:
      summary: "Create a new timelog."
      description: "Create a single timelog object."
      tags:
        - timelog
      parameters:
        - name: "timelog"
          in: body
          description: "The timelog data to insert."
          required: true
          schema:
            $ref: '#/definitions/timelog'
      responses:
        201:
          description: A JSON representation of the created object.
          schema:
            $ref: '#/definitions/timelog'
        400:
          description: Bad request.
          schema:
            $ref: '#/definitions/Error'
  /timelog/{id}/:
    get:
      summary: "Retrieve a timelog."
      description: "Retrieves a single timelog object having the specified id."
      tags:
        - timelog
      parameters:
        - name: id
          in: path
          description: "The id of the timelog to retrieve."
          required: true
          type: integer
        - name: _embed
          in: query
          required: false
          type: array
          collectionFormat: multi
          items:
            enum:
              - "coworker"
              - "helpdesk"
          description: Include data for related objects of the specified type.
      responses:
        200:
          description: A JSON representation of the requested object.
          schema:
            $ref: '#/definitions/timelog'
        404:
          description: Limeobject not found.
    delete:
      summary: "Delete a timelog."
      description: "Deletes a single timelog object having the specified id."
      tags:
        - timelog
      parameters:
        - name: id
          in: path
          description: The id of the object to delete.
          required: true
          type: integer
      responses:
        204:
          description: Success. No content returned.
        404:
          description: Limeobject not found.
    put:
      summary: "Update an existing timelog."
      description: "Updates a single timelog object having the specified id. Note that partial objects (i.e. without all properties set) can be specified."
      tags:
        - timelog
      parameters:
        - name: id
          in: path
          description: "The id of the timelog to update."
          required: true
          type: integer
        - name: "timelog"
          in: body
          description: "The timelog data to update."
          required: true
          schema:
            $ref: '#/definitions/timelog'
      responses:
        200:
          description: A JSON representation of the updated (full) object.
          schema:
            $ref: '#/definitions/timelog'
        404:
          description: Limeobject not found.
  /timelog/{id}/coworker/:
    get:
      summary: "Retrieve a related ."
      description: "Retrieves the related  object, if any."
      tags:
        - timelog
      parameters:
        - name: id
          in: path
          description: "The id of the parent timelog."
          required: true
          type: integer
      responses:
        200:
          description: A JSON representation of the requested object.
          schema:
            $ref: '#/definitions/coworker'
        404:
          description: "No  object has been set for this relation."
  /timelog/{id}/helpdesk/:
    get:
      summary: "Retrieve a related ."
      description: "Retrieves the related  object, if any."
      tags:
        - timelog
      parameters:
        - name: id
          in: path
          description: "The id of the parent timelog."
          required: true
          type: integer
      responses:
        200:
          description: A JSON representation of the requested object.
          schema:
            $ref: '#/definitions/helpdesk'
        404:
          description: "No  object has been set for this relation."
  /oldchecklistactivity/:
    get:
      summary: "Retrieve "
      description: "Retrieves a paginated list of checklistactivity old objects. The result contains all available properties."
      tags:
        - oldchecklistactivity
      parameters:
        - name: _limit
          in: query
          type: integer
          description: The maximum number of items to return.
          minimum: 1
          maximum: 50
          default: 10
        - name: _sort
          in: query
          type: string
          description: Name of a (single) property to sort on. To sort in descending order, prefix with a '-' sign.
        - name: _embed
          in: query
          required: false
          type: array
          collectionFormat: multi
          items:
            enum:
              - "helpdesk"
              - "parentchecklistactivity"
              - "coworker"
          description: Include data for related objects of the specified type.
      responses:
        200:
          description: An array of objects.
          schema:
            type: array
            items:
              $ref: '#/definitions/checklistactivity_old'
    post:
      summary: "Create a new checklistactivity old."
      description: "Create a single checklistactivity old object."
      tags:
        - oldchecklistactivity
      parameters:
        - name: "checklistactivity old"
          in: body
          description: "The checklistactivity old data to insert."
          required: true
          schema:
            $ref: '#/definitions/checklistactivity_old'
      responses:
        201:
          description: A JSON representation of the created object.
          schema:
            $ref: '#/definitions/checklistactivity_old'
        400:
          description: Bad request.
          schema:
            $ref: '#/definitions/Error'
  /oldchecklistactivity/{id}/:
    get:
      summary: "Retrieve a checklistactivity old."
      description: "Retrieves a single checklistactivity old object having the specified id."
      tags:
        - oldchecklistactivity
      parameters:
        - name: id
          in: path
          description: "The id of the checklistactivity old to retrieve."
          required: true
          type: integer
        - name: _embed
          in: query
          required: false
          type: array
          collectionFormat: multi
          items:
            enum:
              - "helpdesk"
              - "parentchecklistactivity"
              - "coworker"
          description: Include data for related objects of the specified type.
      responses:
        200:
          description: A JSON representation of the requested object.
          schema:
            $ref: '#/definitions/checklistactivity_old'
        404:
          description: Limeobject not found.
    delete:
      summary: "Delete a checklistactivity old."
      description: "Deletes a single checklistactivity old object having the specified id."
      tags:
        - oldchecklistactivity
      parameters:
        - name: id
          in: path
          description: The id of the object to delete.
          required: true
          type: integer
      responses:
        204:
          description: Success. No content returned.
        404:
          description: Limeobject not found.
    put:
      summary: "Update an existing checklistactivity old."
      description: "Updates a single checklistactivity old object having the specified id. Note that partial objects (i.e. without all properties set) can be specified."
      tags:
        - oldchecklistactivity
      parameters:
        - name: id
          in: path
          description: "The id of the checklistactivity old to update."
          required: true
          type: integer
        - name: "checklistactivity old"
          in: body
          description: "The checklistactivity old data to update."
          required: true
          schema:
            $ref: '#/definitions/checklistactivity_old'
      responses:
        200:
          description: A JSON representation of the updated (full) object.
          schema:
            $ref: '#/definitions/checklistactivity_old'
        404:
          description: Limeobject not found.
  /oldchecklistactivity/{id}/helpdesk/:
    get:
      summary: "Retrieve a related ."
      description: "Retrieves the related  object, if any."
      tags:
        - oldchecklistactivity
      parameters:
        - name: id
          in: path
          description: "The id of the parent checklistactivity old."
          required: true
          type: integer
      responses:
        200:
          description: A JSON representation of the requested object.
          schema:
            $ref: '#/definitions/helpdesk'
        404:
          description: "No  object has been set for this relation."
  /oldchecklistactivity/{id}/parentchecklistactivity/:
    get:
      summary: "Retrieve a related checklistactivity old."
      description: "Retrieves the related checklistactivity old object, if any."
      tags:
        - oldchecklistactivity
      parameters:
        - name: id
          in: path
          description: "The id of the parent checklistactivity old."
          required: true
          type: integer
      responses:
        200:
          description: A JSON representation of the requested object.
          schema:
            $ref: '#/definitions/checklistactivity_old'
        404:
          description: "No checklistactivity old object has been set for this relation."
  /oldchecklistactivity/{id}/coworker/:
    get:
      summary: "Retrieve a related ."
      description: "Retrieves the related  object, if any."
      tags:
        - oldchecklistactivity
      parameters:
        - name: id
          in: path
          description: "The id of the parent checklistactivity old."
          required: true
          type: integer
      responses:
        200:
          description: A JSON representation of the requested object.
          schema:
            $ref: '#/definitions/coworker'
        404:
          description: "No  object has been set for this relation."
  /oldchecklistactivity/{id}/subchecklistactivity/:
    get:
      summary: "Retrieve related ."
      description: "Retrieves a paginated list of checklistactivity old objects related to a specific checklistactivity old. The result contains all available properties."
      tags:
        - oldchecklistactivity
      parameters:
        - name: id
          in: path
          description: "The id of the parent checklistactivity old."
          required: true
          type: integer
        - name: _limit
          in: query
          type: integer
          description: The maximum number of items to return.
          minimum: 1
          maximum: 50
          default: 10
        - name: _sort
          in: query
          type: string
          description: Name of a (single) property to sort on. To sort in descending order, prefix with a '-' sign.
      responses:
        200:
          description: An array of objects.
          schema:
            type: array
            items:
              $ref: '#/definitions/checklistactivity_old'
        404:
          description: Limeobject not found.
  /checklistactivity/:
    get:
      summary: "Retrieve checklist activities"
      description: "Retrieves a paginated list of checklist activity objects. The result contains all available properties."
      tags:
        - Checklist Activities
      parameters:
        - name: _limit
          in: query
          type: integer
          description: The maximum number of items to return.
          minimum: 1
          maximum: 50
          default: 10
        - name: _sort
          in: query
          type: string
          description: Name of a (single) property to sort on. To sort in descending order, prefix with a '-' sign.
        - name: _embed
          in: query
          required: false
          type: array
          collectionFormat: multi
          items:
            enum:
              - "helpdesktype"
              - "checklistactivitytemplate"
              - "office"
          description: Include data for related objects of the specified type.
      responses:
        200:
          description: An array of objects.
          schema:
            type: array
            items:
              $ref: '#/definitions/Checklist_Activity'
    post:
      summary: "Create a new checklist activity."
      description: "Create a single checklist activity object."
      tags:
        - Checklist Activities
      parameters:
        - name: "Checklist Activity"
          in: body
          description: "The checklist activity data to insert."
          required: true
          schema:
            $ref: '#/definitions/Checklist_Activity'
      responses:
        201:
          description: A JSON representation of the created object.
          schema:
            $ref: '#/definitions/Checklist_Activity'
        400:
          description: Bad request.
          schema:
            $ref: '#/definitions/Error'
  /checklistactivity/{id}/:
    get:
      summary: "Retrieve a checklist activity."
      description: "Retrieves a single checklist activity object having the specified id."
      tags:
        - Checklist Activities
      parameters:
        - name: id
          in: path
          description: "The id of the checklist activity to retrieve."
          required: true
          type: integer
        - name: _embed
          in: query
          required: false
          type: array
          collectionFormat: multi
          items:
            enum:
              - "helpdesktype"
              - "checklistactivitytemplate"
              - "office"
          description: Include data for related objects of the specified type.
      responses:
        200:
          description: A JSON representation of the requested object.
          schema:
            $ref: '#/definitions/Checklist_Activity'
        404:
          description: Limeobject not found.
    delete:
      summary: "Delete a checklist activity."
      description: "Deletes a single checklist activity object having the specified id."
      tags:
        - Checklist Activities
      parameters:
        - name: id
          in: path
          description: The id of the object to delete.
          required: true
          type: integer
      responses:
        204:
          description: Success. No content returned.
        404:
          description: Limeobject not found.
    put:
      summary: "Update an existing checklist activity."
      description: "Updates a single checklist activity object having the specified id. Note that partial objects (i.e. without all properties set) can be specified."
      tags:
        - Checklist Activities
      parameters:
        - name: id
          in: path
          description: "The id of the checklist activity to update."
          required: true
          type: integer
        - name: "Checklist Activity"
          in: body
          description: "The Checklist Activity data to update."
          required: true
          schema:
            $ref: '#/definitions/Checklist_Activity'
      responses:
        200:
          description: A JSON representation of the updated (full) object.
          schema:
            $ref: '#/definitions/Checklist_Activity'
        404:
          description: Limeobject not found.
  /checklistactivity/{id}/helpdesktype/:
    get:
      summary: "Retrieve a related checklisttemplate."
      description: "Retrieves the related checklisttemplate object, if any."
      tags:
        - Checklist Activities
      parameters:
        - name: id
          in: path
          description: "The id of the parent checklist activity."
          required: true
          type: integer
      responses:
        200:
          description: A JSON representation of the requested object.
          schema:
            $ref: '#/definitions/checklisttemplate'
        404:
          description: "No checklisttemplate object has been set for this relation."
  /checklistactivity/{id}/checklistactivitytemplate/:
    get:
      summary: "Retrieve a related checklistactivitytemplate."
      description: "Retrieves the related checklistactivitytemplate object, if any."
      tags:
        - Checklist Activities
      parameters:
        - name: id
          in: path
          description: "The id of the parent checklist activity."
          required: true
          type: integer
      responses:
        200:
          description: A JSON representation of the requested object.
          schema:
            $ref: '#/definitions/checklistactivitytemplate'
        404:
          description: "No checklistactivitytemplate object has been set for this relation."
  /checklistactivity/{id}/office/:
    get:
      summary: "Retrieve a related office."
      description: "Retrieves the related office object, if any."
      tags:
        - Checklist Activities
      parameters:
        - name: id
          in: path
          description: "The id of the parent checklist activity."
          required: true
          type: integer
      responses:
        200:
          description: A JSON representation of the requested object.
          schema:
            $ref: '#/definitions/Office'
        404:
          description: "No office object has been set for this relation."
  /checklistactivity/{id}/currenthelpdesk/:
    get:
      summary: "Retrieve related ."
      description: "Retrieves a paginated list of  objects related to a specific checklist activity. The result contains all available properties."
      tags:
        - Checklist Activities
      parameters:
        - name: id
          in: path
          description: "The id of the parent checklist activity."
          required: true
          type: integer
        - name: _limit
          in: query
          type: integer
          description: The maximum number of items to return.
          minimum: 1
          maximum: 50
          default: 10
        - name: _sort
          in: query
          type: string
          description: Name of a (single) property to sort on. To sort in descending order, prefix with a '-' sign.
      responses:
        200:
          description: An array of objects.
          schema:
            type: array
            items:
              $ref: '#/definitions/helpdesk'
        404:
          description: Limeobject not found.
  /checklistactivity/{id}/nextstep/:
    get:
      summary: "Retrieve related ."
      description: "Retrieves a paginated list of nextstep objects related to a specific checklist activity. The result contains all available properties."
      tags:
        - Checklist Activities
      parameters:
        - name: id
          in: path
          description: "The id of the parent checklist activity."
          required: true
          type: integer
        - name: _limit
          in: query
          type: integer
          description: The maximum number of items to return.
          minimum: 1
          maximum: 50
          default: 10
        - name: _sort
          in: query
          type: string
          description: Name of a (single) property to sort on. To sort in descending order, prefix with a '-' sign.
      responses:
        200:
          description: An array of objects.
          schema:
            type: array
            items:
              $ref: '#/definitions/nextstep'
        404:
          description: Limeobject not found.
  /checklistactivity/{id}/relatedsteps/:
    get:
      summary: "Retrieve related ."
      description: "Retrieves a paginated list of nextstep objects related to a specific checklist activity. The result contains all available properties."
      tags:
        - Checklist Activities
      parameters:
        - name: id
          in: path
          description: "The id of the parent checklist activity."
          required: true
          type: integer
        - name: _limit
          in: query
          type: integer
          description: The maximum number of items to return.
          minimum: 1
          maximum: 50
          default: 10
        - name: _sort
          in: query
          type: string
          description: Name of a (single) property to sort on. To sort in descending order, prefix with a '-' sign.
      responses:
        200:
          description: An array of objects.
          schema:
            type: array
            items:
              $ref: '#/definitions/nextstep'
        404:
          description: Limeobject not found.
  /checklistactivity/{id}/soschecklistactivity/:
    get:
      summary: "Retrieve related ."
      description: "Retrieves a paginated list of soschecklistactivity objects related to a specific checklist activity. The result contains all available properties."
      tags:
        - Checklist Activities
      parameters:
        - name: id
          in: path
          description: "The id of the parent checklist activity."
          required: true
          type: integer
        - name: _limit
          in: query
          type: integer
          description: The maximum number of items to return.
          minimum: 1
          maximum: 50
          default: 10
        - name: _sort
          in: query
          type: string
          description: Name of a (single) property to sort on. To sort in descending order, prefix with a '-' sign.
      responses:
        200:
          description: An array of objects.
          schema:
            type: array
            items:
              $ref: '#/definitions/soschecklistactivity'
        404:
          description: Limeobject not found.
  /checklistactivity/{id}/soschecklistactivityoption/:
    get:
      summary: "Retrieve related ."
      description: "Retrieves a paginated list of soschecklistactivity objects related to a specific checklist activity. The result contains all available properties."
      tags:
        - Checklist Activities
      parameters:
        - name: id
          in: path
          description: "The id of the parent checklist activity."
          required: true
          type: integer
        - name: _limit
          in: query
          type: integer
          description: The maximum number of items to return.
          minimum: 1
          maximum: 50
          default: 10
        - name: _sort
          in: query
          type: string
          description: Name of a (single) property to sort on. To sort in descending order, prefix with a '-' sign.
      responses:
        200:
          description: An array of objects.
          schema:
            type: array
            items:
              $ref: '#/definitions/soschecklistactivity'
        404:
          description: Limeobject not found.
  /checklistactivitytemplate/:
    get:
      summary: "Retrieve "
      description: "Retrieves a paginated list of checklistactivitytemplate objects. The result contains all available properties."
      tags:
        - checklistactivitytemplate
      parameters:
        - name: _limit
          in: query
          type: integer
          description: The maximum number of items to return.
          minimum: 1
          maximum: 50
          default: 10
        - name: _sort
          in: query
          type: string
          description: Name of a (single) property to sort on. To sort in descending order, prefix with a '-' sign.
        - name: _embed
          in: query
          required: false
          type: array
          collectionFormat: multi
          items:
            enum:
              - "helpdesktype"
              - "parentchecklistactivitytemplate"
              - "office"
              - "coworker"
          description: Include data for related objects of the specified type.
      responses:
        200:
          description: An array of objects.
          schema:
            type: array
            items:
              $ref: '#/definitions/checklistactivitytemplate'
    post:
      summary: "Create a new checklistactivitytemplate."
      description: "Create a single checklistactivitytemplate object."
      tags:
        - checklistactivitytemplate
      parameters:
        - name: "checklistactivitytemplate"
          in: body
          description: "The checklistactivitytemplate data to insert."
          required: true
          schema:
            $ref: '#/definitions/checklistactivitytemplate'
      responses:
        201:
          description: A JSON representation of the created object.
          schema:
            $ref: '#/definitions/checklistactivitytemplate'
        400:
          description: Bad request.
          schema:
            $ref: '#/definitions/Error'
  /checklistactivitytemplate/{id}/:
    get:
      summary: "Retrieve a checklistactivitytemplate."
      description: "Retrieves a single checklistactivitytemplate object having the specified id."
      tags:
        - checklistactivitytemplate
      parameters:
        - name: id
          in: path
          description: "The id of the checklistactivitytemplate to retrieve."
          required: true
          type: integer
        - name: _embed
          in: query
          required: false
          type: array
          collectionFormat: multi
          items:
            enum:
              - "helpdesktype"
              - "parentchecklistactivitytemplate"
              - "office"
              - "coworker"
          description: Include data for related objects of the specified type.
      responses:
        200:
          description: A JSON representation of the requested object.
          schema:
            $ref: '#/definitions/checklistactivitytemplate'
        404:
          description: Limeobject not found.
    delete:
      summary: "Delete a checklistactivitytemplate."
      description: "Deletes a single checklistactivitytemplate object having the specified id."
      tags:
        - checklistactivitytemplate
      parameters:
        - name: id
          in: path
          description: The id of the object to delete.
          required: true
          type: integer
      responses:
        204:
          description: Success. No content returned.
        404:
          description: Limeobject not found.
    put:
      summary: "Update an existing checklistactivitytemplate."
      description: "Updates a single checklistactivitytemplate object having the specified id. Note that partial objects (i.e. without all properties set) can be specified."
      tags:
        - checklistactivitytemplate
      parameters:
        - name: id
          in: path
          description: "The id of the checklistactivitytemplate to update."
          required: true
          type: integer
        - name: "checklistactivitytemplate"
          in: body
          description: "The checklistactivitytemplate data to update."
          required: true
          schema:
            $ref: '#/definitions/checklistactivitytemplate'
      responses:
        200:
          description: A JSON representation of the updated (full) object.
          schema:
            $ref: '#/definitions/checklistactivitytemplate'
        404:
          description: Limeobject not found.
  /checklistactivitytemplate/{id}/helpdesktype/:
    get:
      summary: "Retrieve a related checklisttemplate."
      description: "Retrieves the related checklisttemplate object, if any."
      tags:
        - checklistactivitytemplate
      parameters:
        - name: id
          in: path
          description: "The id of the parent checklistactivitytemplate."
          required: true
          type: integer
      responses:
        200:
          description: A JSON representation of the requested object.
          schema:
            $ref: '#/definitions/checklisttemplate'
        404:
          description: "No checklisttemplate object has been set for this relation."
  /checklistactivitytemplate/{id}/parentchecklistactivitytemplate/:
    get:
      summary: "Retrieve a related checklistactivitytemplate."
      description: "Retrieves the related checklistactivitytemplate object, if any."
      tags:
        - checklistactivitytemplate
      parameters:
        - name: id
          in: path
          description: "The id of the parent checklistactivitytemplate."
          required: true
          type: integer
      responses:
        200:
          description: A JSON representation of the requested object.
          schema:
            $ref: '#/definitions/checklistactivitytemplate'
        404:
          description: "No checklistactivitytemplate object has been set for this relation."
  /checklistactivitytemplate/{id}/office/:
    get:
      summary: "Retrieve a related office."
      description: "Retrieves the related office object, if any."
      tags:
        - checklistactivitytemplate
      parameters:
        - name: id
          in: path
          description: "The id of the parent checklistactivitytemplate."
          required: true
          type: integer
      responses:
        200:
          description: A JSON representation of the requested object.
          schema:
            $ref: '#/definitions/Office'
        404:
          description: "No office object has been set for this relation."
  /checklistactivitytemplate/{id}/coworker/:
    get:
      summary: "Retrieve a related ."
      description: "Retrieves the related  object, if any."
      tags:
        - checklistactivitytemplate
      parameters:
        - name: id
          in: path
          description: "The id of the parent checklistactivitytemplate."
          required: true
          type: integer
      responses:
        200:
          description: A JSON representation of the requested object.
          schema:
            $ref: '#/definitions/coworker'
        404:
          description: "No  object has been set for this relation."
  /checklistactivitytemplate/{id}/subchecklistactivitytemplate/:
    get:
      summary: "Retrieve related ."
      description: "Retrieves a paginated list of checklistactivitytemplate objects related to a specific checklistactivitytemplate. The result contains all available properties."
      tags:
        - checklistactivitytemplate
      parameters:
        - name: id
          in: path
          description: "The id of the parent checklistactivitytemplate."
          required: true
          type: integer
        - name: _limit
          in: query
          type: integer
          description: The maximum number of items to return.
          minimum: 1
          maximum: 50
          default: 10
        - name: _sort
          in: query
          type: string
          description: Name of a (single) property to sort on. To sort in descending order, prefix with a '-' sign.
      responses:
        200:
          description: An array of objects.
          schema:
            type: array
            items:
              $ref: '#/definitions/checklistactivitytemplate'
        404:
          description: Limeobject not found.
  /checklistactivitytemplate/{id}/checklistactivity/:
    get:
      summary: "Retrieve related checklist activities."
      description: "Retrieves a paginated list of checklist activity objects related to a specific checklistactivitytemplate. The result contains all available properties."
      tags:
        - checklistactivitytemplate
      parameters:
        - name: id
          in: path
          description: "The id of the parent checklistactivitytemplate."
          required: true
          type: integer
        - name: _limit
          in: query
          type: integer
          description: The maximum number of items to return.
          minimum: 1
          maximum: 50
          default: 10
        - name: _sort
          in: query
          type: string
          description: Name of a (single) property to sort on. To sort in descending order, prefix with a '-' sign.
      responses:
        200:
          description: An array of objects.
          schema:
            type: array
            items:
              $ref: '#/definitions/Checklist_Activity'
        404:
          description: Limeobject not found.
  /log_integration/:
    get:
      summary: "Retrieve integration log"
      description: "Retrieves a paginated list of integration log objects. The result contains all available properties."
      tags:
        - Integration log
      parameters:
        - name: _limit
          in: query
          type: integer
          description: The maximum number of items to return.
          minimum: 1
          maximum: 50
          default: 10
        - name: _sort
          in: query
          type: string
          description: Name of a (single) property to sort on. To sort in descending order, prefix with a '-' sign.
      responses:
        200:
          description: An array of objects.
          schema:
            type: array
            items:
              $ref: '#/definitions/Integration_log'
    post:
      summary: "Create a new integration log."
      description: "Create a single integration log object."
      tags:
        - Integration log
      parameters:
        - name: "Integration log"
          in: body
          description: "The integration log data to insert."
          required: true
          schema:
            $ref: '#/definitions/Integration_log'
      responses:
        201:
          description: A JSON representation of the created object.
          schema:
            $ref: '#/definitions/Integration_log'
        400:
          description: Bad request.
          schema:
            $ref: '#/definitions/Error'
  /log_integration/{id}/:
    get:
      summary: "Retrieve a integration log."
      description: "Retrieves a single integration log object having the specified id."
      tags:
        - Integration log
      parameters:
        - name: id
          in: path
          description: "The id of the integration log to retrieve."
          required: true
          type: integer
      responses:
        200:
          description: A JSON representation of the requested object.
          schema:
            $ref: '#/definitions/Integration_log'
        404:
          description: Limeobject not found.
    delete:
      summary: "Delete a integration log."
      description: "Deletes a single integration log object having the specified id."
      tags:
        - Integration log
      parameters:
        - name: id
          in: path
          description: The id of the object to delete.
          required: true
          type: integer
      responses:
        204:
          description: Success. No content returned.
        404:
          description: Limeobject not found.
    put:
      summary: "Update an existing integration log."
      description: "Updates a single integration log object having the specified id. Note that partial objects (i.e. without all properties set) can be specified."
      tags:
        - Integration log
      parameters:
        - name: id
          in: path
          description: "The id of the integration log to update."
          required: true
          type: integer
        - name: "Integration log"
          in: body
          description: "The Integration log data to update."
          required: true
          schema:
            $ref: '#/definitions/Integration_log'
      responses:
        200:
          description: A JSON representation of the updated (full) object.
          schema:
            $ref: '#/definitions/Integration_log'
        404:
          description: Limeobject not found.
  /whiteboard/:
    get:
      summary: "Retrieve whiteboard"
      description: "Retrieves a paginated list of whiteboard objects. The result contains all available properties."
      tags:
        - Whiteboard
      parameters:
        - name: _limit
          in: query
          type: integer
          description: The maximum number of items to return.
          minimum: 1
          maximum: 50
          default: 10
        - name: _sort
          in: query
          type: string
          description: Name of a (single) property to sort on. To sort in descending order, prefix with a '-' sign.
        - name: _embed
          in: query
          required: false
          type: array
          collectionFormat: multi
          items:
            enum:
              - "coworker"
              - "responsiblecoworker"
              - "coworkerdoer"
          description: Include data for related objects of the specified type.
      responses:
        200:
          description: An array of objects.
          schema:
            type: array
            items:
              $ref: '#/definitions/Whiteboard'
    post:
      summary: "Create a new whiteboard."
      description: "Create a single whiteboard object."
      tags:
        - Whiteboard
      parameters:
        - name: "Whiteboard"
          in: body
          description: "The whiteboard data to insert."
          required: true
          schema:
            $ref: '#/definitions/Whiteboard'
      responses:
        201:
          description: A JSON representation of the created object.
          schema:
            $ref: '#/definitions/Whiteboard'
        400:
          description: Bad request.
          schema:
            $ref: '#/definitions/Error'
  /whiteboard/{id}/:
    get:
      summary: "Retrieve a whiteboard."
      description: "Retrieves a single whiteboard object having the specified id."
      tags:
        - Whiteboard
      parameters:
        - name: id
          in: path
          description: "The id of the whiteboard to retrieve."
          required: true
          type: integer
        - name: _embed
          in: query
          required: false
          type: array
          collectionFormat: multi
          items:
            enum:
              - "coworker"
              - "responsiblecoworker"
              - "coworkerdoer"
          description: Include data for related objects of the specified type.
      responses:
        200:
          description: A JSON representation of the requested object.
          schema:
            $ref: '#/definitions/Whiteboard'
        404:
          description: Limeobject not found.
    delete:
      summary: "Delete a whiteboard."
      description: "Deletes a single whiteboard object having the specified id."
      tags:
        - Whiteboard
      parameters:
        - name: id
          in: path
          description: The id of the object to delete.
          required: true
          type: integer
      responses:
        204:
          description: Success. No content returned.
        404:
          description: Limeobject not found.
    put:
      summary: "Update an existing whiteboard."
      description: "Updates a single whiteboard object having the specified id. Note that partial objects (i.e. without all properties set) can be specified."
      tags:
        - Whiteboard
      parameters:
        - name: id
          in: path
          description: "The id of the whiteboard to update."
          required: true
          type: integer
        - name: "Whiteboard"
          in: body
          description: "The Whiteboard data to update."
          required: true
          schema:
            $ref: '#/definitions/Whiteboard'
      responses:
        200:
          description: A JSON representation of the updated (full) object.
          schema:
            $ref: '#/definitions/Whiteboard'
        404:
          description: Limeobject not found.
  /whiteboard/{id}/coworker/:
    get:
      summary: "Retrieve a related ."
      description: "Retrieves the related  object, if any."
      tags:
        - Whiteboard
      parameters:
        - name: id
          in: path
          description: "The id of the parent whiteboard."
          required: true
          type: integer
      responses:
        200:
          description: A JSON representation of the requested object.
          schema:
            $ref: '#/definitions/coworker'
        404:
          description: "No  object has been set for this relation."
  /whiteboard/{id}/responsiblecoworker/:
    get:
      summary: "Retrieve a related ."
      description: "Retrieves the related  object, if any."
      tags:
        - Whiteboard
      parameters:
        - name: id
          in: path
          description: "The id of the parent whiteboard."
          required: true
          type: integer
      responses:
        200:
          description: A JSON representation of the requested object.
          schema:
            $ref: '#/definitions/coworker'
        404:
          description: "No  object has been set for this relation."
  /whiteboard/{id}/coworkerdoer/:
    get:
      summary: "Retrieve a related ."
      description: "Retrieves the related  object, if any."
      tags:
        - Whiteboard
      parameters:
        - name: id
          in: path
          description: "The id of the parent whiteboard."
          required: true
          type: integer
      responses:
        200:
          description: A JSON representation of the requested object.
          schema:
            $ref: '#/definitions/coworker'
        404:
          description: "No  object has been set for this relation."
  /whiteboard/{id}/document/:
    get:
      summary: "Retrieve related ."
      description: "Retrieves a paginated list of  objects related to a specific whiteboard. The result contains all available properties."
      tags:
        - Whiteboard
      parameters:
        - name: id
          in: path
          description: "The id of the parent whiteboard."
          required: true
          type: integer
        - name: _limit
          in: query
          type: integer
          description: The maximum number of items to return.
          minimum: 1
          maximum: 50
          default: 10
        - name: _sort
          in: query
          type: string
          description: Name of a (single) property to sort on. To sort in descending order, prefix with a '-' sign.
      responses:
        200:
          description: An array of objects.
          schema:
            type: array
            items:
              $ref: '#/definitions/document'
        404:
          description: Limeobject not found.
  /helpdeskgroup/:
    get:
      summary: "Retrieve "
      description: "Retrieves a paginated list of helpdeskgroup objects. The result contains all available properties."
      tags:
        - helpdeskgroup
      parameters:
        - name: _limit
          in: query
          type: integer
          description: The maximum number of items to return.
          minimum: 1
          maximum: 50
          default: 10
        - name: _sort
          in: query
          type: string
          description: Name of a (single) property to sort on. To sort in descending order, prefix with a '-' sign.
      responses:
        200:
          description: An array of objects.
          schema:
            type: array
            items:
              $ref: '#/definitions/helpdeskgroup'
    post:
      summary: "Create a new helpdeskgroup."
      description: "Create a single helpdeskgroup object."
      tags:
        - helpdeskgroup
      parameters:
        - name: "helpdeskgroup"
          in: body
          description: "The helpdeskgroup data to insert."
          required: true
          schema:
            $ref: '#/definitions/helpdeskgroup'
      responses:
        201:
          description: A JSON representation of the created object.
          schema:
            $ref: '#/definitions/helpdeskgroup'
        400:
          description: Bad request.
          schema:
            $ref: '#/definitions/Error'
  /helpdeskgroup/{id}/:
    get:
      summary: "Retrieve a helpdeskgroup."
      description: "Retrieves a single helpdeskgroup object having the specified id."
      tags:
        - helpdeskgroup
      parameters:
        - name: id
          in: path
          description: "The id of the helpdeskgroup to retrieve."
          required: true
          type: integer
      responses:
        200:
          description: A JSON representation of the requested object.
          schema:
            $ref: '#/definitions/helpdeskgroup'
        404:
          description: Limeobject not found.
    delete:
      summary: "Delete a helpdeskgroup."
      description: "Deletes a single helpdeskgroup object having the specified id."
      tags:
        - helpdeskgroup
      parameters:
        - name: id
          in: path
          description: The id of the object to delete.
          required: true
          type: integer
      responses:
        204:
          description: Success. No content returned.
        404:
          description: Limeobject not found.
    put:
      summary: "Update an existing helpdeskgroup."
      description: "Updates a single helpdeskgroup object having the specified id. Note that partial objects (i.e. without all properties set) can be specified."
      tags:
        - helpdeskgroup
      parameters:
        - name: id
          in: path
          description: "The id of the helpdeskgroup to update."
          required: true
          type: integer
        - name: "helpdeskgroup"
          in: body
          description: "The helpdeskgroup data to update."
          required: true
          schema:
            $ref: '#/definitions/helpdeskgroup'
      responses:
        200:
          description: A JSON representation of the updated (full) object.
          schema:
            $ref: '#/definitions/helpdeskgroup'
        404:
          description: Limeobject not found.
  /helpdeskgroup/{id}/helpdeskgroupmembers/:
    get:
      summary: "Retrieve related ."
      description: "Retrieves a paginated list of helpdeskgroupmembers objects related to a specific helpdeskgroup. The result contains all available properties."
      tags:
        - helpdeskgroup
      parameters:
        - name: id
          in: path
          description: "The id of the parent helpdeskgroup."
          required: true
          type: integer
        - name: _limit
          in: query
          type: integer
          description: The maximum number of items to return.
          minimum: 1
          maximum: 50
          default: 10
        - name: _sort
          in: query
          type: string
          description: Name of a (single) property to sort on. To sort in descending order, prefix with a '-' sign.
      responses:
        200:
          description: An array of objects.
          schema:
            type: array
            items:
              $ref: '#/definitions/helpdeskgroupmembers'
        404:
          description: Limeobject not found.
  /helpdeskgroup/{id}/helpdesk/:
    get:
      summary: "Retrieve related ."
      description: "Retrieves a paginated list of  objects related to a specific helpdeskgroup. The result contains all available properties."
      tags:
        - helpdeskgroup
      parameters:
        - name: id
          in: path
          description: "The id of the parent helpdeskgroup."
          required: true
          type: integer
        - name: _limit
          in: query
          type: integer
          description: The maximum number of items to return.
          minimum: 1
          maximum: 50
          default: 10
        - name: _sort
          in: query
          type: string
          description: Name of a (single) property to sort on. To sort in descending order, prefix with a '-' sign.
      responses:
        200:
          description: An array of objects.
          schema:
            type: array
            items:
              $ref: '#/definitions/helpdesk'
        404:
          description: Limeobject not found.
  /helpdeskgroup/{id}/helpdesktype/:
    get:
      summary: "Retrieve related ."
      description: "Retrieves a paginated list of checklisttemplate objects related to a specific helpdeskgroup. The result contains all available properties."
      tags:
        - helpdeskgroup
      parameters:
        - name: id
          in: path
          description: "The id of the parent helpdeskgroup."
          required: true
          type: integer
        - name: _limit
          in: query
          type: integer
          description: The maximum number of items to return.
          minimum: 1
          maximum: 50
          default: 10
        - name: _sort
          in: query
          type: string
          description: Name of a (single) property to sort on. To sort in descending order, prefix with a '-' sign.
      responses:
        200:
          description: An array of objects.
          schema:
            type: array
            items:
              $ref: '#/definitions/checklisttemplate'
        404:
          description: Limeobject not found.
  /helpdeskgroupmembers/:
    get:
      summary: "Retrieve "
      description: "Retrieves a paginated list of helpdeskgroupmembers objects. The result contains all available properties."
      tags:
        - helpdeskgroupmembers
      parameters:
        - name: _limit
          in: query
          type: integer
          description: The maximum number of items to return.
          minimum: 1
          maximum: 50
          default: 10
        - name: _sort
          in: query
          type: string
          description: Name of a (single) property to sort on. To sort in descending order, prefix with a '-' sign.
        - name: _embed
          in: query
          required: false
          type: array
          collectionFormat: multi
          items:
            enum:
              - "helpdeskgroup"
              - "coworker"
          description: Include data for related objects of the specified type.
      responses:
        200:
          description: An array of objects.
          schema:
            type: array
            items:
              $ref: '#/definitions/helpdeskgroupmembers'
    post:
      summary: "Create a new helpdeskgroupmembers."
      description: "Create a single helpdeskgroupmembers object."
      tags:
        - helpdeskgroupmembers
      parameters:
        - name: "helpdeskgroupmembers"
          in: body
          description: "The helpdeskgroupmembers data to insert."
          required: true
          schema:
            $ref: '#/definitions/helpdeskgroupmembers'
      responses:
        201:
          description: A JSON representation of the created object.
          schema:
            $ref: '#/definitions/helpdeskgroupmembers'
        400:
          description: Bad request.
          schema:
            $ref: '#/definitions/Error'
  /helpdeskgroupmembers/{id}/:
    get:
      summary: "Retrieve a helpdeskgroupmembers."
      description: "Retrieves a single helpdeskgroupmembers object having the specified id."
      tags:
        - helpdeskgroupmembers
      parameters:
        - name: id
          in: path
          description: "The id of the helpdeskgroupmembers to retrieve."
          required: true
          type: integer
        - name: _embed
          in: query
          required: false
          type: array
          collectionFormat: multi
          items:
            enum:
              - "helpdeskgroup"
              - "coworker"
          description: Include data for related objects of the specified type.
      responses:
        200:
          description: A JSON representation of the requested object.
          schema:
            $ref: '#/definitions/helpdeskgroupmembers'
        404:
          description: Limeobject not found.
    delete:
      summary: "Delete a helpdeskgroupmembers."
      description: "Deletes a single helpdeskgroupmembers object having the specified id."
      tags:
        - helpdeskgroupmembers
      parameters:
        - name: id
          in: path
          description: The id of the object to delete.
          required: true
          type: integer
      responses:
        204:
          description: Success. No content returned.
        404:
          description: Limeobject not found.
    put:
      summary: "Update an existing helpdeskgroupmembers."
      description: "Updates a single helpdeskgroupmembers object having the specified id. Note that partial objects (i.e. without all properties set) can be specified."
      tags:
        - helpdeskgroupmembers
      parameters:
        - name: id
          in: path
          description: "The id of the helpdeskgroupmembers to update."
          required: true
          type: integer
        - name: "helpdeskgroupmembers"
          in: body
          description: "The helpdeskgroupmembers data to update."
          required: true
          schema:
            $ref: '#/definitions/helpdeskgroupmembers'
      responses:
        200:
          description: A JSON representation of the updated (full) object.
          schema:
            $ref: '#/definitions/helpdeskgroupmembers'
        404:
          description: Limeobject not found.
  /helpdeskgroupmembers/{id}/helpdeskgroup/:
    get:
      summary: "Retrieve a related helpdeskgroup."
      description: "Retrieves the related helpdeskgroup object, if any."
      tags:
        - helpdeskgroupmembers
      parameters:
        - name: id
          in: path
          description: "The id of the parent helpdeskgroupmembers."
          required: true
          type: integer
      responses:
        200:
          description: A JSON representation of the requested object.
          schema:
            $ref: '#/definitions/helpdeskgroup'
        404:
          description: "No helpdeskgroup object has been set for this relation."
  /helpdeskgroupmembers/{id}/coworker/:
    get:
      summary: "Retrieve a related ."
      description: "Retrieves the related  object, if any."
      tags:
        - helpdeskgroupmembers
      parameters:
        - name: id
          in: path
          description: "The id of the parent helpdeskgroupmembers."
          required: true
          type: integer
      responses:
        200:
          description: A JSON representation of the requested object.
          schema:
            $ref: '#/definitions/coworker'
        404:
          description: "No  object has been set for this relation."
  /localize/:
    get:
      summary: "Retrieve localization"
      description: "Retrieves a paginated list of localization objects. The result contains all available properties."
      tags:
        - Localization
      parameters:
        - name: _limit
          in: query
          type: integer
          description: The maximum number of items to return.
          minimum: 1
          maximum: 50
          default: 10
        - name: _sort
          in: query
          type: string
          description: Name of a (single) property to sort on. To sort in descending order, prefix with a '-' sign.
      responses:
        200:
          description: An array of objects.
          schema:
            type: array
            items:
              $ref: '#/definitions/Localization'
    post:
      summary: "Create a new localization."
      description: "Create a single localization object."
      tags:
        - Localization
      parameters:
        - name: "Localization"
          in: body
          description: "The localization data to insert."
          required: true
          schema:
            $ref: '#/definitions/Localization'
      responses:
        201:
          description: A JSON representation of the created object.
          schema:
            $ref: '#/definitions/Localization'
        400:
          description: Bad request.
          schema:
            $ref: '#/definitions/Error'
  /localize/{id}/:
    get:
      summary: "Retrieve a localization."
      description: "Retrieves a single localization object having the specified id."
      tags:
        - Localization
      parameters:
        - name: id
          in: path
          description: "The id of the localization to retrieve."
          required: true
          type: integer
      responses:
        200:
          description: A JSON representation of the requested object.
          schema:
            $ref: '#/definitions/Localization'
        404:
          description: Limeobject not found.
    delete:
      summary: "Delete a localization."
      description: "Deletes a single localization object having the specified id."
      tags:
        - Localization
      parameters:
        - name: id
          in: path
          description: The id of the object to delete.
          required: true
          type: integer
      responses:
        204:
          description: Success. No content returned.
        404:
          description: Limeobject not found.
    put:
      summary: "Update an existing localization."
      description: "Updates a single localization object having the specified id. Note that partial objects (i.e. without all properties set) can be specified."
      tags:
        - Localization
      parameters:
        - name: id
          in: path
          description: "The id of the localization to update."
          required: true
          type: integer
        - name: "Localization"
          in: body
          description: "The Localization data to update."
          required: true
          schema:
            $ref: '#/definitions/Localization'
      responses:
        200:
          description: A JSON representation of the updated (full) object.
          schema:
            $ref: '#/definitions/Localization'
        404:
          description: Limeobject not found.
  /workorder/:
    get:
      summary: "Retrieve "
      description: "Retrieves a paginated list of workorder objects. The result contains all available properties."
      tags:
        - workorder
      parameters:
        - name: _limit
          in: query
          type: integer
          description: The maximum number of items to return.
          minimum: 1
          maximum: 50
          default: 10
        - name: _sort
          in: query
          type: string
          description: Name of a (single) property to sort on. To sort in descending order, prefix with a '-' sign.
        - name: _embed
          in: query
          required: false
          type: array
          collectionFormat: multi
          items:
            enum:
              - "helpdesk"
              - "entrepreneur"
              - "coworker"
          description: Include data for related objects of the specified type.
      responses:
        200:
          description: An array of objects.
          schema:
            type: array
            items:
              $ref: '#/definitions/workorder'
    post:
      summary: "Create a new workorder."
      description: "Create a single workorder object."
      tags:
        - workorder
      parameters:
        - name: "workorder"
          in: body
          description: "The workorder data to insert."
          required: true
          schema:
            $ref: '#/definitions/workorder'
      responses:
        201:
          description: A JSON representation of the created object.
          schema:
            $ref: '#/definitions/workorder'
        400:
          description: Bad request.
          schema:
            $ref: '#/definitions/Error'
  /workorder/{id}/:
    get:
      summary: "Retrieve a workorder."
      description: "Retrieves a single workorder object having the specified id."
      tags:
        - workorder
      parameters:
        - name: id
          in: path
          description: "The id of the workorder to retrieve."
          required: true
          type: integer
        - name: _embed
          in: query
          required: false
          type: array
          collectionFormat: multi
          items:
            enum:
              - "helpdesk"
              - "entrepreneur"
              - "coworker"
          description: Include data for related objects of the specified type.
      responses:
        200:
          description: A JSON representation of the requested object.
          schema:
            $ref: '#/definitions/workorder'
        404:
          description: Limeobject not found.
    delete:
      summary: "Delete a workorder."
      description: "Deletes a single workorder object having the specified id."
      tags:
        - workorder
      parameters:
        - name: id
          in: path
          description: The id of the object to delete.
          required: true
          type: integer
      responses:
        204:
          description: Success. No content returned.
        404:
          description: Limeobject not found.
    put:
      summary: "Update an existing workorder."
      description: "Updates a single workorder object having the specified id. Note that partial objects (i.e. without all properties set) can be specified."
      tags:
        - workorder
      parameters:
        - name: id
          in: path
          description: "The id of the workorder to update."
          required: true
          type: integer
        - name: "workorder"
          in: body
          description: "The workorder data to update."
          required: true
          schema:
            $ref: '#/definitions/workorder'
      responses:
        200:
          description: A JSON representation of the updated (full) object.
          schema:
            $ref: '#/definitions/workorder'
        404:
          description: Limeobject not found.
  /workorder/{id}/helpdesk/:
    get:
      summary: "Retrieve a related ."
      description: "Retrieves the related  object, if any."
      tags:
        - workorder
      parameters:
        - name: id
          in: path
          description: "The id of the parent workorder."
          required: true
          type: integer
      responses:
        200:
          description: A JSON representation of the requested object.
          schema:
            $ref: '#/definitions/helpdesk'
        404:
          description: "No  object has been set for this relation."
  /workorder/{id}/entrepreneur/:
    get:
      summary: "Retrieve a related entrepreneur."
      description: "Retrieves the related entrepreneur object, if any."
      tags:
        - workorder
      parameters:
        - name: id
          in: path
          description: "The id of the parent workorder."
          required: true
          type: integer
      responses:
        200:
          description: A JSON representation of the requested object.
          schema:
            $ref: '#/definitions/Entrepreneur'
        404:
          description: "No entrepreneur object has been set for this relation."
  /workorder/{id}/coworker/:
    get:
      summary: "Retrieve a related ."
      description: "Retrieves the related  object, if any."
      tags:
        - workorder
      parameters:
        - name: id
          in: path
          description: "The id of the parent workorder."
          required: true
          type: integer
      responses:
        200:
          description: A JSON representation of the requested object.
          schema:
            $ref: '#/definitions/coworker'
        404:
          description: "No  object has been set for this relation."
  /workorder/{id}/document/:
    get:
      summary: "Retrieve related ."
      description: "Retrieves a paginated list of  objects related to a specific workorder. The result contains all available properties."
      tags:
        - workorder
      parameters:
        - name: id
          in: path
          description: "The id of the parent workorder."
          required: true
          type: integer
        - name: _limit
          in: query
          type: integer
          description: The maximum number of items to return.
          minimum: 1
          maximum: 50
          default: 10
        - name: _sort
          in: query
          type: string
          description: Name of a (single) property to sort on. To sort in descending order, prefix with a '-' sign.
      responses:
        200:
          description: An array of objects.
          schema:
            type: array
            items:
              $ref: '#/definitions/document'
        404:
          description: Limeobject not found.
  /entrepreneur/:
    get:
      summary: "Retrieve entrepreneurs"
      description: "Retrieves a paginated list of entrepreneur objects. The result contains all available properties."
      tags:
        - Entrepreneurs
      parameters:
        - name: _limit
          in: query
          type: integer
          description: The maximum number of items to return.
          minimum: 1
          maximum: 50
          default: 10
        - name: _sort
          in: query
          type: string
          description: Name of a (single) property to sort on. To sort in descending order, prefix with a '-' sign.
        - name: _embed
          in: query
          required: false
          type: array
          collectionFormat: multi
          items:
            enum:
              - "coworker"
          description: Include data for related objects of the specified type.
      responses:
        200:
          description: An array of objects.
          schema:
            type: array
            items:
              $ref: '#/definitions/Entrepreneur'
    post:
      summary: "Create a new entrepreneur."
      description: "Create a single entrepreneur object."
      tags:
        - Entrepreneurs
      parameters:
        - name: "Entrepreneur"
          in: body
          description: "The entrepreneur data to insert."
          required: true
          schema:
            $ref: '#/definitions/Entrepreneur'
      responses:
        201:
          description: A JSON representation of the created object.
          schema:
            $ref: '#/definitions/Entrepreneur'
        400:
          description: Bad request.
          schema:
            $ref: '#/definitions/Error'
  /entrepreneur/{id}/:
    get:
      summary: "Retrieve a entrepreneur."
      description: "Retrieves a single entrepreneur object having the specified id."
      tags:
        - Entrepreneurs
      parameters:
        - name: id
          in: path
          description: "The id of the entrepreneur to retrieve."
          required: true
          type: integer
        - name: _embed
          in: query
          required: false
          type: array
          collectionFormat: multi
          items:
            enum:
              - "coworker"
          description: Include data for related objects of the specified type.
      responses:
        200:
          description: A JSON representation of the requested object.
          schema:
            $ref: '#/definitions/Entrepreneur'
        404:
          description: Limeobject not found.
    delete:
      summary: "Delete a entrepreneur."
      description: "Deletes a single entrepreneur object having the specified id."
      tags:
        - Entrepreneurs
      parameters:
        - name: id
          in: path
          description: The id of the object to delete.
          required: true
          type: integer
      responses:
        204:
          description: Success. No content returned.
        404:
          description: Limeobject not found.
    put:
      summary: "Update an existing entrepreneur."
      description: "Updates a single entrepreneur object having the specified id. Note that partial objects (i.e. without all properties set) can be specified."
      tags:
        - Entrepreneurs
      parameters:
        - name: id
          in: path
          description: "The id of the entrepreneur to update."
          required: true
          type: integer
        - name: "Entrepreneur"
          in: body
          description: "The Entrepreneur data to update."
          required: true
          schema:
            $ref: '#/definitions/Entrepreneur'
      responses:
        200:
          description: A JSON representation of the updated (full) object.
          schema:
            $ref: '#/definitions/Entrepreneur'
        404:
          description: Limeobject not found.
  /entrepreneur/{id}/coworker/:
    get:
      summary: "Retrieve a related ."
      description: "Retrieves the related  object, if any."
      tags:
        - Entrepreneurs
      parameters:
        - name: id
          in: path
          description: "The id of the parent entrepreneur."
          required: true
          type: integer
      responses:
        200:
          description: A JSON representation of the requested object.
          schema:
            $ref: '#/definitions/coworker'
        404:
          description: "No  object has been set for this relation."
  /entrepreneur/{id}/entrepreneurcontact/:
    get:
      summary: "Retrieve related ."
      description: "Retrieves a paginated list of entrepreneurcontact objects related to a specific entrepreneur. The result contains all available properties."
      tags:
        - Entrepreneurs
      parameters:
        - name: id
          in: path
          description: "The id of the parent entrepreneur."
          required: true
          type: integer
        - name: _limit
          in: query
          type: integer
          description: The maximum number of items to return.
          minimum: 1
          maximum: 50
          default: 10
        - name: _sort
          in: query
          type: string
          description: Name of a (single) property to sort on. To sort in descending order, prefix with a '-' sign.
      responses:
        200:
          description: An array of objects.
          schema:
            type: array
            items:
              $ref: '#/definitions/entrepreneurcontact'
        404:
          description: Limeobject not found.
  /entrepreneur/{id}/workorder/:
    get:
      summary: "Retrieve related ."
      description: "Retrieves a paginated list of workorder objects related to a specific entrepreneur. The result contains all available properties."
      tags:
        - Entrepreneurs
      parameters:
        - name: id
          in: path
          description: "The id of the parent entrepreneur."
          required: true
          type: integer
        - name: _limit
          in: query
          type: integer
          description: The maximum number of items to return.
          minimum: 1
          maximum: 50
          default: 10
        - name: _sort
          in: query
          type: string
          description: Name of a (single) property to sort on. To sort in descending order, prefix with a '-' sign.
      responses:
        200:
          description: An array of objects.
          schema:
            type: array
            items:
              $ref: '#/definitions/workorder'
        404:
          description: Limeobject not found.
  /entrepreneurcontact/:
    get:
      summary: "Retrieve "
      description: "Retrieves a paginated list of entrepreneurcontact objects. The result contains all available properties."
      tags:
        - entrepreneurcontact
      parameters:
        - name: _limit
          in: query
          type: integer
          description: The maximum number of items to return.
          minimum: 1
          maximum: 50
          default: 10
        - name: _sort
          in: query
          type: string
          description: Name of a (single) property to sort on. To sort in descending order, prefix with a '-' sign.
        - name: _embed
          in: query
          required: false
          type: array
          collectionFormat: multi
          items:
            enum:
              - "entrepreneur"
          description: Include data for related objects of the specified type.
      responses:
        200:
          description: An array of objects.
          schema:
            type: array
            items:
              $ref: '#/definitions/entrepreneurcontact'
    post:
      summary: "Create a new entrepreneurcontact."
      description: "Create a single entrepreneurcontact object."
      tags:
        - entrepreneurcontact
      parameters:
        - name: "entrepreneurcontact"
          in: body
          description: "The entrepreneurcontact data to insert."
          required: true
          schema:
            $ref: '#/definitions/entrepreneurcontact'
      responses:
        201:
          description: A JSON representation of the created object.
          schema:
            $ref: '#/definitions/entrepreneurcontact'
        400:
          description: Bad request.
          schema:
            $ref: '#/definitions/Error'
  /entrepreneurcontact/{id}/:
    get:
      summary: "Retrieve a entrepreneurcontact."
      description: "Retrieves a single entrepreneurcontact object having the specified id."
      tags:
        - entrepreneurcontact
      parameters:
        - name: id
          in: path
          description: "The id of the entrepreneurcontact to retrieve."
          required: true
          type: integer
        - name: _embed
          in: query
          required: false
          type: array
          collectionFormat: multi
          items:
            enum:
              - "entrepreneur"
          description: Include data for related objects of the specified type.
      responses:
        200:
          description: A JSON representation of the requested object.
          schema:
            $ref: '#/definitions/entrepreneurcontact'
        404:
          description: Limeobject not found.
    delete:
      summary: "Delete a entrepreneurcontact."
      description: "Deletes a single entrepreneurcontact object having the specified id."
      tags:
        - entrepreneurcontact
      parameters:
        - name: id
          in: path
          description: The id of the object to delete.
          required: true
          type: integer
      responses:
        204:
          description: Success. No content returned.
        404:
          description: Limeobject not found.
    put:
      summary: "Update an existing entrepreneurcontact."
      description: "Updates a single entrepreneurcontact object having the specified id. Note that partial objects (i.e. without all properties set) can be specified."
      tags:
        - entrepreneurcontact
      parameters:
        - name: id
          in: path
          description: "The id of the entrepreneurcontact to update."
          required: true
          type: integer
        - name: "entrepreneurcontact"
          in: body
          description: "The entrepreneurcontact data to update."
          required: true
          schema:
            $ref: '#/definitions/entrepreneurcontact'
      responses:
        200:
          description: A JSON representation of the updated (full) object.
          schema:
            $ref: '#/definitions/entrepreneurcontact'
        404:
          description: Limeobject not found.
  /entrepreneurcontact/{id}/entrepreneur/:
    get:
      summary: "Retrieve a related entrepreneur."
      description: "Retrieves the related entrepreneur object, if any."
      tags:
        - entrepreneurcontact
      parameters:
        - name: id
          in: path
          description: "The id of the parent entrepreneurcontact."
          required: true
          type: integer
      responses:
        200:
          description: A JSON representation of the requested object.
          schema:
            $ref: '#/definitions/Entrepreneur'
        404:
          description: "No entrepreneur object has been set for this relation."
  /businesschecklogin/:
    get:
      summary: "Retrieve "
      description: "Retrieves a paginated list of businesschecklogin objects. The result contains all available properties."
      tags:
        - businesschecklogin
      parameters:
        - name: _limit
          in: query
          type: integer
          description: The maximum number of items to return.
          minimum: 1
          maximum: 50
          default: 10
        - name: _sort
          in: query
          type: string
          description: Name of a (single) property to sort on. To sort in descending order, prefix with a '-' sign.
        - name: _embed
          in: query
          required: false
          type: array
          collectionFormat: multi
          items:
            enum:
              - "coworker"
          description: Include data for related objects of the specified type.
      responses:
        200:
          description: An array of objects.
          schema:
            type: array
            items:
              $ref: '#/definitions/businesschecklogin'
    post:
      summary: "Create a new businesschecklogin."
      description: "Create a single businesschecklogin object."
      tags:
        - businesschecklogin
      parameters:
        - name: "businesschecklogin"
          in: body
          description: "The businesschecklogin data to insert."
          required: true
          schema:
            $ref: '#/definitions/businesschecklogin'
      responses:
        201:
          description: A JSON representation of the created object.
          schema:
            $ref: '#/definitions/businesschecklogin'
        400:
          description: Bad request.
          schema:
            $ref: '#/definitions/Error'
  /businesschecklogin/{id}/:
    get:
      summary: "Retrieve a businesschecklogin."
      description: "Retrieves a single businesschecklogin object having the specified id."
      tags:
        - businesschecklogin
      parameters:
        - name: id
          in: path
          description: "The id of the businesschecklogin to retrieve."
          required: true
          type: integer
        - name: _embed
          in: query
          required: false
          type: array
          collectionFormat: multi
          items:
            enum:
              - "coworker"
          description: Include data for related objects of the specified type.
      responses:
        200:
          description: A JSON representation of the requested object.
          schema:
            $ref: '#/definitions/businesschecklogin'
        404:
          description: Limeobject not found.
    delete:
      summary: "Delete a businesschecklogin."
      description: "Deletes a single businesschecklogin object having the specified id."
      tags:
        - businesschecklogin
      parameters:
        - name: id
          in: path
          description: The id of the object to delete.
          required: true
          type: integer
      responses:
        204:
          description: Success. No content returned.
        404:
          description: Limeobject not found.
    put:
      summary: "Update an existing businesschecklogin."
      description: "Updates a single businesschecklogin object having the specified id. Note that partial objects (i.e. without all properties set) can be specified."
      tags:
        - businesschecklogin
      parameters:
        - name: id
          in: path
          description: "The id of the businesschecklogin to update."
          required: true
          type: integer
        - name: "businesschecklogin"
          in: body
          description: "The businesschecklogin data to update."
          required: true
          schema:
            $ref: '#/definitions/businesschecklogin'
      responses:
        200:
          description: A JSON representation of the updated (full) object.
          schema:
            $ref: '#/definitions/businesschecklogin'
        404:
          description: Limeobject not found.
definitions:
  helpdesk:
    type: object
    properties:
      id:
        type: integer
        readOnly: true
      sosno:
        title: "sosno2"
        type: string
      priority:
        title: "priority"
        type: object
        properties:
          id:
            type: integer
          key:
            type: string
            default: "normal"
            enum:
              - "normal"
              - "high"
          text:
            type: string
      receivedthrough:
        title: "receivedthrough"
        type: object
        properties:
          id:
            type: integer
          key:
            type: string
            default: "empty"
            enum:
              - "empty"
              - "mail"
              - "email"
              - "form"
              - "phone"
              - "3792401"
          text:
            type: string
      answerby:
        title: "answerby"
        type: object
        properties:
          id:
            type: integer
          key:
            type: string
            default: "empty"
            enum:
              - "empty"
              - "email"
              - "phone"
              - "letter"
              - "noneed"
          text:
            type: string
      emailtemplate:
        title: "Svara via e-post"
        type: string
      customer:
        title: "customer"
        type: integer
      person:
        title: "person"
        type: integer
      installation:
        title: "installation"
        type: integer
      mainhelpdesk:
        title: "mainhelpdesk"
        type: integer
      reachedat:
        title: "reachedat"
        type: string
      business:
        title: "business"
        type: string
      campaign:
        title: "campaign"
        type: integer
      agreement:
        title: "agreement"
        type: integer
      fromaddress:
        title: "fromaddress"
        type: string
      persontext:
        title: "persontext"
        type: string
      address:
        title: "address"
        type: string
      title:
        title: "title"
        type: string
      description:
        title: "description"
        type: string
      helpdeskcategory:
        title: "helpdeskcategory"
        type: integer
      businessarea:
        title: "Subcategory"
        type: integer
      mainhelpdesktype:
        title: "checklisttemplate"
        type: integer
      xml:
        title: "xml"
        type: string
      faulttype:
        title: "faulttype"
        type: object
        properties:
          id:
            type: integer
          key:
            type: string
            default: "3271801"
            enum:
              - "3271801"
              - "3272201"
              - "3272301"
              - "3272401"
              - "3272501"
              - "3272601"
          text:
            type: string
      office:
        title: "office"
        type: integer
      coworker:
        title: "coworker"
        type: integer
      invoicestatus:
        title: "invoicestatus"
        type: object
        properties:
          id:
            type: integer
          key:
            type: string
            default: "3294201"
            enum:
              - "3294201"
              - "3294601"
              - "3294701"
          text:
            type: string
      complaint:
        title: "complaint"
        type: boolean
      reactioncategory:
        title: "reactioncategory"
        type: integer
      reactiontype:
        title: "reactiontype"
        type: integer
      handeled:
        title: "handeled"
        type: boolean
      helpdeskgroup:
        title: "helpdeskgroup"
        type: integer
      complainttext:
        title: "complainttext"
        type: string
      unreadhistory:
        title: "unreadhistory"
        type: object
        properties:
          id:
            type: integer
          key:
            type: string
            default: "empty"
            enum:
              - "3773401"
              - "3773901"
              - "3774001"
              - "empty"
              - "unread"
          text:
            type: string
      checklist_template:
        title: "checklist_template"
        type: string
      faultcause:
        title: "faultcause"
        type: string
      sosstatus:
        title: "sosstatus"
        type: object
        properties:
          id:
            type: integer
          key:
            type: string
            default: "received"
            enum:
              - "received"
              - "ongoing"
              - "closed"
              - "parked"
              - "returned"
          text:
            type: string
      registereddate:
        title: "registereddate"
        type: string
        format: date-time
      starttime:
        title: "starttime"
        type: string
        format: date-time
      parkedtime:
        title: "parkedtime"
        type: string
        format: date-time
      deadlinetime:
        title: "deadlinetime"
        type: string
        format: date-time
      endtime:
        title: "endtime"
        type: string
        format: date-time
      projectno1:
        title: "projectno1"
        type: string
      projectno2:
        title: "projectno2"
        type: string
      projectno3:
        title: "projectno3"
        type: string
      projectno4:
        title: "projectno4"
        type: string
      checklist_item_deadline:
        title: "checklist_item_deadline"
        type: string
        format: date
      checklist_item_current:
        title: "checklist_item_current"
        type: string
      currentchecklistactivity:
        title: "currentchecklistactivity"
        type: integer
      coworkerprojectleader1:
        title: "coworkerprojectleader1"
        type: integer
      coworkerprojectleader2:
        title: "coworkerprojectleader2"
        type: integer
      participant:
        title: "participant"
        type: integer
      lastchecklistactivity:
        title: "lastchecklistaactivity"
        type: string
      checklistcreated:
        title: "checklistcreated"
        type: boolean
      business2:
        title: "business2"
        type: integer
  helpdeskcategory:
    type: object
    required:
      - name
    properties:
      id:
        type: integer
        readOnly: true
      name:
        title: "name"
        type: string
      active:
        title: "active"
        type: boolean
  reactioncategory:
    type: object
    properties:
      id:
        type: integer
        readOnly: true
      name:
        title: "Name"
        type: string
      active:
        title: "Active"
        type: boolean
      noreactiontype:
        title: "noreactiontype"
        type: boolean
  Subcategory:
    type: object
    required:
      - name
    properties:
      id:
        type: integer
        readOnly: true
      name:
        title: "name"
        type: string
      helpdeskcategory:
        title: "helpdeskcategory"
        type: integer
      active:
        title: "active"
        type: boolean
  checklisttemplate:
    type: object
    required:
      - name
    properties:
      id:
        type: integer
        readOnly: true
      name:
        title: "name"
        type: string
      active:
        title: "active"
        type: boolean
      businessarea:
        title: "businessarea"
        type: integer
      office:
        title: "department"
        type: integer
      helpdeskgroup:
        title: "helpdeskgroup"
        type: integer
      showall:
        title: "showall"
        type: boolean
      xml:
        title: "xml"
        type: string
  reactiontype:
    type: object
    properties:
      id:
        type: integer
        readOnly: true
      name:
        title: "Name"
        type: string
      reactioncategory:
        title: "reactioncategory"
        type: integer
      active:
        title: "Active"
        type: boolean
  customer:
    type: object
    required:
      - category
      - doublecounter
    properties:
      id:
        type: integer
        readOnly: true
      customerstatus:
        title: "customerstatus"
        type: object
        properties:
          id:
            type: integer
          key:
            type: string
            default: "2104001"
            enum:
              - "2104001"
              - "2108001"
              - "2109001"
          text:
            type: string
      orgnr:
        title: "orgnr"
        type: string
      name:
        title: "name"
        type: string
      probillcustomerid:
        title: "ProbillID"
        type: string
      category:
        title: "category"
        type: object
        properties:
          id:
            type: integer
          key:
            type: string
            default: "empty"
            enum:
              - "53001"
              - "55001"
              - "empty"
              - "54001"
          text:
            type: string
      importname:
        title: "importname"
        type: string
      protectedidentity:
        title: "protectedidentity"
        type: boolean
      doublecounter:
        title: "Double counter"
        type: integer
      importcategory:
        title: "importcategory"
        type: string
      suffix:
        title: "suffix"
        type: string
      avfall:
        title: "Avfall"
        type: boolean
      doublehandler:
        title: "Hanterad dubblett"
        type: boolean
      creditinfo:
        title: "creditinfo"
        type: string
      deleteprospect:
        title: "deleteprospect"
        type: boolean
      customernoel:
        title: "customernoel"
        type: string
      customernoheat:
        title: "customernofjv"
        type: string
      customernorec:
        title: "customernoreco"
        type: string
      customernonet:
        title: "customernonet"
        type: string
      limeid:
        title: "limeid"
        type: integer
      integrationid:
        title: "customermasterid"
        type: integer
      classification:
        title: "classification"
        type: object
        properties:
          id:
            type: integer
          key:
            type: string
            default: "3203401"
            enum:
              - "3203401"
              - "3203801"
              - "3203901"
              - "3204001"
              - "3204101"
              - "3204201"
              - "3204301"
              - "3204401"
              - "3204501"
              - "3204601"
          text:
            type: string
      mailings:
        title: "mailings"
        type: string
      coaddress:
        title: "coaddress"
        type: string
      address:
        title: "address"
        type: string
      zipcode:
        title: "zipcode"
        type: string
      city:
        title: "city"
        type: string
      country:
        title: "country"
        type: string
      customercoaddress:
        title: "customercoaddress"
        type: string
      customeraddress:
        title: "customeraddress"
        type: string
      customerzipcode:
        title: "customerzipcode"
        type: string
      customercity:
        title: "customercity"
        type: string
      phone:
        title: "phone"
        type: string
      mobile:
        title: "mobile"
        type: string
      phone3:
        title: "phone3"
        type: string
      fax:
        title: "fax"
        type: string
      email:
        title: "email"
        type: string
      misc:
        title: "misc"
        type: string
      trade:
        title: "trade"
        type: object
        properties:
          id:
            type: integer
          key:
            type: string
            default: "1438001"
            enum:
              - "1438001"
              - "3192801"
              - "3192901"
              - "3193001"
              - "3193101"
              - "3193201"
              - "3193301"
              - "3193401"
              - "3193501"
              - "3193601"
              - "3193701"
              - "3193801"
              - "3278301"
              - "3278401"
              - "3319501"
              - "3323101"
              - "3348301"
          text:
            type: string
      visitingaddress:
        title: "visitingaddress"
        type: string
      maincustomer:
        title: "maincustomer"
        type: integer
      coworkerel:
        title: "coworkerel"
        type: integer
      coworkerfjv:
        title: "coworkerfjv"
        type: integer
      recyclingcoworker:
        title: "recyclingcoworker"
        type: boolean
      scandem:
        title: "scandem"
        type: boolean
      coworkeravf:
        title: "coworkeravf"
        type: integer
      relationel:
        title: "relationel"
        type: object
        properties:
          id:
            type: integer
          key:
            type: string
            default: "3164701"
            enum:
              - "3164701"
              - "3165101"
              - "3174401"
          text:
            type: string
      totconsumptionel:
        title: "totconsumptionel"
        type: integer
      relationfjv:
        title: "relationfjv"
        type: object
        properties:
          id:
            type: integer
          key:
            type: string
            default: "3166701"
            enum:
              - "3166701"
              - "3167101"
              - "3174501"
          text:
            type: string
      expireddate:
        title: "expireddate"
        type: string
        format: date-time
      anonymizeddate:
        title: "anonymizeddate"
        type: string
        format: date-time
      totconsumptionheat:
        title: "totconsumptionheat"
        type: integer
      suspectedduplicate:
        title: "suspectedduplicate"
        type: boolean
      duplicateid:
        title: "duplicateid"
        type: integer
      totconsumptioncooling:
        title: "totconsumptioncooling"
        type: integer
      totconsumptionnet:
        title: "totconsumptionnet"
        type: integer
  person:
    type: object
    required:
      - name
    properties:
      id:
        type: integer
        readOnly: true
      name:
        title: "name"
        type: string
      customer:
        title: "customer"
        type: integer
      active:
        title: "active"
        type: boolean
      jobfunction:
        title: "jobfunction"
        type: object
        properties:
          id:
            type: integer
          key:
            type: string
            default: "3243201"
            enum:
              - "3243201"
              - "3269301"
              - "3269401"
              - "3269501"
              - "3269601"
              - "3269701"
              - "3269801"
              - "3269901"
              - "3270001"
              - "3270101"
              - "3270201"
              - "3270301"
              - "3270401"
              - "3270501"
              - "3270601"
              - "3270701"
              - "3270801"
              - "3326201"
              - "3326301"
              - "3329601"
              - "3348401"
              - "3355901"
              - "3646801"
              - "3647101"
          text:
            type: string
      productarea:
        title: "productom"
        type: string
      mobile:
        title: "mobile"
        type: string
      phone:
        title: "phone"
        type: string
      email:
        title: "email"
        type: string
      mailings:
        title: "mailings"
        type: string
      customerintresst:
        title: "customerintresst"
        type: string
      misc:
        title: "misc"
        type: string
      address:
        title: "address"
        type: string
      zipcode:
        title: "zipcode"
        type: string
      city:
        title: "city"
        type: string
      expireddate:
        title: "Last date for anonymization"
        type: string
        format: date-time
      anonymizeddate:
        title: "Anonymize date"
        type: string
        format: date-time
  installation:
    type: object
    properties:
      id:
        type: integer
        readOnly: true
      customer:
        title: "customer"
        type: integer
      productarea:
        title: "productarea"
        type: object
        properties:
          id:
            type: integer
          key:
            type: string
            default: "1447001"
            enum:
              - "1447001"
              - "1451001"
              - "1452001"
              - "1453001"
              - "1509001"
              - "3206901"
          text:
            type: string
      active:
        title: "active"
        type: boolean
      webinstallation:
        title: "webinstallation"
        type: string
      address:
        title: "address"
        type: string
      apartmentno:
        title: "apartmentno"
        type: string
      zipcode:
        title: "zipcode"
        type: string
      city:
        title: "city"
        type: string
      propertyname:
        title: "propertyname"
        type: string
      installationidentifier:
        title: "installationidentifier"
        type: string
      name:
        title: "name"
        type: string
      invoicecomplete:
        title: "invoicecomplete"
        type: boolean
      decoupled:
        title: "decoupled"
        type: boolean
      invoiceaddress:
        title: "invoiceaddress"
        type: string
      karta:
        title: "karta"
        type: boolean
      probillcustomerid:
        title: "Probill customer number"
        type: string
      probillsiteid:
        title: "Probill site number"
        type: integer
      oldprobillsiteid:
        title: "oldprobillsiteid"
        type: string
      consumption:
        title: "consumption"
        type: integer
      meterno:
        title: "meterno"
        type: string
      typeiverk:
        title: "typeiverk"
        type: string
      fusesize:
        title: "fusesize"
        type: integer
      netarea:
        title: "netarea"
        type: string
      category:
        title: "category"
        type: string
      categoryno:
        title: "categoryno"
        type: string
      heatedarea:
        title: "heatedarea"
        type: integer
      localearea:
        title: "localearea"
        type: integer
      key1:
        title: "key1"
        type: string
      key2:
        title: "key2"
        type: string
      numberofapartments:
        title: "numberofapartments"
        type: integer
      reductionofconnectionfee:
        title: "reductionofconnectionfee"
        type: string
      reductionofconnectionfeeenddate:
        title: "reductionofconnectionfeeenddate"
        type: string
        format: date
      maininstallation:
        title: "maininstallation"
        type: integer
      surveydate:
        title: "surveydate"
        type: string
        format: date
      fcdate:
        title: "fcdate"
        type: string
        format: date
      designationno:
        title: "designationnumber"
        type: string
      articleno:
        title: "articleno"
        type: string
      serviceagreement:
        title: "serviceagreement"
        type: object
        properties:
          id:
            type: integer
          key:
            type: string
            default: "3333301"
            enum:
              - "3333301"
              - "3333701"
              - "3333801"
              - "3333901"
              - "3359201"
              - "3359301"
          text:
            type: string
      serviceagreementdate:
        title: "serviceagreementdate"
        type: string
        format: date
      rentuntil:
        title: "rentuntil"
        type: string
        format: date
      contactperson:
        title: "contactperson"
        type: string
      contactphone:
        title: "contactphone"
        type: string
      contactemail:
        title: "contactemail"
        type: string
      contactaddress:
        title: "contactaddress"
        type: string
      contactzipcode:
        title: "contactzipcode"
        type: string
      contactcity:
        title: "contactcity"
        type: string
      janitor:
        title: "janitor"
        type: string
      janitorphone:
        title: "janitorphone"
        type: string
      janitoremail:
        title: "janitoremail"
        type: string
      janitoraddress:
        title: "janitoraddress"
        type: string
      janitorzipcode:
        title: "janitorzipcode"
        type: string
      janitorcity:
        title: "janitorcity"
        type: string
      integrationid:
        title: "installationmasterid"
        type: integer
      tariff:
        title: "tariff"
        type: string
      tarifftemp:
        title: "tarifftemp"
        type: string
      tariffto:
        title: "tariffto"
        type: string
        format: date
  agreement:
    type: object
    required:
      - fixedprice
    properties:
      id:
        type: integer
        readOnly: true
      customer:
        title: "customer"
        type: integer
      installation:
        title: "installation"
        type: integer
      agreementno:
        title: "agreementno"
        type: string
      active:
        title: "active"
        type: boolean
      agreementdesc:
        title: "agreementdesc"
        type: string
      agreementtype:
        title: "agreementtype"
        type: string
      fixedprice:
        title: "fixedprice"
        type: string
      premiummov:
        title: "premiummov"
        type: string
      outprice:
        title: "outprice"
        type: string
      invoiceinterval:
        title: "invoiceinterval"
        type: string
      invoicedeliverytype:
        title: "invoicedeliverytype"
        type: string
      paymentform:
        title: "paymentform"
        type: string
      offerid:
        title: "offerid"
        type: string
      startdate:
        title: "startdate"
        type: string
        format: date
      enddate:
        title: "enddate"
        type: string
        format: date
      downcause:
        title: "downcause"
        type: object
        properties:
          id:
            type: integer
          key:
            type: string
            default: "3211301"
            enum:
              - "3211301"
              - "3229901"
              - "3230001"
              - "3230101"
              - "3230201"
          text:
            type: string
      probillcustomerid:
        title: "Probill Customer number"
        type: string
      probillsiteid:
        title: "Probill site number"
        type: integer
      oldprobillsiteid:
        title: "oldprobillsiteid"
        type: string
      integrationid:
        title: "agreementmasterid"
        type: integer
      specialconditions:
        title: "specialconditions"
        type: boolean
  Offert:
    type: object
    required:
      - probability
    properties:
      id:
        type: integer
        readOnly: true
      businessno:
        title: "businessno"
        type: string
      customer:
        title: "customer"
        type: integer
      person:
        title: "person"
        type: integer
      coworker:
        title: "coworker"
        type: integer
      installation:
        title: "installation"
        type: integer
      helpdesk:
        title: "sos"
        type: integer
      businessarea:
        title: "businessarea"
        type: integer
      businessareanew:
        title: "Buisiness area"
        type: integer
      businessareas:
        title: "businessareas"
        type: object
        properties:
          id:
            type: integer
          key:
            type: string
            default: "3816501"
            enum:
              - "3816501"
              - "3817001"
              - "3817101"
              - "3817201"
              - "3817301"
              - "3817401"
              - "3817501"
              - "energy"
          text:
            type: string
      probability:
        title: "Sannolikhet"
        type: string
      businessstatus:
        title: "Status"
        type: object
        properties:
          id:
            type: integer
          key:
            type: string
            default: "2367001"
            enum:
              - "2367001"
              - "inquiry"
              - "phone"
              - "customervisit"
              - "tender"
              - "won"
              - "await"
              - "lost"
              - "processing"
              - "done"
          text:
            type: string
      reason:
        title: "reason"
        type: object
        properties:
          id:
            type: integer
          key:
            type: string
            default: "3150401"
            enum:
              - "3150401"
              - "3150801"
              - "3150901"
              - "3151001"
              - "3234401"
              - "3319201"
          text:
            type: string
      businessvalue:
        title: "businessvalue"
        type: string
      amountinstallations:
        title: "Amount of installations"
        type: integer
      quotationdate:
        title: "Offertdatum"
        type: string
        format: date
      validto:
        title: "validto"
        type: string
        format: date
      expectedorder:
        title: "Förväntat orderdatum"
        type: string
      wonlost:
        title: "wonlost"
        type: string
        format: date
      agreementstart:
        title: "agreestart"
        type: string
        format: date
      agreementend:
        title: "agreeend"
        type: string
        format: date
      propertyname:
        title: "propertyname"
        type: string
      propertyaddress:
        title: "propertyaddress"
        type: string
      agreementtype:
        title: "agreetype"
        type: object
        properties:
          id:
            type: integer
          key:
            type: string
            default: "3145101"
            enum:
              - "3145101"
              - "3145201"
              - "3145301"
              - "3145401"
              - "3145501"
              - "3267301"
              - "3267401"
              - "3267501"
              - "3267601"
              - "3267701"
              - "3267801"
              - "3267901"
              - "3320401"
              - "3326401"
              - "3348501"
              - "3348601"
              - "3348701"
              - "3348801"
              - "3375001"
          text:
            type: string
      yearlyvolume:
        title: "yearlyvolume"
        type: integer
      pricekwh:
        title: "pricetot"
        type: string
      tbkwh:
        title: "tecknb"
        type: string
      uppfyllnad:
        title: "Måluppfyllnad_old"
        type: string
      goalachievement:
        title: "Måluppfyllnad"
        type: string
      certificate:
        title: "certificate"
        type: string
      fixedprice:
        title: "fixedprice"
        type: string
      weightedvalue:
        title: "weightedvalue"
        type: string
      weightedtb:
        title: "weightedtb"
        type: string
      competitor:
        title: "competitor"
        type: object
        properties:
          id:
            type: integer
          key:
            type: string
            default: "3320601"
            enum:
              - "3320601"
              - "3321001"
              - "3321101"
              - "3321201"
              - "3321301"
              - "3321401"
              - "3321501"
              - "3321601"
              - "3321701"
              - "3321801"
          text:
            type: string
      categoryno:
        title: "categoryno"
        type: string
      category:
        title: "category"
        type: object
        properties:
          id:
            type: integer
          key:
            type: string
            default: "3236001"
            enum:
              - "3236001"
              - "3236101"
              - "3236201"
              - "3236301"
              - "3236401"
              - "3236501"
              - "3236601"
              - "3236701"
              - "3236801"
              - "3236901"
              - "3237001"
          text:
            type: string
      yearvolume:
        title: "yearvolume"
        type: integer
      power:
        title: "power"
        type: integer
      tvv:
        title: "tvv"
        type: integer
      buildyear:
        title: "buildyear"
        type: string
      runarea:
        title: "runarea"
        type: object
        properties:
          id:
            type: integer
          key:
            type: string
            default: "3237801"
            enum:
              - "3237801"
              - "3238201"
              - "3238301"
              - "3238401"
              - "3238501"
              - "3238601"
              - "3238701"
          text:
            type: string
      heattype:
        title: "heattype"
        type: object
        properties:
          id:
            type: integer
          key:
            type: string
            default: "3154101"
            enum:
              - "3154101"
              - "3154201"
              - "3154301"
              - "3154401"
              - "3154501"
              - "3154601"
              - "3282801"
              - "3282901"
              - "3283001"
              - "3283101"
              - "3283201"
              - "3283301"
              - "3283401"
              - "3283501"
              - "3283601"
          text:
            type: string
      conversion:
        title: "conversion"
        type: object
        properties:
          id:
            type: integer
          key:
            type: string
            default: "3227701"
            enum:
              - "3227701"
              - "3228101"
              - "3228201"
              - "3684701"
          text:
            type: string
      deliverance:
        title: "Önskad leverans"
        type: string
      enviroment:
        title: "enviroment"
        type: boolean
      invoice:
        title: "invoice"
        type: boolean
      miscfjv:
        title: "miscfjv"
        type: string
      products:
        title: "products"
        type: object
        properties:
          id:
            type: integer
          key:
            type: string
            default: "3372001"
            enum:
              - "3372001"
              - "3372501"
              - "3372601"
              - "3372701"
              - "3690301"
              - "3690401"
              - "3690501"
          text:
            type: string
      volym:
        title: "volym"
        type: string
      price:
        title: "price"
        type: string
      f1:
        title: "f1"
        type: integer
      f5:
        title: "f5"
        type: integer
      cancelled:
        title: "cancelled"
        type: boolean
      country:
        title: "country"
        type: object
        properties:
          id:
            type: integer
          key:
            type: string
            default: "3372001"
            enum:
              - "3372001"
              - "3372501"
              - "3372601"
              - "3372701"
              - "3690301"
              - "3690401"
              - "3690501"
          text:
            type: string
      volym2:
        title: "volym2"
        type: string
      price2:
        title: "price2"
        type: string
      tjanst:
        title: "tjanst"
        type: object
        properties:
          id:
            type: integer
          key:
            type: string
            default: "3818401"
            enum:
              - "3818401"
              - "3818901"
              - "3820001"
          text:
            type: string
      one:
        title: "one"
        type: string
      two:
        title: "two"
        type: string
      three:
        title: "three"
        type: string
      four:
        title: "four"
        type: string
      five:
        title: "five"
        type: string
      other:
        title: "Övrig information"
        type: string
      cancelled2:
        title: "cancelled2"
        type: boolean
  Kampanj:
    type: object
    required:
      - name
      - goal
      - outcome
      - budget
      - campaigntype
      - noofparticipants
      - noofaccepted
      - volumem3
      - custminute
    properties:
      id:
        type: integer
        readOnly: true
      campaignid:
        title: "campaignid"
        type: string
      campaignstatus:
        title: "Kampanjstatus"
        type: object
        properties:
          id:
            type: integer
          key:
            type: string
            default: "planned"
            enum:
              - "planned"
              - "ongoing"
              - "done"
              - "notdone"
              - "avi"
          text:
            type: string
      name:
        title: "Namn"
        type: string
      businessareanew:
        title: "businessareanew"
        type: integer
      businessarea:
        title: "businessarea"
        type: integer
      campaigntype:
        title: "campaigntype"
        type: object
        properties:
          id:
            type: integer
          key:
            type: string
            default: "3246301"
            enum:
              - "3246301"
              - "3246701"
              - "3246801"
              - "3246901"
              - "3247001"
              - "3247101"
              - "3247201"
              - "3247301"
              - "interruptionnote"
              - "3281301"
              - "3326601"
              - "3326701"
              - "3334201"
              - "3334301"
              - "3355401"
              - "3355501"
              - "3355601"
              - "3355701"
              - "interruption"
              - "3647301"
              - "3690201"
          text:
            type: string
      location:
        title: "location"
        type: string
      startdate:
        title: "Startdatum"
        type: string
        format: date-time
      enddate:
        title: "Slutdatum"
        type: string
        format: date-time
      sendnolater:
        title: "sendnolater"
        type: string
        format: date
      coworker:
        title: "coworker"
        type: integer
      alternative1:
        title: "alternative1"
        type: string
      alternative2:
        title: "alternative2"
        type: string
      alternative3:
        title: "alternative3"
        type: string
      alternative4:
        title: "alternative4"
        type: string
      goal:
        title: "goalvalue"
        type: integer
      outcome:
        title: "outcome"
        type: integer
      noofparticipants:
        title: "noofparticipants"
        type: integer
      noofaccepted:
        title: "noofaccepted"
        type: integer
      custminute:
        title: "custminute"
        type: integer
      budget:
        title: "budget"
        type: string
      volumem3:
        title: "volumem3"
        type: integer
      alternative5:
        title: "alternative5"
        type: string
      linkedactivities:
        title: "linkedactivities"
        type: string
      salechannel:
        title: "salechannel"
        type: string
      purpose:
        title: "Syfte"
        type: string
      action:
        title: "Tillvägagångssätt"
        type: string
      evaluation:
        title: "evaluation"
        type: string
  Participant:
    type: object
    properties:
      id:
        type: integer
        readOnly: true
      participantno:
        title: "participantno"
        type: integer
      customer:
        title: "customer"
        type: integer
      person:
        title: "person"
        type: integer
      agreement:
        title: "agreement"
        type: integer
      installation:
        title: "installation"
        type: integer
      campaign:
        title: "campaign"
        type: integer
      campaignstatus:
        title: "Status"
        type: object
        properties:
          id:
            type: integer
          key:
            type: string
            default: "2484001"
            enum:
              - "2484001"
              - "2488001"
              - "2489001"
              - "2490001"
              - "2491001"
              - "3172801"
              - "3354301"
              - "3355801"
              - "3647501"
              - "3686301"
              - "3686901"
              - "3687001"
          text:
            type: string
      helpdesk:
        title: "sos"
        type: string
      phone:
        title: "campaignphone"
        type: string
      cellphone:
        title: "campaigncellphone"
        type: string
      email:
        title: "email"
        type: string
      name:
        title: "name"
        type: string
      address:
        title: "address"
        type: string
      coadress:
        title: "coadress"
        type: string
      zipcode:
        title: "zipcode"
        type: string
      city:
        title: "city"
        type: string
      country:
        title: "country"
        type: string
      followup:
        title: "followup"
        type: object
        properties:
          id:
            type: integer
          key:
            type: string
            default: "3053001"
            enum:
              - "3053001"
              - "3054001"
              - "3055001"
              - "3056001"
              - "3057001"
          text:
            type: string
      answertype:
        title: "answertype"
        type: object
        properties:
          id:
            type: integer
          key:
            type: string
            default: "3059001"
            enum:
              - "3059001"
              - "3060001"
              - "3061001"
              - "3062001"
              - "3249801"
              - "3249901"
          text:
            type: string
      selectedalternative:
        title: "selectedalternative"
        type: object
        properties:
          id:
            type: integer
          key:
            type: string
            default: "3224501"
            enum:
              - "3224501"
              - "3224901"
              - "3225001"
              - "3225101"
              - "3225201"
              - "3250001"
              - "3319601"
              - "3322701"
          text:
            type: string
      compstat:
        title: "compstat"
        type: string
      fjvstatus:
        title: "fjvstatus"
        type: object
        properties:
          id:
            type: integer
          key:
            type: string
            default: "3155701"
            enum:
              - "3155701"
              - "3156101"
              - "3156201"
              - "3156301"
              - "3156401"
              - "3156501"
          text:
            type: string
      ordertype:
        title: "ordertype"
        type: object
        properties:
          id:
            type: integer
          key:
            type: string
            default: "3266501"
            enum:
              - "3266501"
              - "3266601"
              - "3266701"
              - "3266801"
          text:
            type: string
      rot:
        title: "rot"
        type: boolean
      combo:
        title: "combo"
        type: boolean
      category:
        title: "category"
        type: object
        properties:
          id:
            type: integer
          key:
            type: string
            default: "3236001"
            enum:
              - "3236001"
              - "3236101"
              - "3236201"
              - "3236301"
              - "3236401"
              - "3236501"
              - "3236601"
              - "3236701"
              - "3236801"
              - "3236901"
              - "3237001"
          text:
            type: string
      categoryno:
        title: "kategorital"
        type: string
      heatedarea:
        title: "heatedarea"
        type: integer
      power:
        title: "power"
        type: integer
      tvv:
        title: "tvv"
        type: integer
      buildyear:
        title: "buildyear"
        type: string
      runarea:
        title: "runarea"
        type: object
        properties:
          id:
            type: integer
          key:
            type: string
            default: "3237801"
            enum:
              - "3237801"
              - "3238201"
              - "3238301"
              - "3238401"
              - "3238501"
              - "3238601"
              - "3238701"
          text:
            type: string
      heattype:
        title: "type"
        type: object
        properties:
          id:
            type: integer
          key:
            type: string
            default: "3154101"
            enum:
              - "3154101"
              - "3154201"
              - "3154301"
              - "3154401"
              - "3154501"
              - "3154601"
              - "3282801"
              - "3282901"
              - "3283001"
              - "3283101"
              - "3283201"
              - "3283301"
              - "3283401"
              - "3283501"
              - "3283601"
          text:
            type: string
      consumption:
        title: "consumption"
        type: integer
      conversion:
        title: "conversion"
        type: object
        properties:
          id:
            type: integer
          key:
            type: string
            default: "3227701"
            enum:
              - "3227701"
              - "3228101"
              - "3228201"
              - "3684701"
          text:
            type: string
      propertyname:
        title: "propertyname"
        type: string
      propertyaddress:
        title: "ownersaddress"
        type: string
      deliverance:
        title: "deliverance"
        type: string
      coworker:
        title: "coworker"
        type: integer
      other:
        title: "Övrig information"
        type: string
  history:
    type: object
    required:
      - date
      - type
    properties:
      id:
        type: integer
        readOnly: true
      date:
        title: "date"
        type: string
        format: date-time
      type:
        title: "activitytype"
        type: object
        properties:
          id:
            type: integer
          key:
            type: string
            default: "3244901"
            enum:
              - "3244901"
              - "comment"
              - "3252701"
              - "3268001"
              - "3268101"
              - "3268201"
              - "3268301"
              - "customervisit"
              - "3268501"
              - "3268601"
              - "3268701"
              - "sendout"
              - "3268901"
              - "3269001"
              - "3269101"
              - "3269201"
              - "autocomment"
              - "3285601"
              - "3285701"
              - "3285801"
              - "3285901"
              - "3315501"
              - "3326001"
              - "3326101"
              - "3329701"
              - "3329801"
              - "3334401"
              - "3334501"
              - "3334801"
              - "3353401"
              - "3353501"
              - "3353601"
              - "3353701"
              - "3353801"
              - "3354101"
              - "3354201"
              - "3359401"
              - "3396401"
              - "3396701"
              - "3396901"
              - "3397001"
              - "3399101"
              - "3614901"
              - "3643701"
              - "3643801"
              - "3643901"
              - "3644301"
              - "3646201"
              - "3646301"
              - "3646401"
              - "3646901"
              - "3647201"
              - "3647401"
              - "3647601"
              - "3683701"
              - "3683901"
              - "3684001"
              - "3686401"
              - "3686601"
              - "3686801"
              - "3691101"
              - "checklist"
              - "receivedemail"
              - "3792501"
              - "callednoanswer"
              - "3792701"
              - "3792801"
              - "3793101"
              - "customertalk"
              - "todo"
              - "tododone"
              - "sentsms"
              - "agreement"
          text:
            type: string
      recievedvia:
        title: "recievedvia"
        type: object
        properties:
          id:
            type: integer
          key:
            type: string
            default: "3640301"
            enum:
              - "3640301"
              - "3640801"
              - "3640901"
              - "3641001"
              - "3641101"
              - "3641201"
              - "3641301"
              - "3643501"
              - "3644001"
              - "3644101"
              - "3646501"
              - "3686701"
          text:
            type: string
      customer:
        title: "customer"
        type: integer
      person:
        title: "person"
        type: integer
      coworker:
        title: "coworker"
        type: integer
      helpdesk:
        title: "helpdesk"
        type: integer
      installation:
        title: "installation"
        type: integer
      business:
        title: "business"
        type: integer
      comment:
        title: "comment"
        type: string
      complaint:
        title: "complaint"
        type: boolean
      enddate:
        title: "enddate"
        type: string
        format: date-time
      done:
        title: "done"
        type: boolean
      note:
        title: "note"
        type: string
      text:
        title: "text"
        type: string
      campaign:
        title: "campaign"
        type: integer
      office:
        title: "department"
        type: integer
      checklist_item:
        title: "checklist_item"
        type: string
      todo:
        title: "todo"
        type: integer
      signagreement:
        title: "signagreement"
        type: integer
      smsrecipient:
        title: "smsrecipient"
        type: string
  Sign_agreement:
    type: object
    required:
      - levadress
      - levpostalnumber
      - levarea
      - installationid
      - areaid
      - agreementtype
      - agreementstart
    properties:
      id:
        type: integer
        readOnly: true
      helpdesk:
        title: "helpdesk"
        type: integer
      levadress:
        title: "adress"
        type: string
      levpostalnumber:
        title: "postalnumber"
        type: string
      levarea:
        title: "area"
        type: string
      installationid:
        title: "installationid"
        type: string
      areaid:
        title: "areaid"
        type: string
      invoiceadress:
        title: "invoiceadress"
        type: boolean
      coinvoinceadress:
        title: "coinvoinceadress"
        type: string
      invoiceadres:
        title: "invoiceadres"
        type: string
      postalid:
        title: "postalid"
        type: string
      invoicearea:
        title: "invoicearea"
        type: string
      invoicecountry:
        title: "invoicecountry"
        type: string
      agreementtype:
        title: "agreementtype"
        type: string
      energyprice:
        title: "energyprice"
        type: string
      yearuse:
        title: "yearuse"
        type: string
      agreementstart:
        title: "agreementstart"
        type: string
        format: date
      reducedfee:
        title: "reducedfee"
        type: string
      pricecert:
        title: "pricecert"
        type: string
      enviroment:
        title: "enviroment"
        type: boolean
      reducedtax:
        title: "reducedtax"
        type: boolean
      discount:
        title: "discount"
        type: boolean
      coment:
        title: "coment"
        type: string
  document:
    type: object
    required:
      - date
    properties:
      id:
        type: integer
        readOnly: true
      whiteboard:
        title: "whiteboard"
        type: integer
      document:
        title: "document"
        type: string
      date:
        title: "date"
        type: string
        format: date-time
      type:
        title: "type"
        type: object
        properties:
          id:
            type: integer
          key:
            type: string
            default: "empty"
            enum:
              - "avtal"
              - "156001"
              - "159001"
              - "162001"
              - "1598001"
              - "2669001"
              - "2709001"
              - "2710001"
              - "2711001"
              - "fullmakt"
              - "2728001"
              - "2756001"
              - "3270901"
              - "3271001"
              - "3271101"
              - "3271201"
              - "3271301"
              - "3281401"
              - "3310101"
              - "3310201"
              - "3313501"
              - "3322801"
              - "3323201"
              - "3323301"
              - "3326501"
              - "3330301"
              - "3330501"
              - "3358001"
              - "3360101"
              - "3396601"
              - "3612701"
              - "3644201"
              - "3644501"
              - "3644601"
              - "3644701"
              - "3644901"
              - "3645001"
              - "3645101"
              - "3645201"
              - "3645301"
              - "email"
              - "empty"
              - "3683801"
              - "3686501"
              - "affar"
              - "anlaggning"
              - "kontakt"
              - "ovrigt"
              - "internt"
          text:
            type: string
      regarding:
        title: "regarding"
        type: string
      coworker:
        title: "coworker"
        type: integer
      installationspecifik:
        title: "installationspecifik"
        type: boolean
      misc:
        title: "misc"
        type: string
      customer:
        title: "customer"
        type: integer
      person:
        title: "person"
        type: integer
      helpdesk:
        title: "helpdesk"
        type: integer
      campaign:
        title: "campaign"
        type: integer
      business:
        title: "business"
        type: integer
      installation:
        title: "installation"
        type: integer
      maininstallation:
        title: "maininstallation"
        type: integer
      agreement:
        title: "agreement"
        type: integer
      participant:
        title: "participant"
        type: integer
      workorder:
        title: "workorder"
        type: integer
      checklist_createdfromtemplate:
        title: "checklist_createdfromtemplate"
        type: string
      todo:
        title: "todo"
        type: integer
      history:
        title: "history"
        type: integer
      comment:
        title: "comment"
        type: string
  coworker:
    type: object
    required:
      - name
    properties:
      id:
        type: integer
        readOnly: true
      name:
        title: "name"
        type: string
      title:
        title: "title"
        type: string
      office:
        title: "office"
        type: integer
      phone:
        title: "phone"
        type: string
      mobile:
        title: "mobile"
        type: string
      email:
        title: "email"
        type: string
      user:
        title: "user"
        type: string
      active:
        title: "active"
        type: boolean
      limitedaccess:
        title: "limitedaccess"
        type: boolean
      businessdocument:
        title: "businessdocument"
        type: boolean
      lastentry:
        title: "lastentry"
        type: string
      haspassword:
        title: "haspassword"
        type: string
      businesschecklogin:
        title: "businesschecklogin"
        type: integer
      entrepreneur:
        title: "serviceman"
        type: string
      misc:
        title: "misc"
        type: string
      whiteboardinterest:
        title: "whiteboardinterest"
        type: string
  Office:
    type: object
    required:
      - name
    properties:
      id:
        type: integer
        readOnly: true
      name:
        title: "name"
        type: string
      active:
        title: "active"
        type: boolean
      misc:
        title: "misc"
        type: string
  todo:
    type: object
    properties:
      id:
        type: integer
        readOnly: true
      subject:
        title: "subject"
        type: string
      starttime:
        title: "starttime"
        type: string
        format: date-time
      endtime:
        title: "endtime"
        type: string
        format: date-time
      coworker:
        title: "coworker"
        type: integer
      customer:
        title: "customer"
        type: integer
      installation:
        title: "installation"
        type: integer
      note:
        title: "note"
        type: string
      person:
        title: "person"
        type: integer
      business:
        title: "business"
        type: integer
      campaign:
        title: "campaign"
        type: integer
      helpdesk:
        title: "helpdesk"
        type: integer
      office:
        title: "office"
        type: integer
      done:
        title: "done"
        type: boolean
      todostatus:
        title: "todostatus"
        type: object
        properties:
          id:
            type: integer
          key:
            type: string
            default: "empty"
            enum:
              - "empty"
              - "delayed"
              - "done"
              - "future"
              - "active"
          text:
            type: string
  Buisiness_area:
    type: object
    properties:
      id:
        type: integer
        readOnly: true
      name:
        title: "Name"
        type: string
      active:
        title: "Active"
        type: boolean
  Protected_ID:
    type: object
    properties:
      id:
        type: integer
        readOnly: true
      protectedcoustoumerid:
        title: "protectedcoustoumerid"
        type: string
      securityprotected:
        title: "securityprotected"
        type: string
      nameprotected:
        title: "nameprotected"
        type: string
      numberprotected:
        title: "numberprotected"
        type: string
      phone2protected:
        title: "phone2protected"
        type: string
      mailprotected:
        title: "mailprotected"
        type: string
      otherprotected:
        title: "otherprotected"
        type: string
  maininstallation:
    type: object
    required:
      - name
    properties:
      id:
        type: integer
        readOnly: true
      name:
        title: "name"
        type: string
      manufacturer:
        title: "manufacturer"
        type: string
  SMS_sendout:
    type: object
    required:
      - send_date
      - bw_sms_message_id
    properties:
      id:
        type: integer
        readOnly: true
      name:
        title: "Name"
        type: string
      send_date:
        title: "Send date"
        type: string
        format: date
      smssendoutstatus:
        title: "Sendout status"
        type: object
        properties:
          id:
            type: integer
          key:
            type: string
            default: "created"
            enum:
              - "3807301"
              - "finished"
              - "failed"
              - "inprogress"
              - "created"
          text:
            type: string
      bw_sms_message_id:
        title: "SMS Message ID"
        type: integer
      helpdesk:
        title: "helpdesk"
        type: integer
      message:
        title: "Message"
        type: string
  SMS_template:
    type: object
    properties:
      id:
        type: integer
        readOnly: true
      name:
        title: "Name"
        type: string
      inactive:
        title: "Inactive"
        type: boolean
      fortable:
        title: "For table"
        type: string
      default:
        title: "Default"
        type: boolean
      message:
        title: "Message"
        type: string
  SMS_recipient:
    type: object
    required:
      - bw_smsrecipient_id
    properties:
      id:
        type: integer
        readOnly: true
      smssendout:
        title: "SMS sendout"
        type: integer
      smsrecipientstatus:
        title: "Delivery status"
        type: object
        properties:
          id:
            type: integer
          key:
            type: string
            default: "init"
            enum:
              - "3813001"
              - "init"
              - "queued"
              - "delivered"
              - "failed"
              - "sent"
          text:
            type: string
      bw_smsrecipient_id:
        title: "Recipient ID"
        type: integer
      phoneno:
        title: "Phone number"
        type: string
      customer:
        title: "customer"
        type: integer
      installation:
        title: "installation"
        type: integer
      helpdesk:
        title: "helpdesk"
        type: integer
      campaign:
        title: "Kampanj"
        type: integer
      history:
        title: "history"
        type: integer
  checklist_item:
    type: object
    required:
      - order
      - item_template_id
      - owner_table
    properties:
      id:
        type: integer
        readOnly: true
      order:
        title: "order"
        type: integer
      title:
        title: "title"
        type: string
      item_template_id:
        title: "item_template_id"
        type: string
      group_item_template_id:
        title: "group_item_template_id"
        type: string
      is_group:
        title: "is_group"
        type: boolean
      multi_option_parent:
        title: "multi_option_parent"
        type: boolean
      multi_option_child:
        title: "multi_option_child"
        type: boolean
      done:
        title: "done"
        type: boolean
      ignore:
        title: "ignore"
        type: boolean
      coworker:
        title: "coworker"
        type: integer
      done_date:
        title: "done_date"
        type: string
        format: date-time
      ignore_date:
        title: "ignore_date"
        type: string
        format: date-time
      deadline:
        title: "deadline"
        type: string
        format: date-time
      checklist_item_previous:
        title: "checklist_item_previous"
        type: integer
      history:
        title: "history"
        type: integer
      selected_option_title:
        title: "selected_option_title"
        type: string
      owner_table:
        title: "owner_table"
        type: string
      helpdesk:
        title: "helpdesk"
        type: integer
  debitrequest:
    type: object
    properties:
      id:
        type: integer
        readOnly: true
      customer:
        title: "customer"
        type: integer
      helpdesk:
        title: "helpdesk"
        type: integer
      installation:
        title: "installation"
        type: integer
      billed:
        title: "billed"
        type: boolean
      invoiceref:
        title: "invoiceref"
        type: string
      invoicedescription:
        title: "invoicedescription"
        type: string
      otherdeb:
        title: "otherdeb"
        type: string
      serviceprotocol:
        title: "serviceprotocol"
        type: integer
      workdate:
        title: "workdate"
        type: string
        format: date
      starttime:
        title: "starttime"
        type: string
        format: date-time
      endtime:
        title: "endtime"
        type: string
        format: date-time
      rot:
        title: "rot"
        type: boolean
      projectnumber:
        title: "projectnumber"
        type: string
      article:
        title: "article"
        type: string
  serviceprotocol:
    type: object
    required:
      - front
      - returnfv
      - radreturn
      - radfront
      - returnvk
      - outsidetemp
      - staticpresure
      - forpresure
      - hotwatertemp
      - heatmwh
      - m3
    properties:
      id:
        type: integer
        readOnly: true
      helpdesk:
        title: "helpdesk"
        type: integer
      customer:
        title: "customer"
        type: integer
      coworker:
        title: "coworker"
        type: integer
      installation:
        title: "installation"
        type: integer
      date:
        title: "date"
        type: string
        format: date
      starttime:
        title: "starttime"
        type: string
        format: date-time
      endtime:
        title: "endtime"
        type: string
        format: date-time
      heattemp:
        title: "heattemp"
        type: string
      front:
        title: "front"
        type: string
      returnfv:
        title: "returnfv"
        type: string
      radreturn:
        title: "radreturn"
        type: string
      heatcircletemp:
        title: "heatcircletemp"
        type: string
      radfront:
        title: "radfront"
        type: string
      returnvk:
        title: "returnvk"
        type: string
      outsidetemp:
        title: "outsidetemp"
        type: string
      forpresure:
        title: "forpresure"
        type: string
      staticpresure:
        title: "staticpresure"
        type: string
      heatmesure:
        title: "heatmesure"
        type: string
      heatmwh:
        title: "heatmwh"
        type: string
      m3:
        title: "m3"
        type: string
      hotwatertemp:
        title: "hotwatertemp"
        type: string
      leak:
        title: "leak"
        type: boolean
      leakcoment:
        title: "leakcoment"
        type: string
      expander:
        title: "expander"
        type: boolean
      expansioncoment:
        title: "expansioncoment"
        type: string
      safteyvent:
        title: "safteyvent"
        type: boolean
      safteyventcoment:
        title: "safteyventcoment"
        type: string
      pumps:
        title: "pumps"
        type: boolean
      pumpcoment:
        title: "pumpcoment"
        type: string
      regcen:
        title: "regcen"
        type: boolean
      regcencoment:
        title: "regcencoment"
        type: string
      mesurement:
        title: "mesurement"
        type: boolean
      mesurementcoment:
        title: "mesurementcoment"
        type: string
      ventoff:
        title: "ventoff"
        type: boolean
      ventoffcoment:
        title: "ventoffcoment"
        type: string
  article:
    type: object
    required:
      - count
      - price
      - totalart
    properties:
      id:
        type: integer
        readOnly: true
      article:
        title: "article"
        type: string
      count:
        title: "count"
        type: string
      price:
        title: "price"
        type: string
      totalart:
        title: "totalart"
        type: string
      debitrequest:
        title: "debitrequest"
        type: string
  Legal_base_consent:
    type: object
    required:
      - date
      - source
    properties:
      id:
        type: integer
        readOnly: true
      consenttype:
        title: "Legal base/consent type"
        type: integer
      approved:
        title: "Approved"
        type: boolean
      date:
        title: "Date"
        type: string
        format: date-time
      source:
        title: "Source"
        type: object
        properties:
          id:
            type: integer
          key:
            type: string
            default: "3676501"
            enum:
              - "3676001"
              - "3676501"
              - "coworker"
              - "email"
              - "portal"
              - "letter"
              - "newsletter"
              - "webform"
          text:
            type: string
      note:
        title: "Note"
        type: string
      person:
        title: "Person"
        type: integer
      customer:
        title: "customer"
        type: integer
  soschecklistactivity:
    type: object
    required:
      - position
    properties:
      id:
        type: integer
        readOnly: true
      description:
        title: "description"
        type: string
      checklistactivity:
        title: "checklistactivity"
        type: integer
      done:
        title: "done"
        type: boolean
      ignore:
        title: "Ignored"
        type: boolean
      ongoing:
        title: "ongoing"
        type: boolean
      helpdesk:
        title: "helpdesk"
        type: integer
      checklistactivityoption:
        title: "checklistactivityoption"
        type: integer
      office:
        title: "office"
        type: integer
      position:
        title: "position"
        type: integer
  Consent_type:
    type: object
    required:
      - title
    properties:
      id:
        type: integer
        readOnly: true
      title:
        title: "Title"
        type: string
      active:
        title: "Active"
        type: boolean
      readonly:
        title: "Readonly"
        type: boolean
      default:
        title: "Default when new"
        type: boolean
      description:
        title: "Description"
        type: string
  InfoTile:
    type: object
    properties:
      id:
        type: integer
        readOnly: true
      active:
        title: "Active"
        type: boolean
      visiblefor:
        title: "Visible for"
        type: object
        properties:
          id:
            type: integer
          key:
            type: string
            default: "all"
            enum:
              - "all"
              - "department"
              - "me"
          text:
            type: string
      coworker:
        title: "Specific coworker"
        type: integer
      office:
        title: "Office"
        type: integer
      operator:
        title: "Operator"
        type: object
        properties:
          id:
            type: integer
          key:
            type: string
            default: "count"
            enum:
              - "count"
              - "link"
              - "sum"
              - "field"
          text:
            type: string
      visibleon:
        title: "Visble on"
        type: string
      classname:
        title: "Tab"
        type: string
      fieldname:
        title: "Field"
        type: string
      filtername:
        title: "Filter"
        type: string
      icon:
        title: "Icon"
        type: string
      label:
        title: "Label"
        type: string
      sortorder:
        title: "Sort order"
        type: string
      size:
        title: "Size"
        type: object
        properties:
          id:
            type: integer
          key:
            type: string
            default: "small"
            enum:
              - "small"
              - "medium"
              - "large"
          text:
            type: string
      color:
        title: "Color"
        type: object
        properties:
          id:
            type: integer
          key:
            type: string
            default: "3616801"
            enum:
              - "3616801"
              - "clean-green"
              - "blue"
              - "purple"
              - "yellow"
              - "green"
              - "citrus"
              - "deep-red"
              - "light-grey"
              - "magenta"
              - "dark-grey"
              - "purple-rain"
              - "orange"
              - "red"
              - "turquoise"
          text:
            type: string
      visibleonzero:
        title: "Visable on Zero"
        type: boolean
  nextstep:
    type: object
    properties:
      id:
        type: integer
        readOnly: true
      checklistactivity:
        title: "checklistactivity"
        type: integer
      nextcheckliststep:
        title: "nextcheckliststep"
        type: integer
  timelog:
    type: object
    required:
      - date
      - worktime
      - overtime
      - timelogtype
    properties:
      id:
        type: integer
        readOnly: true
      date:
        title: "date"
        type: string
        format: date
      timelogtype:
        title: "timelogtype"
        type: object
        properties:
          id:
            type: integer
          key:
            type: string
            default: "3316501"
            enum:
              - "3316501"
              - "3316901"
              - "3317001"
              - "3317101"
          text:
            type: string
      coworker:
        title: "coworker"
        type: integer
      worktime:
        title: "worktime"
        type: string
      material:
        title: "material"
        type: string
      overtime:
        title: "overtime"
        type: string
      helpdesk:
        title: "sos"
        type: integer
  checklistactivity_old:
    type: object
    required:
      - order
      - position
      - deadlinedays
    properties:
      id:
        type: integer
        readOnly: true
      helpdesk:
        title: "sos"
        type: integer
      tooltip:
        title: "tooltip"
        type: string
      position:
        title: "position"
        type: integer
      hasoptions:
        title: "hasoptions"
        type: boolean
      runvba:
        title: "runvba"
        type: string
      name:
        title: "Namn"
        type: string
      documenttype:
        title: "documenttype"
        type: object
        properties:
          id:
            type: integer
          key:
            type: string
            default: "3488401"
            enum:
              - "3488401"
              - "3488901"
              - "agreement"
              - "email"
              - "tender"
              - "other"
          text:
            type: string
      email:
        title: "email"
        type: string
      externallink:
        title: "externallink"
        type: string
      deadlinedays:
        title: "deadlinedays"
        type: integer
      comment:
        title: "comment"
        type: boolean
      cancelerrand:
        title: "cancelerrand"
        type: boolean
      order:
        title: "Ordning1"
        type: integer
      documents:
        title: "Dokumentmallar"
        type: string
      createhistorywhencompleted:
        title: "Skapa historik vid klar"
        type: boolean
      description:
        title: "Beskrivning"
        type: string
      done:
        title: "Klar"
        type: boolean
      donedate:
        title: "Klardatum"
        type: string
        format: date
      externaldocuments:
        title: "Externa dokument"
        type: string
      parentchecklistactivity:
        title: "parentchecklistactivity"
        type: integer
      coworker:
        title: "coworker"
        type: integer
  Checklist_Activity:
    type: object
    required:
      - position
      - deadlinedays
    properties:
      id:
        type: integer
        readOnly: true
      description:
        title: "description"
        type: string
      tooltip:
        title: "tooltip"
        type: string
      position:
        title: "position"
        type: integer
      hasoptions:
        title: "hasoptions"
        type: boolean
      helpdesktype:
        title: "checklisttemplate"
        type: integer
      checklistactivitytemplate:
        title: "checklistactivitytemplate"
        type: integer
      runvba:
        title: "runvba"
        type: string
      document:
        title: "document"
        type: string
      documenttype:
        title: "documenttype"
        type: object
        properties:
          id:
            type: integer
          key:
            type: string
            default: "3599701"
            enum:
              - "3599101"
              - "3599601"
              - "3599701"
              - "agreement"
              - "email"
              - "tender"
              - "other"
          text:
            type: string
      email:
        title: "email"
        type: string
      externallink:
        title: "externallink"
        type: string
      office:
        title: "office"
        type: integer
      deadlinedays:
        title: "deadlinedays"
        type: integer
      comment:
        title: "comment"
        type: boolean
      cancelerrand:
        title: "cancelerrand"
        type: boolean
  checklistactivitytemplate:
    type: object
    required:
      - name
      - order
    properties:
      id:
        type: integer
        readOnly: true
      helpdesktype:
        title: "checklisttemplate"
        type: integer
      name:
        title: "Namn"
        type: string
      order:
        title: "Ordning"
        type: integer
      createhistorywhencompleted:
        title: "Skapa historik vid klar"
        type: boolean
      description:
        title: "Beskrivning"
        type: string
      documents:
        title: "Dokument"
        type: string
      externaldocuments:
        title: "Externa dokument"
        type: string
      parentchecklistactivitytemplate:
        title: "parentchecklistactivitytemplate"
        type: integer
      office:
        title: "department"
        type: integer
      coworker:
        title: "coworker"
        type: integer
  Integration_log:
    type: object
    required:
      - log_status
      - log_timestamp
    properties:
      id:
        type: integer
        readOnly: true
      log_status:
        title: "log_status"
        type: integer
      log_timestamp:
        title: "log_timestamp"
        type: string
        format: date-time
      log_finished:
        title: "log_finished"
        type: string
        format: date-time
      message_short:
        title: "message_short"
        type: string
  Whiteboard:
    type: object
    required:
      - amountintressents
    properties:
      id:
        type: integer
        readOnly: true
      created:
        title: "created"
        type: string
        format: date-time
      coworker:
        title: "coworker"
        type: integer
      card:
        title: "card"
        type: string
      maincategory:
        title: "maincategory"
        type: object
        properties:
          id:
            type: integer
          key:
            type: string
            default: "3335601"
            enum:
              - "3335601"
              - "3335701"
              - "3335801"
              - "3335901"
              - "3336001"
              - "3336101"
              - "3336201"
              - "3336301"
              - "3336401"
              - "3336501"
          text:
            type: string
      priority:
        title: "priority"
        type: object
        properties:
          id:
            type: integer
          key:
            type: string
            default: "3339701"
            enum:
              - "3339701"
              - "3340101"
              - "3340201"
              - "3340301"
          text:
            type: string
      title:
        title: "title"
        type: string
      description:
        title: "description"
        type: string
      whiteboardstatus:
        title: "whiteboardstatus"
        type: object
        properties:
          id:
            type: integer
          key:
            type: string
            default: "3338101"
            enum:
              - "3338101"
              - "3338501"
              - "3338601"
              - "3338701"
              - "3338801"
              - "3338901"
              - "3339001"
              - "3339101"
          text:
            type: string
      responsiblecoworker:
        title: "responsiblecoworker"
        type: integer
      coworkerdoer:
        title: "coworkerdoer"
        type: integer
      done_rejected_date:
        title: "done_rejected_date"
        type: string
        format: date
      timeestimation:
        title: "timeestimation"
        type: string
      amountintressents:
        title: "amountintressents"
        type: integer
      comment:
        title: "comment"
        type: string
      coworkerinterested:
        title: "coworkerinterested"
        type: string
  helpdeskgroup:
    type: object
    properties:
      id:
        type: integer
        readOnly: true
      name:
        title: "name"
        type: string
      active:
        title: "active"
        type: boolean
  helpdeskgroupmembers:
    type: object
    properties:
      id:
        type: integer
        readOnly: true
      helpdeskgroup:
        title: "helpdeskgroup"
        type: integer
      coworker:
        title: "coworker"
        type: integer
      active:
        title: "active"
        type: boolean
  Localization:
    type: object
    properties:
      id:
        type: integer
        readOnly: true
      owner:
        title: "Owner"
        type: string
      code:
        title: "Text code"
        type: string
      lookupcode:
        title: "VBA Lookup code"
        type: string
      formtag:
        title: "VBA Form tag"
        type: string
      aplocalizecode:
        title: "Actionpad translation code"
        type: string
      context:
        title: "Context"
        type: string
      sv:
        title: "Swedish"
        type: string
      en_us:
        title: "English"
        type: string
      'no':
        title: "Norwegian"
        type: string
      da:
        title: "Danish"
        type: string
      fi:
        title: "Finnish"
        type: string
  workorder:
    type: object
    required:
      - description
      - workordertype
    properties:
      id:
        type: integer
        readOnly: true
      helpdesk:
        title: "sos"
        type: integer
      entrepreneur:
        title: "serviceman"
        type: integer
      coworker:
        title: "coworker"
        type: integer
      description:
        title: "description"
        type: string
      workordertype:
        title: "workordertype"
        type: object
        properties:
          id:
            type: integer
          key:
            type: string
            default: "3274501"
            enum:
              - "3274501"
              - "3274901"
              - "3275001"
              - "3275101"
              - "3275201"
              - "3353901"
              - "3354001"
          text:
            type: string
      workorderstatus:
        title: "wostatus"
        type: object
        properties:
          id:
            type: integer
          key:
            type: string
            default: "3158001"
            enum:
              - "3158001"
              - "3158201"
              - "3171701"
          text:
            type: string
      orderdate:
        title: "orderdate"
        type: string
        format: date
      bookeddate:
        title: "bookeddate"
        type: string
        format: date
      bookedstart:
        title: "bookedstart"
        type: string
        format: date-time
      plannedend:
        title: "plannedend"
        type: string
        format: date
      enddate:
        title: "enddate"
        type: string
        format: date
      realestateinfo:
        title: "realestateinfo"
        type: string
      donenotification:
        title: "donenotification"
        type: boolean
      donesurvey:
        title: "donesurvey"
        type: boolean
      other_information:
        title: "other_information"
        type: string
  Entrepreneur:
    type: object
    required:
      - name
    properties:
      id:
        type: integer
        readOnly: true
      name:
        title: "name"
        type: string
      registrationno:
        title: "registrationno"
        type: string
      active:
        title: "active"
        type: boolean
      address:
        title: "address"
        type: string
      zipcode:
        title: "zipcode"
        type: string
      city:
        title: "city"
        type: string
      phone:
        title: "phone"
        type: string
      fax:
        title: "fax"
        type: string
      email:
        title: "email"
        type: string
      coworker:
        title: "coworker"
        type: integer
  entrepreneurcontact:
    type: object
    required:
      - name
    properties:
      id:
        type: integer
        readOnly: true
      name:
        title: "name"
        type: string
      active:
        title: "active"
        type: boolean
      entrepreneur:
        title: "entrepreneur"
        type: integer
      phone:
        title: "phone"
        type: string
      mobile:
        title: "mobile"
        type: string
      email:
        title: "email"
        type: string
  businesschecklogin:
    type: object
    required:
      - bcusername
      - bcpwd
      - bccompanyid
    properties:
      id:
        type: integer
        readOnly: true
      coworker:
        title: "coworker"
        type: string
      bccompanyid:
        title: "bccompanyid"
        type: string
      bcusername:
        title: "bcusername"
        type: string
      bcpwd:
        title: "bcpwd"
        type: string
  Error:
    type: object
    properties:
      limeobject_id:
        type: integer
      limetype:
        type: string
      errors:
        type: array
        items:
          $ref: '#/definitions/ErrorDetail'
  ErrorDetail:
    type: object
    properties:
      error_message:
        type: string
      limeproperty:
        type: string
      error_code:
        type: string